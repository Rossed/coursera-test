[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar EJSON = Package.ejson.EJSON;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar ReactiveDict;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"reactive-dict\":{\"reactive-dict.js\":[\"babel-runtime/helpers/typeof\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/reactive-dict/reactive-dict.js                                                                        //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nvar _typeof;module.import('babel-runtime/helpers/typeof',{\"default\":function(v){_typeof=v}});                     //\n// XXX come up with a serialization method which canonicalizes object key                                         //\n// order, which would allow us to use objects as values for equals.                                               //\nvar stringify = function stringify(value) {                                                                       // 3\n  if (value === undefined) return 'undefined';                                                                    // 4\n  return EJSON.stringify(value);                                                                                  // 6\n};                                                                                                                // 7\nvar parse = function parse(serialized) {                                                                          // 8\n  if (serialized === undefined || serialized === 'undefined') return undefined;                                   // 9\n  return EJSON.parse(serialized);                                                                                 // 11\n};                                                                                                                // 12\n                                                                                                                  //\nvar changed = function changed(v) {                                                                               // 14\n  v && v.changed();                                                                                               // 15\n};                                                                                                                // 16\n                                                                                                                  //\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName                                               //\nReactiveDict = function (_ReactiveDict) {                                                                         // 19\n  function ReactiveDict(_x) {                                                                                     // 19\n    return _ReactiveDict.apply(this, arguments);                                                                  // 19\n  }                                                                                                               // 19\n                                                                                                                  //\n  ReactiveDict.toString = function () {                                                                           // 19\n    return _ReactiveDict.toString();                                                                              // 19\n  };                                                                                                              // 19\n                                                                                                                  //\n  return ReactiveDict;                                                                                            // 19\n}(function (dictName) {                                                                                           // 19\n  // this.keys: key -> value                                                                                      //\n  if (dictName) {                                                                                                 // 21\n    if (typeof dictName === 'string') {                                                                           // 22\n      // the normal case, argument is a string name.                                                              //\n      // _registerDictForMigrate will throw an error on duplicate name.                                           //\n      ReactiveDict._registerDictForMigrate(dictName, this);                                                       // 25\n      this.keys = ReactiveDict._loadMigratedDict(dictName) || {};                                                 // 26\n      this.name = dictName;                                                                                       // 27\n    } else if ((typeof dictName === 'undefined' ? 'undefined' : _typeof(dictName)) === 'object') {                // 28\n      // back-compat case: dictName is actually migrationData                                                     //\n      this.keys = dictName;                                                                                       // 30\n    } else {                                                                                                      // 31\n      throw new Error(\"Invalid ReactiveDict argument: \" + dictName);                                              // 32\n    }                                                                                                             // 33\n  } else {                                                                                                        // 34\n    // no name given; no migration will be performed                                                              //\n    this.keys = {};                                                                                               // 36\n  }                                                                                                               // 37\n                                                                                                                  //\n  this.allDeps = new Tracker.Dependency();                                                                        // 39\n  this.keyDeps = {}; // key -> Dependency                                                                         // 40\n  this.keyValueDeps = {}; // key -> Dependency                                                                    // 41\n});                                                                                                               // 42\n                                                                                                                  //\n_.extend(ReactiveDict.prototype, {                                                                                // 44\n  // set() began as a key/value method, but we are now overloading it                                             //\n  // to take an object of key/value pairs, similar to backbone                                                    //\n  // http://backbonejs.org/#Model-set                                                                             //\n                                                                                                                  //\n  set: function set(keyOrObject, value) {                                                                         // 49\n    var self = this;                                                                                              // 50\n                                                                                                                  //\n    if ((typeof keyOrObject === 'undefined' ? 'undefined' : _typeof(keyOrObject)) === 'object' && value === undefined) {\n      // Called as `dict.set({...})`                                                                              //\n      self._setObject(keyOrObject);                                                                               // 54\n      return;                                                                                                     // 55\n    }                                                                                                             // 56\n    // the input isn't an object, so it must be a key                                                             //\n    // and we resume with the rest of the function                                                                //\n    var key = keyOrObject;                                                                                        // 59\n                                                                                                                  //\n    value = stringify(value);                                                                                     // 61\n                                                                                                                  //\n    var keyExisted = _.has(self.keys, key);                                                                       // 63\n    var oldSerializedValue = keyExisted ? self.keys[key] : 'undefined';                                           // 64\n    var isNewValue = value !== oldSerializedValue;                                                                // 65\n                                                                                                                  //\n    self.keys[key] = value;                                                                                       // 67\n                                                                                                                  //\n    if (isNewValue || !keyExisted) {                                                                              // 69\n      self.allDeps.changed();                                                                                     // 70\n    }                                                                                                             // 71\n                                                                                                                  //\n    if (isNewValue) {                                                                                             // 73\n      changed(self.keyDeps[key]);                                                                                 // 74\n      if (self.keyValueDeps[key]) {                                                                               // 75\n        changed(self.keyValueDeps[key][oldSerializedValue]);                                                      // 76\n        changed(self.keyValueDeps[key][value]);                                                                   // 77\n      }                                                                                                           // 78\n    }                                                                                                             // 79\n  },                                                                                                              // 80\n                                                                                                                  //\n  setDefault: function setDefault(key, value) {                                                                   // 82\n    var self = this;                                                                                              // 83\n    if (!_.has(self.keys, key)) {                                                                                 // 84\n      self.set(key, value);                                                                                       // 85\n    }                                                                                                             // 86\n  },                                                                                                              // 87\n                                                                                                                  //\n  get: function get(key) {                                                                                        // 89\n    var self = this;                                                                                              // 90\n    self._ensureKey(key);                                                                                         // 91\n    self.keyDeps[key].depend();                                                                                   // 92\n    return parse(self.keys[key]);                                                                                 // 93\n  },                                                                                                              // 94\n                                                                                                                  //\n  equals: function equals(key, value) {                                                                           // 96\n    var self = this;                                                                                              // 97\n                                                                                                                  //\n    // Mongo.ObjectID is in the 'mongo' package                                                                   //\n    var ObjectID = null;                                                                                          // 100\n    if (Package.mongo) {                                                                                          // 101\n      ObjectID = Package.mongo.Mongo.ObjectID;                                                                    // 102\n    }                                                                                                             // 103\n                                                                                                                  //\n    // We don't allow objects (or arrays that might include objects) for                                          //\n    // .equals, because JSON.stringify doesn't canonicalize object key                                            //\n    // order. (We can make equals have the right return value by parsing the                                      //\n    // current value and using EJSON.equals, but we won't have a canonical                                        //\n    // element of keyValueDeps[key] to store the dependency.) You can still use                                   //\n    // \"EJSON.equals(reactiveDict.get(key), value)\".                                                              //\n    //                                                                                                            //\n    // XXX we could allow arrays as long as we recursively check that there                                       //\n    // are no objects                                                                                             //\n    if (typeof value !== 'string' && typeof value !== 'number' && typeof value !== 'boolean' && typeof value !== 'undefined' && !(value instanceof Date) && !(ObjectID && value instanceof ObjectID) && value !== null) {\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");                                               // 121\n    }                                                                                                             // 122\n    var serializedValue = stringify(value);                                                                       // 123\n                                                                                                                  //\n    if (Tracker.active) {                                                                                         // 125\n      self._ensureKey(key);                                                                                       // 126\n                                                                                                                  //\n      if (!_.has(self.keyValueDeps[key], serializedValue)) self.keyValueDeps[key][serializedValue] = new Tracker.Dependency();\n                                                                                                                  //\n      var isNew = self.keyValueDeps[key][serializedValue].depend();                                               // 131\n      if (isNew) {                                                                                                // 132\n        Tracker.onInvalidate(function () {                                                                        // 133\n          // clean up [key][serializedValue] if it's now empty, so we don't                                       //\n          // use O(n) memory for n = values seen ever                                                             //\n          if (!self.keyValueDeps[key][serializedValue].hasDependents()) delete self.keyValueDeps[key][serializedValue];\n        });                                                                                                       // 138\n      }                                                                                                           // 139\n    }                                                                                                             // 140\n                                                                                                                  //\n    var oldValue = undefined;                                                                                     // 142\n    if (_.has(self.keys, key)) oldValue = parse(self.keys[key]);                                                  // 143\n    return EJSON.equals(oldValue, value);                                                                         // 144\n  },                                                                                                              // 145\n                                                                                                                  //\n  all: function all() {                                                                                           // 147\n    this.allDeps.depend();                                                                                        // 148\n    var ret = {};                                                                                                 // 149\n    _.each(this.keys, function (value, key) {                                                                     // 150\n      ret[key] = parse(value);                                                                                    // 151\n    });                                                                                                           // 152\n    return ret;                                                                                                   // 153\n  },                                                                                                              // 154\n                                                                                                                  //\n  clear: function clear() {                                                                                       // 156\n    var self = this;                                                                                              // 157\n                                                                                                                  //\n    var oldKeys = self.keys;                                                                                      // 159\n    self.keys = {};                                                                                               // 160\n                                                                                                                  //\n    self.allDeps.changed();                                                                                       // 162\n                                                                                                                  //\n    _.each(oldKeys, function (value, key) {                                                                       // 164\n      changed(self.keyDeps[key]);                                                                                 // 165\n      if (self.keyValueDeps[key]) {                                                                               // 166\n        changed(self.keyValueDeps[key][value]);                                                                   // 167\n        changed(self.keyValueDeps[key]['undefined']);                                                             // 168\n      }                                                                                                           // 169\n    });                                                                                                           // 170\n  },                                                                                                              // 172\n                                                                                                                  //\n  'delete': function _delete(key) {                                                                               // 174\n    var self = this;                                                                                              // 175\n    var didRemove = false;                                                                                        // 176\n                                                                                                                  //\n    if (_.has(self.keys, key)) {                                                                                  // 178\n      var oldValue = self.keys[key];                                                                              // 179\n      delete self.keys[key];                                                                                      // 180\n      changed(self.keyDeps[key]);                                                                                 // 181\n      if (self.keyValueDeps[key]) {                                                                               // 182\n        changed(self.keyValueDeps[key][oldValue]);                                                                // 183\n        changed(self.keyValueDeps[key]['undefined']);                                                             // 184\n      }                                                                                                           // 185\n      self.allDeps.changed();                                                                                     // 186\n      didRemove = true;                                                                                           // 187\n    }                                                                                                             // 188\n                                                                                                                  //\n    return didRemove;                                                                                             // 190\n  },                                                                                                              // 191\n                                                                                                                  //\n  _setObject: function _setObject(object) {                                                                       // 193\n    var self = this;                                                                                              // 194\n                                                                                                                  //\n    _.each(object, function (value, key) {                                                                        // 196\n      self.set(key, value);                                                                                       // 197\n    });                                                                                                           // 198\n  },                                                                                                              // 199\n                                                                                                                  //\n  _ensureKey: function _ensureKey(key) {                                                                          // 201\n    var self = this;                                                                                              // 202\n    if (!(key in self.keyDeps)) {                                                                                 // 203\n      self.keyDeps[key] = new Tracker.Dependency();                                                               // 204\n      self.keyValueDeps[key] = {};                                                                                // 205\n    }                                                                                                             // 206\n  },                                                                                                              // 207\n                                                                                                                  //\n  // Get a JSON value that can be passed to the constructor to                                                    //\n  // create a new ReactiveDict with the same contents as this one                                                 //\n  _getMigrationData: function _getMigrationData() {                                                               // 211\n    // XXX sanitize and make sure it's JSONible?                                                                  //\n    return this.keys;                                                                                             // 213\n  }                                                                                                               // 214\n});                                                                                                               // 44\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"migration.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/reactive-dict/migration.js                                                                            //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nReactiveDict._migratedDictData = {}; // name -> data                                                              // 1\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict                                                        // 2\n                                                                                                                  //\nReactiveDict._loadMigratedDict = function (dictName) {                                                            // 4\n  if (_.has(ReactiveDict._migratedDictData, dictName)) return ReactiveDict._migratedDictData[dictName];           // 5\n                                                                                                                  //\n  return null;                                                                                                    // 8\n};                                                                                                                // 9\n                                                                                                                  //\nReactiveDict._registerDictForMigrate = function (dictName, dict) {                                                // 11\n  if (_.has(ReactiveDict._dictsToMigrate, dictName)) throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n                                                                                                                  //\n  ReactiveDict._dictsToMigrate[dictName] = dict;                                                                  // 15\n};                                                                                                                // 16\n                                                                                                                  //\nif (Meteor.isClient && Package.reload) {                                                                          // 18\n  // Put old migrated data into ReactiveDict._migratedDictData,                                                   //\n  // where it can be accessed by ReactiveDict._loadMigratedDict.                                                  //\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');                                      // 21\n  if (migrationData && migrationData.dicts) ReactiveDict._migratedDictData = migrationData.dicts;                 // 22\n                                                                                                                  //\n  // On migration, assemble the data from all the dicts that have been                                            //\n  // registered.                                                                                                  //\n  Package.reload.Reload._onMigrate('reactive-dict', function () {                                                 // 27\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;                                                            // 28\n    var dataToMigrate = {};                                                                                       // 29\n                                                                                                                  //\n    for (var dictName in dictsToMigrate) {                                                                        // 31\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();                                     // 32\n    }return [true, { dicts: dataToMigrate }];                                                                     // 31\n  });                                                                                                             // 35\n}                                                                                                                 // 36\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/reactive-dict/reactive-dict.js\");\nrequire(\"./node_modules/meteor/reactive-dict/migration.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['reactive-dict'] = {}, {\n  ReactiveDict: ReactiveDict\n});\n\n})();\n","servePath":"/packages/reactive-dict.js","sourceMap":{"version":3,"sources":["/packages/reactive-dict/reactive-dict.js","/packages/reactive-dict/migration.js"],"names":[],"mappings":"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","file":"/packages/reactive-dict.js","sourcesContent":["// XXX come up with a serialization method which canonicalizes object key\n// order, which would allow us to use objects as values for equals.\nvar stringify = function (value) {\n  if (value === undefined)\n    return 'undefined';\n  return EJSON.stringify(value);\n};\nvar parse = function (serialized) {\n  if (serialized === undefined || serialized === 'undefined')\n    return undefined;\n  return EJSON.parse(serialized);\n};\n\nvar changed = function (v) {\n  v && v.changed();\n};\n\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName\nReactiveDict = function (dictName) {\n  // this.keys: key -> value\n  if (dictName) {\n    if (typeof dictName === 'string') {\n      // the normal case, argument is a string name.\n      // _registerDictForMigrate will throw an error on duplicate name.\n      ReactiveDict._registerDictForMigrate(dictName, this);\n      this.keys = ReactiveDict._loadMigratedDict(dictName) || {};\n      this.name = dictName;\n    } else if (typeof dictName === 'object') {\n      // back-compat case: dictName is actually migrationData\n      this.keys = dictName;\n    } else {\n      throw new Error(\"Invalid ReactiveDict argument: \" + dictName);\n    }\n  } else {\n    // no name given; no migration will be performed\n    this.keys = {};\n  }\n\n  this.allDeps = new Tracker.Dependency;\n  this.keyDeps = {}; // key -> Dependency\n  this.keyValueDeps = {}; // key -> Dependency\n};\n\n_.extend(ReactiveDict.prototype, {\n  // set() began as a key/value method, but we are now overloading it\n  // to take an object of key/value pairs, similar to backbone\n  // http://backbonejs.org/#Model-set\n\n  set: function (keyOrObject, value) {\n    var self = this;\n\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.set({...})`\n      self._setObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    var key = keyOrObject;\n\n    value = stringify(value);\n\n    var keyExisted = _.has(self.keys, key);\n    var oldSerializedValue = keyExisted ? self.keys[key] : 'undefined';\n    var isNewValue = (value !== oldSerializedValue);\n\n    self.keys[key] = value;\n\n    if (isNewValue || !keyExisted) {\n      self.allDeps.changed();\n    }\n\n    if (isNewValue) {\n      changed(self.keyDeps[key]);\n      if (self.keyValueDeps[key]) {\n        changed(self.keyValueDeps[key][oldSerializedValue]);\n        changed(self.keyValueDeps[key][value]);\n      }\n    }\n  },\n\n  setDefault: function (key, value) {\n    var self = this;\n    if (! _.has(self.keys, key)) {\n      self.set(key, value);\n    }\n  },\n\n  get: function (key) {\n    var self = this;\n    self._ensureKey(key);\n    self.keyDeps[key].depend();\n    return parse(self.keys[key]);\n  },\n\n  equals: function (key, value) {\n    var self = this;\n\n    // Mongo.ObjectID is in the 'mongo' package\n    var ObjectID = null;\n    if (Package.mongo) {\n      ObjectID = Package.mongo.Mongo.ObjectID;\n    }\n\n    // We don't allow objects (or arrays that might include objects) for\n    // .equals, because JSON.stringify doesn't canonicalize object key\n    // order. (We can make equals have the right return value by parsing the\n    // current value and using EJSON.equals, but we won't have a canonical\n    // element of keyValueDeps[key] to store the dependency.) You can still use\n    // \"EJSON.equals(reactiveDict.get(key), value)\".\n    //\n    // XXX we could allow arrays as long as we recursively check that there\n    // are no objects\n    if (typeof value !== 'string' &&\n        typeof value !== 'number' &&\n        typeof value !== 'boolean' &&\n        typeof value !== 'undefined' &&\n        !(value instanceof Date) &&\n        !(ObjectID && value instanceof ObjectID) &&\n        value !== null) {\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");\n    }\n    var serializedValue = stringify(value);\n\n    if (Tracker.active) {\n      self._ensureKey(key);\n\n      if (! _.has(self.keyValueDeps[key], serializedValue))\n        self.keyValueDeps[key][serializedValue] = new Tracker.Dependency;\n\n      var isNew = self.keyValueDeps[key][serializedValue].depend();\n      if (isNew) {\n        Tracker.onInvalidate(function () {\n          // clean up [key][serializedValue] if it's now empty, so we don't\n          // use O(n) memory for n = values seen ever\n          if (! self.keyValueDeps[key][serializedValue].hasDependents())\n            delete self.keyValueDeps[key][serializedValue];\n        });\n      }\n    }\n\n    var oldValue = undefined;\n    if (_.has(self.keys, key)) oldValue = parse(self.keys[key]);\n    return EJSON.equals(oldValue, value);\n  },\n\n  all: function() {\n    this.allDeps.depend();\n    var ret = {};\n    _.each(this.keys, function(value, key) {\n      ret[key] = parse(value);\n    });\n    return ret;\n  },\n\n  clear: function() {\n    var self = this;\n\n    var oldKeys = self.keys;\n    self.keys = {};\n\n    self.allDeps.changed();\n\n    _.each(oldKeys, function(value, key) {\n      changed(self.keyDeps[key]);\n      if (self.keyValueDeps[key]) {\n        changed(self.keyValueDeps[key][value]);\n        changed(self.keyValueDeps[key]['undefined']);\n      }\n    });\n\n  },\n\n  delete: function(key) {\n    var self = this;\n    var didRemove = false;\n\n    if (_.has(self.keys, key)) {\n      var oldValue = self.keys[key];\n      delete self.keys[key];\n      changed(self.keyDeps[key]);\n      if (self.keyValueDeps[key]) {\n        changed(self.keyValueDeps[key][oldValue]);\n        changed(self.keyValueDeps[key]['undefined']);\n      }\n      self.allDeps.changed();\n      didRemove = true;\n    }\n\n    return didRemove;\n  },\n\n  _setObject: function (object) {\n    var self = this;\n\n    _.each(object, function (value, key){\n      self.set(key, value);\n    });\n  },\n\n  _ensureKey: function (key) {\n    var self = this;\n    if (!(key in self.keyDeps)) {\n      self.keyDeps[key] = new Tracker.Dependency;\n      self.keyValueDeps[key] = {};\n    }\n  },\n\n  // Get a JSON value that can be passed to the constructor to\n  // create a new ReactiveDict with the same contents as this one\n  _getMigrationData: function () {\n    // XXX sanitize and make sure it's JSONible?\n    return this.keys;\n  }\n});\n","ReactiveDict._migratedDictData = {}; // name -> data\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict\n\nReactiveDict._loadMigratedDict = function (dictName) {\n  if (_.has(ReactiveDict._migratedDictData, dictName))\n    return ReactiveDict._migratedDictData[dictName];\n\n  return null;\n};\n\nReactiveDict._registerDictForMigrate = function (dictName, dict) {\n  if (_.has(ReactiveDict._dictsToMigrate, dictName))\n    throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n\n  ReactiveDict._dictsToMigrate[dictName] = dict;\n};\n\nif (Meteor.isClient && Package.reload) {\n  // Put old migrated data into ReactiveDict._migratedDictData,\n  // where it can be accessed by ReactiveDict._loadMigratedDict.\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');\n  if (migrationData && migrationData.dicts)\n    ReactiveDict._migratedDictData = migrationData.dicts;\n\n  // On migration, assemble the data from all the dicts that have been\n  // registered.\n  Package.reload.Reload._onMigrate('reactive-dict', function () {\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;\n    var dataToMigrate = {};\n\n    for (var dictName in dictsToMigrate)\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();\n\n    return [true, {dicts: dataToMigrate}];\n  });\n}\n"]}}]