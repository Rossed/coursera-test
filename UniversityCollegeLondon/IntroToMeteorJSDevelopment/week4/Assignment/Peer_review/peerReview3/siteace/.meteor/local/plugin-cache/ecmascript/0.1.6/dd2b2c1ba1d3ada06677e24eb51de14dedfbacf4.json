{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":["create-class","class-call-check"]},"ignored":false,"code":"/**\n * A Cursor represents a pointer to the search results. Since it's specific\n * to EasySearch it can also be used to check for valid return values.\n *\n * @type {Cursor}\n */\nCursor = (function () {\n  /**\n   * Constructor\n   *\n   * @param {Mongo.Cursor} mongoCursor   Referenced mongo cursor\n   * @param {Number}       count         Count of all documents found\n   * @param {Boolean}      isReady       Cursor is ready\n   * @param {Object}       publishHandle Publish handle to stop if on client\n   *\n   * @constructor\n   *\n   */\n\n  function Cursor(mongoCursor, count) {\n    var isReady = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];\n    var publishHandle = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];\n    babelHelpers.classCallCheck(this, Cursor);\n\n    check(mongoCursor.fetch, Function);\n    check(count, Number);\n    check(isReady, Match.Optional(Boolean));\n    check(publishHandle, Match.OneOf(null, Object));\n\n    this._mongoCursor = mongoCursor;\n    this._count = count;\n    this._isReady = isReady;\n    this._publishHandle = publishHandle;\n  }\n\n  /**\n   * Fetch the search results.\n   *\n   * @returns {[Object]}\n   */\n\n  Cursor.prototype.fetch = (function () {\n    function fetch() {\n      return this._mongoCursor.fetch();\n    }\n\n    return fetch;\n  })();\n\n  /**\n   * Stop the subscription handle associated with the cursor.\n   */\n\n  Cursor.prototype.stop = (function () {\n    function stop() {\n      if (this._publishHandle) {\n        return this._publishHandle.stop();\n      }\n    }\n\n    return stop;\n  })();\n\n  /**\n   * Return count of all documents found\n   *\n   * @returns {Number}\n   */\n\n  Cursor.prototype.count = (function () {\n    function count() {\n      return this._count;\n    }\n\n    return count;\n  })();\n\n  /**\n   * Return if the cursor is ready.\n   *\n   * @returns {Boolean}\n   */\n\n  Cursor.prototype.isReady = (function () {\n    function isReady() {\n      return this._isReady;\n    }\n\n    return isReady;\n  })();\n\n  /**\n   * Return the raw mongo cursor.\n   *\n   * @returns {Mongo.Cursor}\n   */\n  babelHelpers.createClass(Cursor, [{\n    key: \"mongoCursor\",\n    get: function () {\n      return this._mongoCursor;\n    }\n\n    /**\n     * Return a fake empty cursor, without data.\n     *\n     * @returns {Object}\n     */\n  }], [{\n    key: \"emptyCursor\",\n    get: function () {\n      return { fetch: function () {\n          return [];\n        }, observe: function () {\n          return { stop: function () {\n              return null;\n            } };\n        }, stop: function () {} };\n    }\n  }]);\n  return Cursor;\n})();","ast":null,"map":{"version":3,"sources":["/lib/core/cursor.js"],"names":[],"mappings":";;;;;;AAMA,MAAM;;;;;;;;;;;;;AAYO,WAZE,MAAM,CAYP,WAAW,EAAE,KAAK,EAAwC;QAAtC,OAAO,yDAAG,IAAI;QAAE,aAAa,yDAAG,IAAI;sCAZvD,MAAM;;AAajB,SAAK,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;AACnC,SAAK,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AACrB,SAAK,CAAC,OAAO,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;AACxC,SAAK,CAAC,aAAa,EAAE,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;;AAEhD,QAAI,CAAC,YAAY,GAAG,WAAW,CAAC;AAChC,QAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AACpB,QAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;AACxB,QAAI,CAAC,cAAc,GAAG,aAAa,CAAC;GACrC;;;;;;;;AAtBY,QAAM,WA6BnB,KAAK;AAAA,qBAAG;AACN,aAAO,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;KAClC;;;;;;;;;AA/BY,QAAM,WAoCnB,IAAI;AAAA,oBAAG;AACL,UAAI,IAAI,CAAC,cAAc,EAAE;AACvB,eAAO,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;OACnC;KACF;;;;;;;;;;;AAxCY,QAAM,WA+CnB,KAAK;AAAA,qBAAG;AACN,aAAO,IAAI,CAAC,MAAM,CAAC;KACpB;;;;;;;;;;;AAjDY,QAAM,WAwDnB,OAAO;AAAA,uBAAG;AACR,aAAO,IAAI,CAAC,QAAQ,CAAC;KACtB;;;;;;;;;;2BA1DY,MAAM;;SAiEJ,YAAG;AAChB,aAAO,IAAI,CAAC,YAAY,CAAC;KAC1B;;;;;;;;;SAOqB,YAAG;AACvB,aAAO,EAAE,KAAK,EAAE;iBAAM,EAAE;SAAA,EAAE,OAAO,EAAE,YAAM;AAAE,iBAAO,EAAE,IAAI,EAAE;qBAAM,IAAI;aAAA,EAAE,CAAC;SAAE,EAAE,IAAI,EAAE,YAAM,EAAE,EAAE,CAAC;KAC7F;;SA5EY,MAAM;IA6EpB,CAAC","file":"/lib/core/cursor.js.map","sourcesContent":["/**\n * A Cursor represents a pointer to the search results. Since it's specific\n * to EasySearch it can also be used to check for valid return values.\n *\n * @type {Cursor}\n */\nCursor = class Cursor {\n  /**\n   * Constructor\n   *\n   * @param {Mongo.Cursor} mongoCursor   Referenced mongo cursor\n   * @param {Number}       count         Count of all documents found\n   * @param {Boolean}      isReady       Cursor is ready\n   * @param {Object}       publishHandle Publish handle to stop if on client\n   *\n   * @constructor\n   *\n   */\n  constructor(mongoCursor, count, isReady = true, publishHandle = null) {\n    check(mongoCursor.fetch, Function);\n    check(count, Number);\n    check(isReady, Match.Optional(Boolean));\n    check(publishHandle, Match.OneOf(null, Object));\n\n    this._mongoCursor = mongoCursor;\n    this._count = count;\n    this._isReady = isReady;\n    this._publishHandle = publishHandle;\n  }\n\n  /**\n   * Fetch the search results.\n   *\n   * @returns {[Object]}\n   */\n  fetch() {\n    return this._mongoCursor.fetch();\n  }\n\n /**\n  * Stop the subscription handle associated with the cursor.\n  */\n  stop() {\n    if (this._publishHandle) {\n      return this._publishHandle.stop();\n    }\n  }\n\n  /**\n   * Return count of all documents found\n   *\n   * @returns {Number}\n   */\n  count() {\n    return this._count;\n  }\n\n  /**\n   * Return if the cursor is ready.\n   *\n   * @returns {Boolean}\n   */\n  isReady() {\n    return this._isReady;\n  }\n\n  /**\n   * Return the raw mongo cursor.\n   *\n   * @returns {Mongo.Cursor}\n   */\n  get mongoCursor() {\n    return this._mongoCursor;\n  }\n\n  /**\n   * Return a fake empty cursor, without data.\n   *\n   * @returns {Object}\n   */\n  static get emptyCursor() {\n    return { fetch: () => [], observe: () => { return { stop: () => null }; }, stop: () => {} };\n  }\n};\n"]},"hash":"dd2b2c1ba1d3ada06677e24eb51de14dedfbacf4"}
