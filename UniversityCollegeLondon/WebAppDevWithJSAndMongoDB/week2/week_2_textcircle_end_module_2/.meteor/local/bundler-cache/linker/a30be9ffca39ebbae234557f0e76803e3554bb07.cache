[{"type":"js","data":"/* Imports for global scope */\n\naccountsUIBootstrap3 = Package['ian:accounts-ui-bootstrap-3'].accountsUIBootstrap3;\nMongo = Package.mongo.Mongo;\nSession = Package.session.Session;\n$ = Package.jquery.$;\njQuery = Package.jquery.jQuery;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nLog = Package.logging.Log;\nReload = Package.reload.Reload;\nRandom = Package.random.Random;\nEJSON = Package.ejson.EJSON;\nSpacebars = Package.spacebars.Spacebars;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nShareJSConnector = Package['mizzao:sharejs'].ShareJSConnector;\nAccounts = Package['accounts-base'].Accounts;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nTemplate = Package.templating.Template;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"(function(){\nTemplate.body.addContent((function() {\n  var view = this;\n  return [ HTML.NAV({\n    \"class\": \"navbar navbar-default navbar-fixed-top\"\n  }, \"\\n  \t\t\", HTML.DIV({\n    \"class\": \"container\"\n  }, \"\\n    \t\t\", HTML.Raw('<a class=\"navbar-brand\" href=\"#\">TextCircle</a>'), \"\\n        \", HTML.P({\n    \"class\": \"navbar-text navbar-right\"\n  }, \"\\n          \", Blaze._TemplateWith(function() {\n    return {\n      align: Spacebars.call(\"right\")\n    };\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"loginButtons\"));\n  }), \"\\n        \"), \"\\n  \t\t\"), \" \", HTML.Raw(\"<!-- / nav container -->\"), \"\\n\t\"), \" \\n\t\", HTML.DIV({\n    \"class\": \"container top-margin\"\n  }, \"\\n\\n \", HTML.DIV({\n    \"class\": \"row\"\n  }, \"\\n      \", HTML.DIV({\n    \"class\": \"col-md-12\"\n  }, \"\\n          \", Spacebars.include(view.lookupTemplate(\"editingUsers\")), \"\\n      \"), \"\\n    \"), \"\\n\\n    \", HTML.DIV({\n    \"class\": \"row\"\n  }, \"\\n      \", HTML.DIV({\n    \"class\": \"col-md-6\"\n  }, \"\\n          \", Spacebars.include(view.lookupTemplate(\"editor\")), \"\\n      \"), \"\\n      \", HTML.DIV({\n    \"class\": \"col-md-6\"\n  }, \"\\n        \", Spacebars.include(view.lookupTemplate(\"viewer\")), \"\\n      \"), \"\\n    \"), \"\\n\t\") ];\n}));\nMeteor.startup(Template.body.renderToDocument);\n\nTemplate.__checkName(\"editor\");\nTemplate[\"editor\"] = new Template(\"Template.editor\", (function() {\n  var view = this;\n  return Blaze._TemplateWith(function() {\n    return {\n      docid: Spacebars.call(view.lookup(\"docid\")),\n      onRender: Spacebars.call(view.lookup(\"config\")),\n      id: Spacebars.call(\"editor\"),\n      mode: Spacebars.call(\"javascript\")\n    };\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"sharejsCM\"));\n  });\n}));\n\nTemplate.__checkName(\"viewer\");\nTemplate[\"viewer\"] = new Template(\"Template.viewer\", (function() {\n  var view = this;\n  return HTML.Raw('<iframe id=\"viewer_iframe\">\\n  </iframe>');\n}));\n\nTemplate.__checkName(\"editingUsers\");\nTemplate[\"editingUsers\"] = new Template(\"Template.editingUsers\", (function() {\n  var view = this;\n  return [ \"Editors:\\n  \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"users\"));\n  }, function() {\n    return [ \"\\n  \", HTML.SPAN({\n      \"class\": \"label label-success\"\n    }, Blaze.View(\"lookup:firstname\", function() {\n      return Spacebars.mustache(view.lookup(\"firstname\"));\n    }), \" \"), \"\\n   \\n  \" ];\n  }) ];\n}));\n\n}).call(this);\n","servePath":"/template.textcircle.js","sourceMap":null},{"type":"js","data":"(function(){\n\n// configure the special accounts user interface\n// by setting up some extra fields and specifying constraints\n// see:https://github.com/ianmartorell/meteor-accounts-ui-bootstrap-3/    \nAccounts.ui.config({\n    requestPermissions: {},\n    extraSignupFields: [{\n        fieldName: 'first-name',\n        fieldLabel: 'First name',\n        inputType: 'text',\n        visible: true,\n        validate: function(value, errorFunction) {\n          if (!value) {\n            errorFunction(\"Please write your first name\");\n            return false;\n          } else {\n            return true;\n          }\n        }\n    }, {\n        fieldName: 'last-name',\n        fieldLabel: 'Last name',\n        inputType: 'text',\n        visible: true,\n    }, {\n        fieldName: 'gender',\n        showFieldLabel: false,      // If true, fieldLabel will be shown before radio group\n        fieldLabel: 'Gender',\n        inputType: 'radio',\n        radioLayout: 'vertical',    // It can be 'inline' or 'vertical'\n        data: [{                    // Array of radio options, all properties are required\n            id: 1,                  // id suffix of the radio element\n            label: 'Male',          // label for the radio element\n            value: 'm'              // value of the radio element, this will be saved.\n          }, {\n            id: 2,\n            label: 'Female',\n            value: 'f',\n            checked: 'checked'\n        }],\n        visible: true\n    }, {\n        fieldName: 'country',\n        fieldLabel: 'Country',\n        inputType: 'select',\n        showFieldLabel: true,\n        empty: 'Please select your country of residence',\n        data: [{\n            id: 1,\n            label: 'United States',\n            value: 'us'\n          }, {\n            id: 2,\n            label: 'Spain',\n            value: 'es',\n        }],\n        visible: true\n    }, {\n        fieldName: 'terms',\n        fieldLabel: 'I accept the terms and conditions <a href=\"\">See t and x...</a>',\n        inputType: 'checkbox',\n        visible: true,\n        saveToProfile: false,\n        validate: function(value, errorFunction) {\n            if (value) {\n                return true;\n            } else {\n                errorFunction('You must accept the terms and conditions.');\n                return false;\n            }\n        }\n    }]\n});\n\n\n}).call(this);\n","servePath":"/client/accounts.js","sourceMap":null},{"type":"js","data":"(function(){// this collection stores all the documents \nthis.Documents = new Mongo.Collection(\"documents\");\n// this collection stores sets of users that are editing documents\nEditingUsers = new Mongo.Collection(\"editingUsers\");\n\nif (Meteor.isClient) {\n  // return the id of the first document you can find\n  Template.editor.helpers({\n    docid:function(){\n      var doc = Documents.findOne();\n      if (doc){\n        return doc._id;\n      }\n      else {\n        return undefined;\n      }\n    }, \n    // configure the CodeMirror editor\n    config:function(){\n      return function(editor){\n        editor.setOption(\"lineNumbers\", true);\n        editor.setOption(\"theme\", \"cobalt\");\n        // set a callback that gets triggered whenever the user\n        // makes a change in the code editing window\n        editor.on(\"change\", function(cm_editor, info){\n          // send the current code over to the iframe for rendering\n          $(\"#viewer_iframe\").contents().find(\"html\").html(cm_editor.getValue());\n          Meteor.call(\"addEditingUser\");\n        });        \n      }\n    }, \n  });\n\n  Template.editingUsers.helpers({\n    // retrieve a set of users that are editing this document\n    users:function(){\n      var doc, eusers, users;\n      doc = Documents.findOne();\n      if (!doc){return;}// give up\n      eusers = EditingUsers.findOne({docid:doc._id});\n      if (!eusers){return;}// give up\n      users = new Array();\n      var i = 0;\n      for (var user_id in eusers.users){\n          users[i] = fixObjectKeys(eusers.users[user_id]);\n          i++;\n      }\n      return users;\n    }\n  })\n \n}// end isClient...\n\nif (Meteor.isServer) {\n  Meteor.startup(function () {\n    // insert a document if there isn't one already\n    if (!Documents.findOne()){// no documents yet!\n        Documents.insert({title:\"my new document\"});\n    }\n  });\n}\n// methods that provide write access to the data\nMeteor.methods({\n  // allows changes to the editing users collection \n  addEditingUser:function(){\n    var doc, user, eusers;\n    doc = Documents.findOne();\n    if (!doc){return;}// no doc give up\n    if (!this.userId){return;}// no logged in user give up\n    // now I have a doc and possibly a user\n    user = Meteor.user().profile;\n    eusers = EditingUsers.findOne({docid:doc._id});\n    if (!eusers){// no editing users have been stored yet\n      eusers = {\n        docid:doc._id, \n        users:{}, \n      };\n    }\n    user.lastEdit = new Date();\n    eusers.users[this.userId] = user;\n    // upsert- insert or update if filter matches\n    EditingUsers.upsert({_id:eusers._id}, eusers);\n  }\n})\n\n// this renames object keys by removing hyphens to make the compatible \n// with spacebars. \nfunction fixObjectKeys(obj){\n  var newObj = {};\n  for (key in obj){\n    var key2 = key.replace(\"-\", \"\");\n    newObj[key2] = obj[key];\n  }\n  return newObj;\n}\n\n  \n\n\n\n\n\n}).call(this);\n","servePath":"/textcircle.js","sourceMap":null}]