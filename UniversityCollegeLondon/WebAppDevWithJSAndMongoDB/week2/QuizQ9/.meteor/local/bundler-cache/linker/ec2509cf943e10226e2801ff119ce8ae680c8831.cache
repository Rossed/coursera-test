[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar RoutePolicy = Package.routepolicy.RoutePolicy;\nvar WebApp = Package.webapp.WebApp;\nvar main = Package.webapp.main;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\n\n/* Package-scope variables */\nvar ref;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"mizzao:sharejs\":{\"sharejs-server.js\":[\"meteor/meteor\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/mizzao_sharejs/sharejs-server.js                                                                     //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nmodule.export({ShareJS:function(){return ShareJS}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});// Creates a (persistent) ShareJS server\n// Based on https://github.com/share/ShareJS/wiki/Getting-started                                                //\n                                                                                                                 //\n                                                                                                                 // 4\n                                                                                                                 //\nvar Future = Npm.require('fibers/future');                                                                       // 6\n                                                                                                                 //\nvar ShareJS = ShareJS || {};                                                                                     // 8\n// See docs for options. Uses mongo by default to enable persistence.                                            //\n                                                                                                                 //\n// Using special options from https://github.com/share/ShareJS/blob/master/src/server/index.coffee               //\nvar options = _.extend({                                                                                         // 12\n    staticPath: null,                                                                                            // 13\n    db: {                                                                                                        // 14\n        type: 'mongo', // Default option is Mongo because Meteor provides it                                     // 15\n        opsCollectionPerDoc: false // A doc/op indexed collection keeps the namespace cleaner in a Meteor app.   // 16\n    }                                                                                                            // 14\n}, (ref = Meteor.settings.sharejs) != null ? ref.options : void 0);                                              // 12\n                                                                                                                 //\nswitch (options.db.type) {                                                                                       // 20\n    case 'mongo':                                                                                                // 21\n                                                                                                                 //\n        /*                                                                                                       //\n         ShareJS 0.6.3 mongo driver:                                                                             //\n         https://github.com/share/ShareJS/blob/v0.6.3/src/server/db/mongo.coffee                                 //\n         It will create its own indices on the 'ops' collection.                                                 //\n         */                                                                                                      //\n        options.db.client = MongoInternals.defaultRemoteCollectionDriver().mongo.db;                             // 28\n        /* Disable the open command due to the bug introduced in ShareJS 0.6.3                                   //\n         where an open database connection is not accepted                                                       //\n         https://github.com/share/ShareJS/commit/f98a4adeca396df3ec6b1d838b965ff158f452a3                        //\n          Meteor has already opened the database connection, so this should work,                                //\n         but watch monkey-patch carefully with changes in how                                                    //\n         https://github.com/meteor/meteor/blob/devel/packages/mongo-livedata/mongo_driver.js                     //\n         uses the API at                                                                                         //\n         http://mongodb.github.io/node-mongodb-native/api-generated/mongoclient.html                             //\n         */                                                                                                      //\n        options.db.client.open = function () {};                                                                 // 39\n        break;                                                                                                   // 40\n    default:                                                                                                     // 41\n        Meteor._debug(\"ShareJS: using unsupported db type \" + options.db.type + \", falling back to in-memory.\");\n}                                                                                                                // 20\n//Declare the path that ShareJS uses to Meteor                                                                   //\nRoutePolicy.declare('/channel/', 'network');                                                                     // 45\n// Attach the sharejs REST and bcsocket interfaces as middleware to the meteor connect server                    //\nNpm.require('share').server.attach(WebApp.connectHandlers, options);                                             // 47\n                                                                                                                 //\n/*                                                                                                               //\n ShareJS attaches the server API to a weird place. Oh well...                                                    //\n https://github.com/share/ShareJS/blob/v0.6.2/src/server/index.coffee                                            //\n */                                                                                                              //\n                                                                                                                 //\nShareJS.model = WebApp.connectHandlers.model;                                                                    // 55\n// A convenience function for creating a document on the server.                                                 //\nShareJS.initializeDoc = function (docName, content) {                                                            // 57\n    return ShareJS.model.create(docName, 'text', {}, function (err) {                                            // 58\n        var opData;                                                                                              // 59\n        if (err) {                                                                                               // 60\n            console.log(err);                                                                                    // 61\n            return;                                                                                              // 62\n        }                                                                                                        // 63\n        //One op; insert all the content at position 0                                                           //\n        //https://github.com/share/ShareJS/wiki/Server-api                                                       //\n        opData = {                                                                                               // 66\n            op: [{ i: content, p: 0 }],                                                                          // 67\n            v: 0,                                                                                                // 68\n            meta: {}                                                                                             // 69\n        };                                                                                                       // 66\n        return ShareJS.model.applyOp(docName, opData, function (err, res) {                                      // 71\n            if (err) {                                                                                           // 72\n                return console.log(err);                                                                         // 73\n            }                                                                                                    // 74\n        });                                                                                                      // 75\n    });                                                                                                          // 76\n};                                                                                                               // 77\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}}},{\"extensions\":[\".js\",\".json\"]});\nvar exports = require(\"./node_modules/meteor/mizzao:sharejs/sharejs-server.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['mizzao:sharejs'] = exports;\n\n})();\n","servePath":"/packages/mizzao_sharejs.js","sourceMap":{"version":3,"sources":["/packages/mizzao:sharejs/sharejs-server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,SAAS,MAAT,QAAuB,eAAvB;;AAEA,IAAM,SAAS,IAAI,OAAJ,CAAY,eAAZ,CAAf;;AAEA,OAAO,IAAM,UAAU,WAAW,EAA3B;;;;AAIP,IAAM,UAAU,EAAE,MAAF,CAAS;AACrB,gBAAY,IADS;AAErB,QAAI;AACA,cAAM,OADN,E;AAEA,6BAAqB,K;AAFrB;AAFiB,CAAT,EAMb,CAAC,MAAM,OAAO,QAAP,CAAgB,OAAvB,KAAmC,IAAnC,GAA0C,IAAI,OAA9C,GAAwD,KAAK,CANhD,CAAhB;;AAQA,QAAQ,QAAQ,EAAR,CAAW,IAAnB;AACI,SAAK,OAAL;;;;;;;AAOI,gBAAQ,EAAR,CAAW,MAAX,GAAoB,eAAe,6BAAf,GAA+C,KAA/C,CAAqD,EAAzE;;;;;;;;;;AAWA,gBAAQ,EAAR,CAAW,MAAX,CAAkB,IAAlB,GAAyB,YAAW,CAAE,CAAtC;AACA;AACJ;AACI,eAAO,MAAP,CAAc,wCAAwC,QAAQ,EAAR,CAAW,IAAnD,GAA0D,8BAAxE;AAtBR;;AAyBA,YAAY,OAAZ,CAAoB,WAApB,EAAiC,SAAjC;;AAEA,IAAI,OAAJ,CAAY,OAAZ,EAAqB,MAArB,CAA4B,MAA5B,CAAmC,OAAO,eAA1C,EAA2D,OAA3D;;;;;;;AAQA,QAAQ,KAAR,GAAgB,OAAO,eAAP,CAAuB,KAAvC;;AAEA,QAAQ,aAAR,GAAwB,UAAS,OAAT,EAAkB,OAAlB,EAA2B;AAC/C,WAAO,QAAQ,KAAR,CAAc,MAAd,CAAqB,OAArB,EAA8B,MAA9B,EAAsC,EAAtC,EAA0C,UAAS,GAAT,EAAc;AAC3D,YAAI,MAAJ;AACA,YAAI,GAAJ,EAAS;AACL,oBAAQ,GAAR,CAAY,GAAZ;AACA;AACH;;;AAGD,iBAAS;AACL,gBAAI,CAAC,EAAE,GAAG,OAAL,EAAc,GAAG,CAAjB,EAAD,CADC;AAEL,eAAG,CAFE;AAGL,kBAAM;AAHD,SAAT;AAKA,eAAO,QAAQ,KAAR,CAAc,OAAd,CAAsB,OAAtB,EAA+B,MAA/B,EAAuC,UAAS,GAAT,EAAc,GAAd,EAAmB;AAC7D,gBAAI,GAAJ,EAAS;AACL,uBAAO,QAAQ,GAAR,CAAY,GAAZ,CAAP;AACH;AACJ,SAJM,CAAP;AAKH,KAlBM,CAAP;AAmBH,CApBD,qH","file":"/packages/mizzao_sharejs.js","sourcesContent":["// Creates a (persistent) ShareJS server\n// Based on https://github.com/share/ShareJS/wiki/Getting-started\n\nimport { Meteor } from 'meteor/meteor';\n\nconst Future = Npm.require('fibers/future');\n\nexport const ShareJS = ShareJS || {};\n// See docs for options. Uses mongo by default to enable persistence.\n\n// Using special options from https://github.com/share/ShareJS/blob/master/src/server/index.coffee\nconst options = _.extend({\n    staticPath: null,\n    db: {\n        type: 'mongo', // Default option is Mongo because Meteor provides it\n        opsCollectionPerDoc: false // A doc/op indexed collection keeps the namespace cleaner in a Meteor app.\n    }\n}, (ref = Meteor.settings.sharejs) != null ? ref.options : void 0);\n\nswitch (options.db.type) {\n    case 'mongo':\n\n        /*\n         ShareJS 0.6.3 mongo driver:\n         https://github.com/share/ShareJS/blob/v0.6.3/src/server/db/mongo.coffee\n         It will create its own indices on the 'ops' collection.\n         */\n        options.db.client = MongoInternals.defaultRemoteCollectionDriver().mongo.db;\n        /* Disable the open command due to the bug introduced in ShareJS 0.6.3\n         where an open database connection is not accepted\n         https://github.com/share/ShareJS/commit/f98a4adeca396df3ec6b1d838b965ff158f452a3\n\n         Meteor has already opened the database connection, so this should work,\n         but watch monkey-patch carefully with changes in how\n         https://github.com/meteor/meteor/blob/devel/packages/mongo-livedata/mongo_driver.js\n         uses the API at\n         http://mongodb.github.io/node-mongodb-native/api-generated/mongoclient.html\n         */\n        options.db.client.open = function() {};\n        break;\n    default:\n        Meteor._debug(\"ShareJS: using unsupported db type \" + options.db.type + \", falling back to in-memory.\");\n}\n//Declare the path that ShareJS uses to Meteor\nRoutePolicy.declare('/channel/', 'network');\n// Attach the sharejs REST and bcsocket interfaces as middleware to the meteor connect server\nNpm.require('share').server.attach(WebApp.connectHandlers, options);\n\n\n/*\n ShareJS attaches the server API to a weird place. Oh well...\n https://github.com/share/ShareJS/blob/v0.6.2/src/server/index.coffee\n */\n\nShareJS.model = WebApp.connectHandlers.model;\n// A convenience function for creating a document on the server.\nShareJS.initializeDoc = function(docName, content) {\n    return ShareJS.model.create(docName, 'text', {}, function(err) {\n        var opData;\n        if (err) {\n            console.log(err);\n            return;\n        }\n        //One op; insert all the content at position 0\n        //https://github.com/share/ShareJS/wiki/Server-api\n        opData = {\n            op: [{ i: content, p: 0 }],\n            v: 0,\n            meta: {}\n        };\n        return ShareJS.model.applyOp(docName, opData, function(err, res) {\n            if (err) {\n                return console.log(err);\n            }\n        });\n    });\n};\n\n"]}}]