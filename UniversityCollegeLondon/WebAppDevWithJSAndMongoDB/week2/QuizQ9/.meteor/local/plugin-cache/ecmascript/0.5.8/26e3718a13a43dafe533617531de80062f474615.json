{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]}],"exports":{"exported":["ShareJS"],"specifiers":[{"kind":"local","local":"ShareJS","exported":"ShareJS"}]}}},"options":{"filename":"/packages/mizzao:sharejs/sharejs-server.js","filenameRelative":"/packages/mizzao:sharejs/sharejs-server.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mizzao:sharejs/sharejs-server.js.map","sourceFileName":"/packages/mizzao:sharejs/sharejs-server.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"sharejs-server"},"ignored":false,"code":"module.export({ShareJS:function(){return ShareJS}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});// Creates a (persistent) ShareJS server\n// Based on https://github.com/share/ShareJS/wiki/Getting-started\n\n\n\nvar Future = Npm.require('fibers/future');\n\nvar ShareJS = ShareJS || {};\n// See docs for options. Uses mongo by default to enable persistence.\n\n// Using special options from https://github.com/share/ShareJS/blob/master/src/server/index.coffee\nvar options = _.extend({\n    staticPath: null,\n    db: {\n        type: 'mongo', // Default option is Mongo because Meteor provides it\n        opsCollectionPerDoc: false // A doc/op indexed collection keeps the namespace cleaner in a Meteor app.\n    }\n}, (ref = Meteor.settings.sharejs) != null ? ref.options : void 0);\n\nswitch (options.db.type) {\n    case 'mongo':\n\n        /*\n         ShareJS 0.6.3 mongo driver:\n         https://github.com/share/ShareJS/blob/v0.6.3/src/server/db/mongo.coffee\n         It will create its own indices on the 'ops' collection.\n         */\n        options.db.client = MongoInternals.defaultRemoteCollectionDriver().mongo.db;\n        /* Disable the open command due to the bug introduced in ShareJS 0.6.3\n         where an open database connection is not accepted\n         https://github.com/share/ShareJS/commit/f98a4adeca396df3ec6b1d838b965ff158f452a3\n          Meteor has already opened the database connection, so this should work,\n         but watch monkey-patch carefully with changes in how\n         https://github.com/meteor/meteor/blob/devel/packages/mongo-livedata/mongo_driver.js\n         uses the API at\n         http://mongodb.github.io/node-mongodb-native/api-generated/mongoclient.html\n         */\n        options.db.client.open = function () {};\n        break;\n    default:\n        Meteor._debug(\"ShareJS: using unsupported db type \" + options.db.type + \", falling back to in-memory.\");\n}\n//Declare the path that ShareJS uses to Meteor\nRoutePolicy.declare('/channel/', 'network');\n// Attach the sharejs REST and bcsocket interfaces as middleware to the meteor connect server\nNpm.require('share').server.attach(WebApp.connectHandlers, options);\n\n/*\n ShareJS attaches the server API to a weird place. Oh well...\n https://github.com/share/ShareJS/blob/v0.6.2/src/server/index.coffee\n */\n\nShareJS.model = WebApp.connectHandlers.model;\n// A convenience function for creating a document on the server.\nShareJS.initializeDoc = function (docName, content) {\n    return ShareJS.model.create(docName, 'text', {}, function (err) {\n        var opData;\n        if (err) {\n            console.log(err);\n            return;\n        }\n        //One op; insert all the content at position 0\n        //https://github.com/share/ShareJS/wiki/Server-api\n        opData = {\n            op: [{ i: content, p: 0 }],\n            v: 0,\n            meta: {}\n        };\n        return ShareJS.model.applyOp(docName, opData, function (err, res) {\n            if (err) {\n                return console.log(err);\n            }\n        });\n    });\n};","ast":null,"map":{"version":3,"sources":["/packages/mizzao:sharejs/sharejs-server.js"],"names":[],"mappings":";;;AAGA,SAAS,MAAT,QAAuB,eAAvB;;AAEA,IAAM,SAAS,IAAI,OAAJ,CAAY,eAAZ,CAAf;;AAEA,OAAO,IAAM,UAAU,WAAW,EAA3B;;;;AAIP,IAAM,UAAU,EAAE,MAAF,CAAS;AACrB,gBAAY,IADS;AAErB,QAAI;AACA,cAAM,OADN,E;AAEA,6BAAqB,K;AAFrB;AAFiB,CAAT,EAMb,CAAC,MAAM,OAAO,QAAP,CAAgB,OAAvB,KAAmC,IAAnC,GAA0C,IAAI,OAA9C,GAAwD,KAAK,CANhD,CAAhB;;AAQA,QAAQ,QAAQ,EAAR,CAAW,IAAnB;AACI,SAAK,OAAL;;;;;;;AAOI,gBAAQ,EAAR,CAAW,MAAX,GAAoB,eAAe,6BAAf,GAA+C,KAA/C,CAAqD,EAAzE;;;;;;;;;;AAWA,gBAAQ,EAAR,CAAW,MAAX,CAAkB,IAAlB,GAAyB,YAAW,CAAE,CAAtC;AACA;AACJ;AACI,eAAO,MAAP,CAAc,wCAAwC,QAAQ,EAAR,CAAW,IAAnD,GAA0D,8BAAxE;AAtBR;;AAyBA,YAAY,OAAZ,CAAoB,WAApB,EAAiC,SAAjC;;AAEA,IAAI,OAAJ,CAAY,OAAZ,EAAqB,MAArB,CAA4B,MAA5B,CAAmC,OAAO,eAA1C,EAA2D,OAA3D;;;;;;;AAQA,QAAQ,KAAR,GAAgB,OAAO,eAAP,CAAuB,KAAvC;;AAEA,QAAQ,aAAR,GAAwB,UAAS,OAAT,EAAkB,OAAlB,EAA2B;AAC/C,WAAO,QAAQ,KAAR,CAAc,MAAd,CAAqB,OAArB,EAA8B,MAA9B,EAAsC,EAAtC,EAA0C,UAAS,GAAT,EAAc;AAC3D,YAAI,MAAJ;AACA,YAAI,GAAJ,EAAS;AACL,oBAAQ,GAAR,CAAY,GAAZ;AACA;AACH;;;AAGD,iBAAS;AACL,gBAAI,CAAC,EAAE,GAAG,OAAL,EAAc,GAAG,CAAjB,EAAD,CADC;AAEL,eAAG,CAFE;AAGL,kBAAM;AAHD,SAAT;AAKA,eAAO,QAAQ,KAAR,CAAc,OAAd,CAAsB,OAAtB,EAA+B,MAA/B,EAAuC,UAAS,GAAT,EAAc,GAAd,EAAmB;AAC7D,gBAAI,GAAJ,EAAS;AACL,uBAAO,QAAQ,GAAR,CAAY,GAAZ,CAAP;AACH;AACJ,SAJM,CAAP;AAKH,KAlBM,CAAP;AAmBH,CApBD","file":"/packages/mizzao:sharejs/sharejs-server.js.map","sourcesContent":["// Creates a (persistent) ShareJS server\n// Based on https://github.com/share/ShareJS/wiki/Getting-started\n\nimport { Meteor } from 'meteor/meteor';\n\nconst Future = Npm.require('fibers/future');\n\nexport const ShareJS = ShareJS || {};\n// See docs for options. Uses mongo by default to enable persistence.\n\n// Using special options from https://github.com/share/ShareJS/blob/master/src/server/index.coffee\nconst options = _.extend({\n    staticPath: null,\n    db: {\n        type: 'mongo', // Default option is Mongo because Meteor provides it\n        opsCollectionPerDoc: false // A doc/op indexed collection keeps the namespace cleaner in a Meteor app.\n    }\n}, (ref = Meteor.settings.sharejs) != null ? ref.options : void 0);\n\nswitch (options.db.type) {\n    case 'mongo':\n\n        /*\n         ShareJS 0.6.3 mongo driver:\n         https://github.com/share/ShareJS/blob/v0.6.3/src/server/db/mongo.coffee\n         It will create its own indices on the 'ops' collection.\n         */\n        options.db.client = MongoInternals.defaultRemoteCollectionDriver().mongo.db;\n        /* Disable the open command due to the bug introduced in ShareJS 0.6.3\n         where an open database connection is not accepted\n         https://github.com/share/ShareJS/commit/f98a4adeca396df3ec6b1d838b965ff158f452a3\n\n         Meteor has already opened the database connection, so this should work,\n         but watch monkey-patch carefully with changes in how\n         https://github.com/meteor/meteor/blob/devel/packages/mongo-livedata/mongo_driver.js\n         uses the API at\n         http://mongodb.github.io/node-mongodb-native/api-generated/mongoclient.html\n         */\n        options.db.client.open = function() {};\n        break;\n    default:\n        Meteor._debug(\"ShareJS: using unsupported db type \" + options.db.type + \", falling back to in-memory.\");\n}\n//Declare the path that ShareJS uses to Meteor\nRoutePolicy.declare('/channel/', 'network');\n// Attach the sharejs REST and bcsocket interfaces as middleware to the meteor connect server\nNpm.require('share').server.attach(WebApp.connectHandlers, options);\n\n\n/*\n ShareJS attaches the server API to a weird place. Oh well...\n https://github.com/share/ShareJS/blob/v0.6.2/src/server/index.coffee\n */\n\nShareJS.model = WebApp.connectHandlers.model;\n// A convenience function for creating a document on the server.\nShareJS.initializeDoc = function(docName, content) {\n    return ShareJS.model.create(docName, 'text', {}, function(err) {\n        var opData;\n        if (err) {\n            console.log(err);\n            return;\n        }\n        //One op; insert all the content at position 0\n        //https://github.com/share/ShareJS/wiki/Server-api\n        opData = {\n            op: [{ i: content, p: 0 }],\n            v: 0,\n            meta: {}\n        };\n        return ShareJS.model.applyOp(docName, opData, function(err, res) {\n            if (err) {\n                return console.log(err);\n            }\n        });\n    });\n};\n\n"]},"hash":"26e3718a13a43dafe533617531de80062f474615"}
