{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar ShareJSTextConnector,                  \n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nShareJSConnector = (function() {\n  var getOptions;\n\n  getOptions = function() {\n    return {\n      origin: '//' + window.location.host + '/channel',\n      authentication: (typeof Meteor.userId === \"function\" ? Meteor.userId() : void 0) || null\n    };\n  };\n\n  function ShareJSConnector(parentView) {\n    var docIdVar, params;\n    docIdVar = new Blaze.ReactiveVar;\n    parentView.onViewReady(function() {\n      return this.autorun(function() {\n        var data;\n        data = Blaze.getData();\n        return docIdVar.set(data.docid);\n      });\n    });\n    parentView.onViewDestroyed((function(_this) {\n      return function() {\n        return _this.destroy();\n      };\n    })(this));\n    this.isCreated = false;\n    this.docIdVar = docIdVar;\n    params = Blaze.getData(parentView);\n    this.configCallback = params.onRender;\n    this.connectCallback = params.onConnect;\n  }\n\n  ShareJSConnector.prototype.create = function() {\n    var connector;\n    if (this.isCreated) {\n      throw new Error(\"Already created\");\n    }\n    connector = this;\n    this.isCreated = true;\n    this.view = this.createView();\n    this.view.onViewReady(function() {\n      connector.rendered(this.firstNode());\n      return this.autorun(function() {\n        var docId;\n        docId = connector.docIdVar.get();\n        connector.disconnect();\n        if (docId) {\n          return connector.connect(docId);\n        }\n      });\n    });\n    return this.view;\n  };\n\n  ShareJSConnector.prototype.rendered = function(element) {\n    return this.element = element;\n  };\n\n  ShareJSConnector.prototype.connect = function(docId, element) {\n    this.connectingId = docId;\n    return sharejs.open(docId, 'text', getOptions(), (function(_this) {\n      return function(error, doc) {\n        if (error) {\n          Meteor._debug(error);\n          return;\n        }\n        if (_this.connectingId !== doc.name) {\n          return doc.close();\n        } else {\n          return _this.attach(doc);\n        }\n      };\n    })(this));\n  };\n\n  ShareJSConnector.prototype.attach = function(doc) {\n    return this.doc = doc;\n  };\n\n  ShareJSConnector.prototype.disconnect = function() {\n    if (this.doc != null) {\n      this.doc.close();\n      return this.doc = null;\n    }\n  };\n\n  ShareJSConnector.prototype.destroy = function() {\n    if (this.isDestroyed) {\n      throw new Error(\"Already destroyed\");\n    }\n    this.disconnect();\n    this.view = null;\n    return this.isDestroyed = true;\n  };\n\n  return ShareJSConnector;\n\n})();\n\nShareJSTextConnector = (function(superClass) {\n  extend(ShareJSTextConnector, superClass);\n\n  function ShareJSTextConnector() {\n    return ShareJSTextConnector.__super__.constructor.apply(this, arguments);\n  }\n\n  ShareJSTextConnector.prototype.createView = function() {\n    return Blaze.With(Blaze.getData, function() {\n      return Template._sharejsText;\n    });\n  };\n\n  ShareJSTextConnector.prototype.rendered = function(element) {\n    ShareJSTextConnector.__super__.rendered.apply(this, arguments);\n    this.textarea = element;\n    return typeof this.configCallback === \"function\" ? this.configCallback(this.textarea) : void 0;\n  };\n\n  ShareJSTextConnector.prototype.connect = function() {\n    this.textarea.disabled = true;\n    return ShareJSTextConnector.__super__.connect.apply(this, arguments);\n  };\n\n  ShareJSTextConnector.prototype.attach = function(doc) {\n    ShareJSTextConnector.__super__.attach.apply(this, arguments);\n    doc.attach_textarea(this.textarea);\n    this.textarea.disabled = false;\n    return typeof this.connectCallback === \"function\" ? this.connectCallback(this.textarea) : void 0;\n  };\n\n  ShareJSTextConnector.prototype.disconnect = function() {\n    var ref;\n    if ((ref = this.textarea) != null) {\n      if (typeof ref.detach_share === \"function\") {\n        ref.detach_share();\n      }\n    }\n    return ShareJSTextConnector.__super__.disconnect.apply(this, arguments);\n  };\n\n  ShareJSTextConnector.prototype.destroy = function() {\n    ShareJSTextConnector.__super__.destroy.apply(this, arguments);\n    return this.textarea = null;\n  };\n\n  return ShareJSTextConnector;\n\n})(ShareJSConnector);\n\nUI.registerHelper(\"sharejsText\", new Template('sharejsText', function() {\n  return new ShareJSTextConnector(this).create();\n}));\n","sourceMap":{"version":3,"file":"/sharejs-client.coffee.js","sourceRoot":"","sources":["/packages/mizzao_sharejs/sharejs-client.coffee"],"names":[],"mappings":"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","sourcesContent":["class ShareJSConnector\n\n  getOptions = ->\n    origin: '//' + window.location.host + '/channel'\n    authentication: Meteor.userId?() or null # accounts-base may not be in the app\n\n  constructor: (parentView) ->\n    # Create a ReactiveVar that tracks the docId that was passed in\n    docIdVar = new Blaze.ReactiveVar\n\n    parentView.onViewReady ->\n      this.autorun ->\n        data = Blaze.getData()\n        docIdVar.set(data.docid)\n\n    parentView.onViewDestroyed =>\n      this.destroy()\n\n    @isCreated = false\n    @docIdVar = docIdVar\n\n    # Configure any callbacks if specified\n    params = Blaze.getData(parentView)\n    @configCallback = params.onRender\n    @connectCallback = params.onConnect\n\n  create: ->\n    throw new Error(\"Already created\") if @isCreated\n    connector = this\n    @isCreated = true\n\n    @view = @createView()\n    @view.onViewReady ->\n      connector.rendered( this.firstNode() )\n\n      this.autorun ->\n        # By grabbing docId here, we ensure that we only try to connect when\n        # this is rendered.\n        docId = connector.docIdVar.get()\n\n        # Disconnect any existing connections\n        connector.disconnect()\n        connector.connect(docId) if docId\n\n    return @view\n\n  # Set up the context when rendered.\n  rendered: (element) ->\n    this.element = element\n\n  # Connect to a document.\n  connect: (docId, element) ->\n    @connectingId = docId\n\n    sharejs.open docId, 'text', getOptions(), (error, doc) =>\n      if error\n        Meteor._debug(error)\n        return\n\n      # Don't attach if re-render happens too quickly and we're trying to\n      # connect to a different document now.\n      unless @connectingId is doc.name\n        doc.close() # Close immediately\n      else\n        @attach(doc)\n\n  # Attach shareJS to the on-screen editor\n  attach: (doc) ->\n    @doc = doc\n\n  # Disconnect from ShareJS. This should be idempotent.\n  disconnect: ->\n    # Close connection to the ShareJS doc\n    if @doc?\n      @doc.close()\n      @doc = null\n\n  # Destroy the connector and make sure everything's disconnected.\n  destroy: ->\n    throw new Error(\"Already destroyed\") if @isDestroyed\n\n    @disconnect()\n    @view = null\n    @isDestroyed = true\n\nclass ShareJSTextConnector extends ShareJSConnector\n\n  createView: ->\n    return Blaze.With(Blaze.getData, -> Template._sharejsText)\n\n  rendered: (element) ->\n    super\n    @textarea = element\n    @configCallback?(@textarea)\n\n  connect: ->\n    @textarea.disabled = true\n    super\n\n  attach: (doc) ->\n    super\n    doc.attach_textarea(@textarea)\n    @textarea.disabled = false\n    @connectCallback?(@textarea)\n\n  disconnect: ->\n    @textarea?.detach_share?()\n    super\n\n  destroy: ->\n    super\n    # Meteor._debug \"destroying textarea editor\"\n    @textarea = null\n\nUI.registerHelper \"sharejsText\", new Template('sharejsText', ->\n  return new ShareJSTextConnector(this).create()\n)\n"]}}