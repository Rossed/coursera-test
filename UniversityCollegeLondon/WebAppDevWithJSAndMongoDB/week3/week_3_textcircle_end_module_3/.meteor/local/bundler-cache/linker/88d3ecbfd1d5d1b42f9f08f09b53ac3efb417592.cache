[{"type":"js","data":"/* Imports for global scope */\n\nEditableText = Package['babrahams:editable-text'].EditableText;\nsanitizeHtml = Package['djedi:sanitize-html'].sanitizeHtml;\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nLog = Package.logging.Log;\nRandom = Package.random.Random;\nEJSON = Package.ejson.EJSON;\nSpacebars = Package.spacebars.Spacebars;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nShareJS = Package['mizzao:sharejs'].ShareJS;\nAccounts = Package['accounts-base'].Accounts;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"(function(){// documents collection\nthis.Documents = new Mongo.Collection(\"documents\");\n// editing users collection\nEditingUsers = new Mongo.Collection(\"editingUsers\");\n\nif (Meteor.isClient) {\n  // subscriptions - allow read access to collections \n  Meteor.subscribe(\"documents\");\n  Meteor.subscribe(\"editingUsers\");\n  \n  Template.editor.helpers({\n    // return the id of the currently loaded doc\n    docid:function(){\n      setupCurrentDocument();\n      return Session.get(\"docid\");\n    }, \n    // configure the CodeMirror editor\n    config:function(){\n      return function(editor){\n        editor.setOption(\"lineNumbers\", true);\n        editor.setOption(\"theme\", \"cobalt\");\n          // respond to edits in the code editor window\n        editor.on(\"change\", function(cm_editor, info){\n          $(\"#viewer_iframe\").contents().find(\"html\").html(cm_editor.getValue());\n          Meteor.call(\"addEditingUser\");\n        });        \n      }\n    }, \n  });\n\n  Template.editingUsers.helpers({\n    // return users editing current document\n    users:function(){\n      var doc, eusers, users;\n      doc = Documents.findOne();\n      if (!doc){return;}// give up\n      eusers = EditingUsers.findOne({docid:doc._id});\n      if (!eusers){return;}// give up\n      users = new Array();\n      var i = 0;\n      for (var user_id in eusers.users){\n          users[i] = fixObjectKeys(eusers.users[user_id]);\n          i++;\n      }\n      return users;\n    }\n  })\n\n  Template.navbar.helpers({\n    // return a list of all visible documents\n    documents:function(){\n      return Documents.find();\n    }\n  })\n\n  Template.docMeta.helpers({\n    // return current document \n    document:function(){\n      return Documents.findOne({_id:Session.get(\"docid\")});\n    }, \n    // return true if I am allowed to edit the current doc, false otherwise\n    canEdit:function(){\n      var doc;\n      doc = Documents.findOne({_id:Session.get(\"docid\")});\n      if (doc){\n        if (doc.owner == Meteor.userId()){\n          return true;\n        }\n      }\n      return false;\n    }\n  })\n\n  Template.editableText.helpers({\n    // return true if I am allowed to edit the current doc, false otherwise\n    userCanEdit : function(doc,Collection) {\n      // can edit if the current doc is owned by me.\n      doc = Documents.findOne({_id:Session.get(\"docid\"), owner:Meteor.userId()});\n      if (doc){\n        return true;\n      }\n      else {\n        return false;\n      }\n    }    \n  })\n\n  /////////\n  /// EVENTS\n  ////////\n\n  Template.navbar.events({\n    // add a new document button\n    \"click .js-add-doc\":function(event){\n      event.preventDefault();\n      console.log(\"Add a new doc!\");\n      if (!Meteor.user()){// user not available\n          alert(\"You need to login first!\");\n      }\n      else {\n        // they are logged in... lets insert a doc\n        var id = Meteor.call(\"addDoc\", function(err, res){\n          if (!err){// all good\n            console.log(\"event callback received id: \"+res);\n            Session.set(\"docid\", res);            \n          }\n        });\n      }\n    }, \n    // load a document link\n    \"click .js-load-doc\":function(event){\n      //console.log(this);\n      Session.set(\"docid\", this._id);\n    }\n  })\n\n  Template.docMeta.events({\n    // toggle the private checkbox\n    \"click .js-tog-private\":function(event){\n      console.log(event.target.checked);\n      var doc = {_id:Session.get(\"docid\"), isPrivate:event.target.checked};\n      Meteor.call(\"updateDocPrivacy\", doc);\n\n    }\n  })\n\n\n}// end isClient...\n\nif (Meteor.isServer) {\n  Meteor.startup(function () {\n    // create a starter doc\n    if (!Documents.findOne()){// no documents yet!\n        Documents.insert({title:\"my new document\"});\n    }\n  });\n  // publish a list of documents the user can se\n  Meteor.publish(\"documents\", function(){\n    return Documents.find({\n     $or:[\n      {isPrivate:false}, \n      {owner:this.userId}\n      ] \n    });\n  })  \n  // public sets of editing users\n  Meteor.publish(\"editingUsers\", function(){\n    return EditingUsers.find();\n  })\n\n}\n\nMeteor.methods({\n  // method to add a new document\n  addDoc:function(){\n    var doc;\n    if (!this.userId){// not logged in\n      return;\n    }\n    else {\n      doc = {owner:this.userId, createdOn:new Date(), \n            title:\"my new doc\"};\n      var id = Documents.insert(doc);\n      console.log(\"addDoc method: got an id \"+id);\n      return id;\n    }\n  }, \n  // method to change privacy flag on a docuement\n  updateDocPrivacy:function(doc){\n    console.log(\"updateDocPrivacy method\");\n    console.log(doc);\n    var realDoc = Documents.findOne({_id:doc._id, owner:this.userId});\n    if (realDoc){\n      realDoc.isPrivate = doc.isPrivate;\n      Documents.update({_id:doc._id}, realDoc);\n    }\n\n  },\n  // method to add editing suers to a document\n  addEditingUser:function(){\n    var doc, user, eusers;\n    doc = Documents.findOne();\n    if (!doc){return;}// no doc give up\n    if (!this.userId){return;}// no logged in user give up\n    // now I have a doc and possibly a user\n    user = Meteor.user().profile;\n    eusers = EditingUsers.findOne({docid:doc._id});\n    if (!eusers){\n      eusers = {\n        docid:doc._id, \n        users:{}, \n      };\n    }\n    user.lastEdit = new Date();\n    eusers.users[this.userId] = user;\n\n    EditingUsers.upsert({_id:eusers._id}, eusers);\n  }\n})\n// handy function that makes sure we have a document to work on\nfunction setupCurrentDocument(){\n  var doc;\n  if (!Session.get(\"docid\")){// no doc id set yet\n    doc = Documents.findOne();\n    if (doc){\n      Session.set(\"docid\", doc._id);\n    }\n  }\n}\n// function to change object keys by removing hyphens to make them \n// compatible with space bars. \nfunction fixObjectKeys(obj){\n  var newObj = {};\n  for (key in obj){\n    var key2 = key.replace(\"-\", \"\");\n    newObj[key2] = obj[key];\n  }\n  return newObj;\n}\n\n  \n\n\n\n\n\n}).call(this);\n","servePath":"/textcircle.js","sourceMap":null}]