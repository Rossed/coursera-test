[{"type":"js","data":"/* Imports for global scope */\n\naccountsUIBootstrap3 = Package['ian:accounts-ui-bootstrap-3'].accountsUIBootstrap3;\nEditableText = Package['babrahams:editable-text'].EditableText;\nsanitizeHtml = Package['babrahams:editable-text'].sanitizeHtml;\nMongo = Package.mongo.Mongo;\nSession = Package.session.Session;\n$ = Package.jquery.$;\njQuery = Package.jquery.jQuery;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nLog = Package.logging.Log;\nReload = Package.reload.Reload;\nRandom = Package.random.Random;\nEJSON = Package.ejson.EJSON;\nSpacebars = Package.spacebars.Spacebars;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nShareJSConnector = Package['mizzao:sharejs'].ShareJSConnector;\nAccounts = Package['accounts-base'].Accounts;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nTemplate = Package.templating.Template;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"(function(){\nTemplate.body.addContent((function() {\n  var view = this;\n  return [ Spacebars.include(view.lookupTemplate(\"navbar\")), \"\\n\\n\t\", HTML.DIV({\n    \"class\": \"container top-margin\"\n  }, \"\\n\\n    \", HTML.DIV({\n    \"class\": \"row\"\n  }, \"\\n      \", HTML.DIV({\n    \"class\": \"col-md-12\"\n  }, \"\\n          \", Spacebars.include(view.lookupTemplate(\"docMeta\")), \"\\n      \"), \"\\n    \"), \"\\n\\n    \", HTML.DIV({\n    \"class\": \"row\"\n  }, \"\\n      \", HTML.DIV({\n    \"class\": \"col-md-12\"\n  }, \"\\n          \", Spacebars.include(view.lookupTemplate(\"editingUsers\")), \"\\n      \"), \"\\n    \"), \"\\n\\n    \", HTML.DIV({\n    \"class\": \"row\"\n  }, \"\\n      \", HTML.DIV({\n    \"class\": \"col-md-6\"\n  }, \"\\n          \", Spacebars.include(view.lookupTemplate(\"editor\")), \"\\n      \"), \"\\n      \", HTML.DIV({\n    \"class\": \"col-md-6\"\n  }, \"\\n        \", Spacebars.include(view.lookupTemplate(\"viewer\")), \"\\n      \"), \"\\n    \"), \"\\n\t\") ];\n}));\nMeteor.startup(Template.body.renderToDocument);\n\nTemplate.__checkName(\"navbar\");\nTemplate[\"navbar\"] = new Template(\"Template.navbar\", (function() {\n  var view = this;\n  return HTML.NAV({\n    \"class\": \"navbar navbar-default navbar-fixed-top\"\n  }, \"\\n      \", HTML.DIV({\n    \"class\": \"container\"\n  }, \"\\n        \", HTML.Raw('<a class=\"navbar-brand\" href=\"#\">TextCircle</a>'), \"\\n        \", HTML.UL({\n    \"class\": \"nav navbar-nav\"\n  }, \"\\n          \", HTML.Raw('<li>\\n            <a href=\"#\" class=\"js-add-doc\">\\n              <span class=\"glyphicon glyphicon-plus\" aria-hidden=\"true\"></span>\\n              new document\\n            </a> \\n          </li>'), \"\\n\\n\\n          \", HTML.Raw(\"<!-- drop down list -->\"), \"\\n          \", HTML.LI({\n    \"class\": \"dropdown\"\n  }, \"\\n          \", HTML.Raw('<a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">Documents <span class=\"caret\"></span></a>'), \"\\n\\n          \", HTML.UL({\n    \"class\": \"dropdown-menu\"\n  }, \"\\n            \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"documents\"));\n  }, function() {\n    return [ \"\\n            \", HTML.LI(HTML.A({\n      href: \"#\",\n      \"class\": \"js-load-doc\"\n    }, Blaze.View(\"lookup:title\", function() {\n      return Spacebars.mustache(view.lookup(\"title\"));\n    }))), \"\\n            \" ];\n  }), \"\\n          \"), \"\\n        \"), \"\\n          \", HTML.Raw(\"<!-- end drop down list -->\"), \"\\n        \"), \"\\n        \", HTML.DIV({\n    \"class\": \"nav navbar-right\"\n  }, \"\\n        \", HTML.DIV({\n    \"class\": \"navbar-text\"\n  }, \"\\n            \", Blaze._TemplateWith(function() {\n    return {\n      align: Spacebars.call(\"right\")\n    };\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"loginButtons\"));\n  }), \"\\n\\n        \"), \"   \\n        \"), \"       \\n      \"), HTML.Raw(\" <!-- / nav container -->\\n  \"));\n}));\n\nTemplate.__checkName(\"editor\");\nTemplate[\"editor\"] = new Template(\"Template.editor\", (function() {\n  var view = this;\n  return Blaze._TemplateWith(function() {\n    return {\n      docid: Spacebars.call(view.lookup(\"docid\")),\n      onRender: Spacebars.call(view.lookup(\"config\")),\n      id: Spacebars.call(\"editor\"),\n      mode: Spacebars.call(\"javascript\")\n    };\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"sharejsCM\"));\n  });\n}));\n\nTemplate.__checkName(\"viewer\");\nTemplate[\"viewer\"] = new Template(\"Template.viewer\", (function() {\n  var view = this;\n  return HTML.Raw('<iframe id=\"viewer_iframe\">\\n  </iframe>');\n}));\n\nTemplate.__checkName(\"docMeta\");\nTemplate[\"docMeta\"] = new Template(\"Template.docMeta\", (function() {\n  var view = this;\n  return Spacebars.With(function() {\n    return Spacebars.call(view.lookup(\"document\"));\n  }, function() {\n    return [ \"\\n  \", HTML.SPAN({\n      \"class\": \"h1\"\n    }, \" \", Blaze._TemplateWith(function() {\n      return {\n        collection: Spacebars.call(\"documents\"),\n        field: Spacebars.call(\"title\")\n      };\n    }, function() {\n      return Spacebars.include(view.lookupTemplate(\"editableText\"));\n    })), \"\\n  \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"canEdit\"));\n    }, function() {\n      return [ \"\\n  \", HTML.DIV({\n        \"class\": \"checkbox\"\n      }, \"\\n      \", HTML.LABEL(\"\\n        \", HTML.INPUT({\n        type: \"checkbox\",\n        \"class\": \"js-tog-private\"\n      }), \"Private\\n      \"), \"\\n  \"), \"\\n  \" ];\n    }), \"\\n\\n  \" ];\n  });\n}));\n\nTemplate.__checkName(\"editingUsers\");\nTemplate[\"editingUsers\"] = new Template(\"Template.editingUsers\", (function() {\n  var view = this;\n  return [ \"Editors:\\n  \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"users\"));\n  }, function() {\n    return [ \"\\n  \", HTML.SPAN({\n      \"class\": \"label label-success\"\n    }, Blaze.View(\"lookup:firstname\", function() {\n      return Spacebars.mustache(view.lookup(\"firstname\"));\n    }), \" \"), \"\\n   \\n  \" ];\n  }) ];\n}));\n\n}).call(this);\n","servePath":"/template.textcircle.js","sourceMap":null},{"type":"js","data":"(function(){\n\n        \nAccounts.ui.config({\n    requestPermissions: {},\n    extraSignupFields: [{\n        fieldName: 'first-name',\n        fieldLabel: 'First name',\n        inputType: 'text',\n        visible: true,\n        validate: function(value, errorFunction) {\n          if (!value) {\n            errorFunction(\"Please write your first name\");\n            return false;\n          } else {\n            return true;\n          }\n        }\n    }, {\n        fieldName: 'last-name',\n        fieldLabel: 'Last name',\n        inputType: 'text',\n        visible: true,\n    }, {\n        fieldName: 'gender',\n        showFieldLabel: false,      // If true, fieldLabel will be shown before radio group\n        fieldLabel: 'Gender',\n        inputType: 'radio',\n        radioLayout: 'vertical',    // It can be 'inline' or 'vertical'\n        data: [{                    // Array of radio options, all properties are required\n            id: 1,                  // id suffix of the radio element\n            label: 'Male',          // label for the radio element\n            value: 'm'              // value of the radio element, this will be saved.\n          }, {\n            id: 2,\n            label: 'Female',\n            value: 'f',\n            checked: 'checked'\n        }],\n        visible: true\n    }, {\n        fieldName: 'country',\n        fieldLabel: 'Country',\n        inputType: 'select',\n        showFieldLabel: true,\n        empty: 'Please select your country of residence',\n        data: [{\n            id: 1,\n            label: 'United States',\n            value: 'us'\n          }, {\n            id: 2,\n            label: 'Spain',\n            value: 'es',\n        }],\n        visible: true\n    }, {\n        fieldName: 'terms',\n        fieldLabel: 'I accept the terms and conditions <a href=\"\">See t and x...</a>',\n        inputType: 'checkbox',\n        visible: true,\n        saveToProfile: false,\n        validate: function(value, errorFunction) {\n            if (value) {\n                return true;\n            } else {\n                errorFunction('You must accept the terms and conditions.');\n                return false;\n            }\n        }\n    }]\n});\n\n\n}).call(this);\n","servePath":"/client/accounts.js","sourceMap":null},{"type":"js","data":"(function(){// documents collection\nthis.Documents = new Mongo.Collection(\"documents\");\n// editing users collection\nEditingUsers = new Mongo.Collection(\"editingUsers\");\n\nif (Meteor.isClient) {\n  // subscriptions - allow read access to collections \n  Meteor.subscribe(\"documents\");\n  Meteor.subscribe(\"editingUsers\");\n  \n  Template.editor.helpers({\n    // return the id of the currently loaded doc\n    docid:function(){\n      setupCurrentDocument();\n      return Session.get(\"docid\");\n    }, \n    // configure the CodeMirror editor\n    config:function(){\n      return function(editor){\n        editor.setOption(\"lineNumbers\", true);\n        editor.setOption(\"theme\", \"cobalt\");\n          // respond to edits in the code editor window\n        editor.on(\"change\", function(cm_editor, info){\n          $(\"#viewer_iframe\").contents().find(\"html\").html(cm_editor.getValue());\n          Meteor.call(\"addEditingUser\");\n        });        \n      }\n    }, \n  });\n\n  Template.editingUsers.helpers({\n    // return users editing current document\n    users:function(){\n      var doc, eusers, users;\n      doc = Documents.findOne();\n      if (!doc){return;}// give up\n      eusers = EditingUsers.findOne({docid:doc._id});\n      if (!eusers){return;}// give up\n      users = new Array();\n      var i = 0;\n      for (var user_id in eusers.users){\n          users[i] = fixObjectKeys(eusers.users[user_id]);\n          i++;\n      }\n      return users;\n    }\n  })\n\n  Template.navbar.helpers({\n    // return a list of all visible documents\n    documents:function(){\n      return Documents.find();\n    }\n  })\n\n  Template.docMeta.helpers({\n    // return current document \n    document:function(){\n      return Documents.findOne({_id:Session.get(\"docid\")});\n    }, \n    // return true if I am allowed to edit the current doc, false otherwise\n    canEdit:function(){\n      var doc;\n      doc = Documents.findOne({_id:Session.get(\"docid\")});\n      if (doc){\n        if (doc.owner == Meteor.userId()){\n          return true;\n        }\n      }\n      return false;\n    }\n  })\n\n  Template.editableText.helpers({\n    // return true if I am allowed to edit the current doc, false otherwise\n    userCanEdit : function(doc,Collection) {\n      // can edit if the current doc is owned by me.\n      doc = Documents.findOne({_id:Session.get(\"docid\"), owner:Meteor.userId()});\n      if (doc){\n        return true;\n      }\n      else {\n        return false;\n      }\n    }    \n  })\n\n  /////////\n  /// EVENTS\n  ////////\n\n  Template.navbar.events({\n    // add a new document button\n    \"click .js-add-doc\":function(event){\n      event.preventDefault();\n      console.log(\"Add a new doc!\");\n      if (!Meteor.user()){// user not available\n          alert(\"You need to login first!\");\n      }\n      else {\n        // they are logged in... lets insert a doc\n        var id = Meteor.call(\"addDoc\", function(err, res){\n          if (!err){// all good\n            console.log(\"event callback received id: \"+res);\n            Session.set(\"docid\", res);            \n          }\n        });\n      }\n    }, \n    // load a document link\n    \"click .js-load-doc\":function(event){\n      //console.log(this);\n      Session.set(\"docid\", this._id);\n    }\n  })\n\n  Template.docMeta.events({\n    // toggle the private checkbox\n    \"click .js-tog-private\":function(event){\n      console.log(event.target.checked);\n      var doc = {_id:Session.get(\"docid\"), isPrivate:event.target.checked};\n      Meteor.call(\"updateDocPrivacy\", doc);\n\n    }\n  })\n\n\n}// end isClient...\n\nif (Meteor.isServer) {\n  Meteor.startup(function () {\n    // create a starter doc\n    if (!Documents.findOne()){// no documents yet!\n        Documents.insert({title:\"my new document\"});\n    }\n  });\n  // publish a list of documents the user can se\n  Meteor.publish(\"documents\", function(){\n    return Documents.find({\n     $or:[\n      {isPrivate:false}, \n      {owner:this.userId}\n      ] \n    });\n  })  \n  // public sets of editing users\n  Meteor.publish(\"editingUsers\", function(){\n    return EditingUsers.find();\n  })\n\n}\n\nMeteor.methods({\n  // method to add a new document\n  addDoc:function(){\n    var doc;\n    if (!this.userId){// not logged in\n      return;\n    }\n    else {\n      doc = {owner:this.userId, createdOn:new Date(), \n            title:\"my new doc\"};\n      var id = Documents.insert(doc);\n      console.log(\"addDoc method: got an id \"+id);\n      return id;\n    }\n  }, \n  // method to change privacy flag on a docuement\n  updateDocPrivacy:function(doc){\n    console.log(\"updateDocPrivacy method\");\n    console.log(doc);\n    var realDoc = Documents.findOne({_id:doc._id, owner:this.userId});\n    if (realDoc){\n      realDoc.isPrivate = doc.isPrivate;\n      Documents.update({_id:doc._id}, realDoc);\n    }\n\n  },\n  // method to add editing suers to a document\n  addEditingUser:function(){\n    var doc, user, eusers;\n    doc = Documents.findOne();\n    if (!doc){return;}// no doc give up\n    if (!this.userId){return;}// no logged in user give up\n    // now I have a doc and possibly a user\n    user = Meteor.user().profile;\n    eusers = EditingUsers.findOne({docid:doc._id});\n    if (!eusers){\n      eusers = {\n        docid:doc._id, \n        users:{}, \n      };\n    }\n    user.lastEdit = new Date();\n    eusers.users[this.userId] = user;\n\n    EditingUsers.upsert({_id:eusers._id}, eusers);\n  }\n})\n// handy function that makes sure we have a document to work on\nfunction setupCurrentDocument(){\n  var doc;\n  if (!Session.get(\"docid\")){// no doc id set yet\n    doc = Documents.findOne();\n    if (doc){\n      Session.set(\"docid\", doc._id);\n    }\n  }\n}\n// function to change object keys by removing hyphens to make them \n// compatible with space bars. \nfunction fixObjectKeys(obj){\n  var newObj = {};\n  for (key in obj){\n    var key2 = key.replace(\"-\", \"\");\n    newObj[key2] = obj[key];\n  }\n  return newObj;\n}\n\n  \n\n\n\n\n\n}).call(this);\n","servePath":"/textcircle.js","sourceMap":null}]