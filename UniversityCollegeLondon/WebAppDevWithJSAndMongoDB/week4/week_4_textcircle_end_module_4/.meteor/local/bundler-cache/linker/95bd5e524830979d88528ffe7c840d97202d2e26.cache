[{"type":"js","data":"/* Imports for global scope */\n\nEditableText = Package['babrahams:editable-text'].EditableText;\nsanitizeHtml = Package['djedi:sanitize-html'].sanitizeHtml;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nLog = Package.logging.Log;\nRandom = Package.random.Random;\nEJSON = Package.ejson.EJSON;\nSpacebars = Package.spacebars.Spacebars;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nShareJS = Package['mizzao:sharejs'].ShareJS;\nAccounts = Package['accounts-base'].Accounts;\nIron = Package['iron:core'].Iron;\nSimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nMongoObject = Package['aldeed:simple-schema'].MongoObject;\nCollection2 = Package['aldeed:collection2-core'].Collection2;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"(function(){// code sent to client and server\n// which gets loaded before anything else (since it is in the lib folder)\n\nthis.Documents = new Mongo.Collection(\"documents\");\nEditingUsers = new Mongo.Collection(\"editingUsers\");\nComments = new Mongo.Collection(\"comments\");\n\n// set up a schema controlling the allowable \n// structure of comment objects\nComments.attachSchema(new SimpleSchema({\n  title: {\n    type: String,\n    label: \"Title\",\n    max: 200\n  },\n  body:{\n    type: String,\n    label: \"Comment\",\n    max: 1000  \t\n  },\n  docid:{\n  \ttype: String, \n  }, \n  owner:{\n  \ttype: String, \n  }, \n  \n}));\n\n}).call(this);\n","servePath":"/lib/collections.js","sourceMap":null},{"type":"js","data":"(function(){// code that is only sent to the server. \n\nMeteor.startup(function () {\n  // create a starter doc if necessary\n  if (!Documents.findOne()){// no documents yet!\n      Documents.insert({title:\"my new document\"});\n  }\n});\n\n\n// publish read access to collections\n\n// all visible docs \nMeteor.publish(\"documents\", function(){\n  return Documents.find({\n   $or:[\n    {isPrivate:{$ne:true}}, \n    {owner:this.userId}\n    ] \n  });\n})  \n// users editing docs\nMeteor.publish(\"editingUsers\", function(){\n  return EditingUsers.find();\n})\n\n// coments on docs\nMeteor.publish(\"comments\", function(){\n  return Comments.find();\n})\n}).call(this);\n","servePath":"/server/main.js","sourceMap":null},{"type":"js","data":"(function(){// code that is shared between client and server, i.e. sent to both\n\n// method definitions\nMeteor.methods({\n  // adding new comments\n  addComment:function(comment){\n    console.log(\"addComment method running!\");\n    if (this.userId){// we have a user\n      comment.owner = this.userId;\n        return Comments.insert(comment);\n    }\n    return;\n  }, \n\n  // adding new documents\n  addDoc:function(){\n    var doc;\n    if (!this.userId){// not logged in\n      return;\n    }\n    else {\n      doc = {owner:this.userId, createdOn:new Date(), \n            title:\"my new doc\"};\n      var id = Documents.insert(doc);\n      console.log(\"addDoc method: got an id \"+id);\n      return id;\n    }\n  }, \n  // changing doc privacy settings\n  updateDocPrivacy:function(doc){\n    console.log(\"updateDocPrivacy method\");\n    console.log(doc);\n    var realDoc = Documents.findOne({_id:doc._id, owner:this.userId});\n    if (realDoc){\n      realDoc.isPrivate = doc.isPrivate;\n      Documents.update({_id:doc._id}, realDoc);\n    }\n  },\n// adding editors to a document\n  addEditingUser:function(docid){\n    var doc, user, eusers;\n    doc = Documents.findOne({_id:docid});\n    if (!doc){return;}// no doc give up\n    if (!this.userId){return;}// no logged in user give up\n    // now I have a doc and possibly a user\n    user = Meteor.user().profile;\n    eusers = EditingUsers.findOne({docid:doc._id});\n    if (!eusers){\n      eusers = {\n        docid:doc._id, \n        users:{}, \n      };\n    }\n    user.lastEdit = new Date();\n    eusers.users[this.userId] = user;\n\n    EditingUsers.upsert({_id:eusers._id}, eusers);\n  }\n})\n}).call(this);\n","servePath":"/shared/main.js","sourceMap":null}]