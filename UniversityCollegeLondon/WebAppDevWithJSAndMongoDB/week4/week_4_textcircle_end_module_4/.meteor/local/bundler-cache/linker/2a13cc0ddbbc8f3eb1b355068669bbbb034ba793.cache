[{"type":"js","data":"/* Imports for global scope */\n\naccountsUIBootstrap3 = Package['ian:accounts-ui-bootstrap-3'].accountsUIBootstrap3;\nEditableText = Package['babrahams:editable-text'].EditableText;\nsanitizeHtml = Package['babrahams:editable-text'].sanitizeHtml;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\nAutoForm = Package['aldeed:autoform'].AutoForm;\nMongo = Package.mongo.Mongo;\nSession = Package.session.Session;\n$ = Package.jquery.$;\njQuery = Package.jquery.jQuery;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nLog = Package.logging.Log;\nReload = Package.reload.Reload;\nRandom = Package.random.Random;\nEJSON = Package.ejson.EJSON;\nSpacebars = Package.spacebars.Spacebars;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nShareJSConnector = Package['mizzao:sharejs'].ShareJSConnector;\nAccounts = Package['accounts-base'].Accounts;\nIron = Package['iron:core'].Iron;\nSimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nMongoObject = Package['aldeed:simple-schema'].MongoObject;\nCollection2 = Package['aldeed:collection2-core'].Collection2;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nTemplate = Package.templating.Template;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"(function(){\nTemplate.__checkName(\"docItem\");\nTemplate[\"docItem\"] = new Template(\"Template.docItem\", (function() {\n  var view = this;\n  return [ HTML.DIV({\n    \"class\": \"container top-margin\"\n  }, \"\\n    \", HTML.DIV({\n    \"class\": \"row\"\n  }, \"\\n      \", HTML.DIV({\n    \"class\": \"col-md-12\"\n  }, \"\\n          \", Spacebars.include(view.lookupTemplate(\"docMeta\")), \"\\n      \"), \"\\n    \"), \"\\n\\n    \", HTML.DIV({\n    \"class\": \"row\"\n  }, \"\\n      \", HTML.DIV({\n    \"class\": \"col-md-12\"\n  }, \"\\n          \", Spacebars.include(view.lookupTemplate(\"editingUsers\")), \"\\n      \"), \"\\n    \"), \"\\n\\n    \", HTML.DIV({\n    \"class\": \"row\"\n  }, \"\\n      \", HTML.DIV({\n    \"class\": \"col-md-6\"\n  }, \"\\n          \", Spacebars.include(view.lookupTemplate(\"editor\")), \"\\n      \"), \"\\n      \", HTML.DIV({\n    \"class\": \"col-md-6\"\n  }, \"\\n        \", Spacebars.include(view.lookupTemplate(\"viewer\")), \"\\n      \"), \"\\n    \"), \"\\n    \", Spacebars.include(view.lookupTemplate(\"commentList\")), \"\\n\\n    \", Spacebars.include(view.lookupTemplate(\"insertCommentForm\")), \"\\n\\n\t\"), HTML.Raw(\"<!-- end of docItem container -->\") ];\n}));\n\nTemplate.__checkName(\"editor\");\nTemplate[\"editor\"] = new Template(\"Template.editor\", (function() {\n  var view = this;\n  return Blaze._TemplateWith(function() {\n    return {\n      docid: Spacebars.call(view.lookup(\"docid\")),\n      onRender: Spacebars.call(view.lookup(\"config\")),\n      id: Spacebars.call(\"editor\"),\n      mode: Spacebars.call(\"javascript\")\n    };\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"sharejsCM\"));\n  });\n}));\n\nTemplate.__checkName(\"viewer\");\nTemplate[\"viewer\"] = new Template(\"Template.viewer\", (function() {\n  var view = this;\n  return HTML.Raw('<iframe id=\"viewer_iframe\">\\n  </iframe>');\n}));\n\nTemplate.__checkName(\"docMeta\");\nTemplate[\"docMeta\"] = new Template(\"Template.docMeta\", (function() {\n  var view = this;\n  return Spacebars.With(function() {\n    return Spacebars.call(view.lookup(\"document\"));\n  }, function() {\n    return [ \"\\n  \", HTML.SPAN({\n      \"class\": \"h1\"\n    }, \" \", Blaze._TemplateWith(function() {\n      return {\n        collection: Spacebars.call(\"documents\"),\n        field: Spacebars.call(\"title\")\n      };\n    }, function() {\n      return Spacebars.include(view.lookupTemplate(\"editableText\"));\n    })), \"\\n  \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"canEdit\"));\n    }, function() {\n      return [ \"\\n  \", HTML.DIV({\n        \"class\": \"checkbox\"\n      }, \"\\n      \", HTML.LABEL(\"\\n        \", HTML.INPUT({\n        type: \"checkbox\",\n        \"class\": \"js-tog-private\"\n      }), \"Private\\n      \"), \"\\n  \"), \"\\n  \" ];\n    }), \"\\n\\n  \" ];\n  });\n}));\n\nTemplate.__checkName(\"editingUsers\");\nTemplate[\"editingUsers\"] = new Template(\"Template.editingUsers\", (function() {\n  var view = this;\n  return [ \"Editors:\\n  \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"users\"));\n  }, function() {\n    return [ \"\\n  \", HTML.SPAN({\n      \"class\": \"label label-success\"\n    }, Blaze.View(\"lookup:firstname\", function() {\n      return Spacebars.mustache(view.lookup(\"firstname\"));\n    }), \" \"), \"\\n   \\n  \" ];\n  }) ];\n}));\n\nTemplate.__checkName(\"commentList\");\nTemplate[\"commentList\"] = new Template(\"Template.commentList\", (function() {\n  var view = this;\n  return Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"comments\"));\n  }, function() {\n    return [ \"\\n  \", HTML.UL(\"\\n    \", HTML.LI(Blaze.View(\"lookup:title\", function() {\n      return Spacebars.mustache(view.lookup(\"title\"));\n    }), \"\\n      \", HTML.P(Blaze.View(\"lookup:body\", function() {\n      return Spacebars.mustache(view.lookup(\"body\"));\n    })), \"\\n    \"), \"\\n  \"), \"\\n  \" ];\n  });\n}));\n\nTemplate.__checkName(\"insertCommentForm2\");\nTemplate[\"insertCommentForm2\"] = new Template(\"Template.insertCommentForm2\", (function() {\n  var view = this;\n  return Blaze._TemplateWith(function() {\n    return {\n      collection: Spacebars.call(\"Comments\"),\n      id: Spacebars.call(\"insertCommentForm\"),\n      type: Spacebars.call(\"method\"),\n      meteormethod: Spacebars.call(\"addComment\")\n    };\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"quickForm\"));\n  });\n}));\n\nTemplate.__checkName(\"insertCommentForm\");\nTemplate[\"insertCommentForm\"] = new Template(\"Template.insertCommentForm\", (function() {\n  var view = this;\n  return Blaze._TemplateWith(function() {\n    return {\n      collection: Spacebars.call(\"Comments\"),\n      id: Spacebars.call(\"insertCommentForm\"),\n      type: Spacebars.call(\"method\"),\n      meteormethod: Spacebars.call(\"addComment\")\n    };\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {\n      return [ \"\\n    \", HTML.FIELDSET(\"\\n      \", HTML.LEGEND(\"Comment\"), \"\\n      \", Blaze._TemplateWith(function() {\n        return {\n          name: Spacebars.call(\"title\")\n        };\n      }, function() {\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));\n      }), \"\\n      \", Blaze._TemplateWith(function() {\n        return {\n          name: Spacebars.call(\"body\"),\n          rows: Spacebars.call(6),\n          value: Spacebars.call(\"Write your comment here\")\n        };\n      }, function() {\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));\n      }), \"\\n      \", Blaze._TemplateWith(function() {\n        return {\n          name: Spacebars.call(\"docid\"),\n          value: Spacebars.call(view.lookup(\"docid\")),\n          type: Spacebars.call(\"hidden\")\n        };\n      }, function() {\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));\n      }), \"\\n      \", Blaze._TemplateWith(function() {\n        return {\n          name: Spacebars.call(\"owner\"),\n          value: Spacebars.call(123),\n          type: Spacebars.call(\"hidden\")\n        };\n      }, function() {\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));\n      }), \"\\n\\n    \"), \"\\n    \", HTML.BUTTON({\n        type: \"submit\",\n        \"class\": \"btn btn-primary\"\n      }, \"Insert\"), \"\\n  \" ];\n    });\n  });\n}));\n\n}).call(this);\n","servePath":"/client/template.docItem.js","sourceMap":null},{"type":"js","data":"(function(){\nTemplate.__checkName(\"docList\");\nTemplate[\"docList\"] = new Template(\"Template.docList\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"container top-margin\"\n  }, \"\\n\t\t\", HTML.DIV({\n    \"class\": \"row\"\n  }, \"\\n  \t\t\", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"documents\"));\n  }, function() {\n    return [ \"\\n  \t\t\", HTML.DIV({\n      \"class\": \"col-md-3 col-xs-6\"\n    }, \"\\n  \t\t\t\", HTML.DIV({\n      \"class\": \"light-border\"\n    }, \"\\n  \t\t\t\t\", HTML.A({\n      href: function() {\n        return [ \"/documents/\", Spacebars.mustache(view.lookup(\"_id\")) ];\n      }\n    }, Blaze.View(\"lookup:title\", function() {\n      return Spacebars.mustache(view.lookup(\"title\"));\n    })), \"\\n  \t\t\t\"), \"\\n  \t\t\"), \"\\n  \t\t\" ];\n  }), \"\\n  \t\t\"), \"\\n\t\");\n}));\n\n}).call(this);\n","servePath":"/client/template.docList.js","sourceMap":null},{"type":"js","data":"(function(){\nTemplate.__checkName(\"navbar\");\nTemplate[\"navbar\"] = new Template(\"Template.navbar\", (function() {\n  var view = this;\n  return HTML.NAV({\n    \"class\": \"navbar navbar-default navbar-fixed-top\"\n  }, \"\\n      \", HTML.DIV({\n    \"class\": \"container\"\n  }, \"\\n        \", HTML.Raw('<a class=\"navbar-brand\" href=\"/\">TextCircle</a>'), \"\\n        \", HTML.UL({\n    \"class\": \"nav navbar-nav\"\n  }, \"\\n          \", HTML.Raw('<li>\\n            <a href=\"#\" class=\"js-add-doc\">\\n              <span class=\"glyphicon glyphicon-plus\" aria-hidden=\"true\"></span>\\n              new document\\n            </a> \\n          </li>'), \"\\n\\n\\n          \", HTML.Raw(\"<!-- drop down list -->\"), \"\\n          \", HTML.LI({\n    \"class\": \"dropdown\"\n  }, \"\\n          \", HTML.Raw('<a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">Documents <span class=\"caret\"></span></a>'), \"\\n\\n          \", HTML.UL({\n    \"class\": \"dropdown-menu\"\n  }, \"\\n            \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"documents\"));\n  }, function() {\n    return [ \"\\n            \", HTML.LI(HTML.A({\n      href: function() {\n        return [ \"/documents/\", Spacebars.mustache(view.lookup(\"_id\")) ];\n      },\n      \"class\": \"\"\n    }, Blaze.View(\"lookup:title\", function() {\n      return Spacebars.mustache(view.lookup(\"title\"));\n    }))), \"\\n            \" ];\n  }), \"\\n          \"), \"\\n        \"), \"\\n          \", HTML.Raw(\"<!-- end drop down list -->\"), \"\\n        \"), \"\\n        \", HTML.DIV({\n    \"class\": \"nav navbar-right\"\n  }, \"\\n        \", HTML.DIV({\n    \"class\": \"navbar-text\"\n  }, \"\\n            \", Blaze._TemplateWith(function() {\n    return {\n      align: Spacebars.call(\"right\")\n    };\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"loginButtons\"));\n  }), \"\\n\\n        \"), \"   \\n        \"), \"       \\n      \"), HTML.Raw(\" <!-- / nav container -->\\n  \"));\n}));\n\n}).call(this);\n","servePath":"/client/template.navbar.js","sourceMap":null},{"type":"js","data":"(function(){\nTemplate.__checkName(\"ApplicationLayout\");\nTemplate[\"ApplicationLayout\"] = new Template(\"Template.ApplicationLayout\", (function() {\n  var view = this;\n  return [ HTML.HEAD(\"\\n  \", HTML.TITLE(\"textcircle\"), \"\\n\"), \"\\n\\n    \", Blaze._TemplateWith(function() {\n    return \"header\";\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"yield\"));\n  }), \"\\n\\n    \", Blaze._TemplateWith(function() {\n    return \"main\";\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"yield\"));\n  }) ];\n}));\n\n}).call(this);\n","servePath":"/client/template.textcircle.js","sourceMap":null},{"type":"js","data":"(function(){// code sent to client and server\n// which gets loaded before anything else (since it is in the lib folder)\n\nthis.Documents = new Mongo.Collection(\"documents\");\nEditingUsers = new Mongo.Collection(\"editingUsers\");\nComments = new Mongo.Collection(\"comments\");\n\n// set up a schema controlling the allowable \n// structure of comment objects\nComments.attachSchema(new SimpleSchema({\n  title: {\n    type: String,\n    label: \"Title\",\n    max: 200\n  },\n  body:{\n    type: String,\n    label: \"Comment\",\n    max: 1000  \t\n  },\n  docid:{\n  \ttype: String, \n  }, \n  owner:{\n  \ttype: String, \n  }, \n  \n}));\n\n}).call(this);\n","servePath":"/lib/collections.js","sourceMap":null},{"type":"js","data":"(function(){\n\n        \nAccounts.ui.config({\n    requestPermissions: {},\n    extraSignupFields: [{\n        fieldName: 'first-name',\n        fieldLabel: 'First name',\n        inputType: 'text',\n        visible: true,\n        validate: function(value, errorFunction) {\n          if (!value) {\n            errorFunction(\"Please write your first name\");\n            return false;\n          } else {\n            return true;\n          }\n        }\n    }, {\n        fieldName: 'last-name',\n        fieldLabel: 'Last name',\n        inputType: 'text',\n        visible: true,\n    }, {\n        fieldName: 'gender',\n        showFieldLabel: false,      // If true, fieldLabel will be shown before radio group\n        fieldLabel: 'Gender',\n        inputType: 'radio',\n        radioLayout: 'vertical',    // It can be 'inline' or 'vertical'\n        data: [{                    // Array of radio options, all properties are required\n            id: 1,                  // id suffix of the radio element\n            label: 'Male',          // label for the radio element\n            value: 'm'              // value of the radio element, this will be saved.\n          }, {\n            id: 2,\n            label: 'Female',\n            value: 'f',\n            checked: 'checked'\n        }],\n        visible: true\n    }, {\n        fieldName: 'country',\n        fieldLabel: 'Country',\n        inputType: 'select',\n        showFieldLabel: true,\n        empty: 'Please select your country of residence',\n        data: [{\n            id: 1,\n            label: 'United States',\n            value: 'us'\n          }, {\n            id: 2,\n            label: 'Spain',\n            value: 'es',\n        }],\n        visible: true\n    }, {\n        fieldName: 'terms',\n        fieldLabel: 'I accept the terms and conditions <a href=\"\">See t and x...</a>',\n        inputType: 'checkbox',\n        visible: true,\n        saveToProfile: false,\n        validate: function(value, errorFunction) {\n            if (value) {\n                return true;\n            } else {\n                errorFunction('You must accept the terms and conditions.');\n                return false;\n            }\n        }\n    }]\n});\n\n\n}).call(this);\n","servePath":"/client/accounts.js","sourceMap":null},{"type":"js","data":"(function(){// code that is only sent to the client\n\n// subscribe to read data\nMeteor.subscribe(\"documents\");\nMeteor.subscribe(\"editingUsers\");\nMeteor.subscribe(\"comments\");\n\n// set up the iron router\nRouter.configure({\n  layoutTemplate: 'ApplicationLayout'\n});\n\n// 'home' page\nRouter.route('/', function () {\n  console.log(\"you hit / \");\n  this.render(\"navbar\", {to:\"header\"});\n  this.render(\"docList\", {to:\"main\"});  \n});\n\n// individual document page\nRouter.route('/documents/:_id', function () {\n  console.log(\"you hit /documents  \"+this.params._id);\n  Session.set(\"docid\", this.params._id);\n  this.render(\"navbar\", {to:\"header\"});\n  this.render(\"docItem\", {to:\"main\"});  \n});\n\n\n\nTemplate.editor.helpers({\n  // get current doc id\n  docid:function(){\n    setupCurrentDocument();\n    return Session.get(\"docid\");\n  }, \n  // set up the editor\n  config:function(){\n    return function(editor){\n      editor.setOption(\"lineNumbers\", true);\n      editor.setOption(\"theme\", \"cobalt\");\n      editor.on(\"change\", function(cm_editor, info){\n        $(\"#viewer_iframe\").contents().find(\"html\").html(cm_editor.getValue());\n        Meteor.call(\"addEditingUser\", Session.get(\"docid\"));\n      });        \n    }\n  }, \n});\n\n\nTemplate.editingUsers.helpers({\n  // retrieve a list of users\n  users:function(){\n    var doc, eusers, users;\n    doc = Documents.findOne({_id:Session.get(\"docid\")});\n    if (!doc){return;}// give up\n    eusers = EditingUsers.findOne({docid:doc._id});\n    if (!eusers){return;}// give up\n    users = new Array();\n    var i = 0;\n    for (var user_id in eusers.users){\n        users[i] = fixObjectKeys(eusers.users[user_id]);\n        i++;\n    }\n    return users;\n  }\n})\n\nTemplate.navbar.helpers({\n  // rerrieve a list of documents\n  documents:function(){\n    return Documents.find();\n  }\n})\n\nTemplate.docMeta.helpers({\n  // find current document\n  document:function(){\n    return Documents.findOne({_id:Session.get(\"docid\")});\n  }, \n  // test if a user is allowed to edit current doc\n  canEdit:function(){\n    var doc;\n    doc = Documents.findOne({_id:Session.get(\"docid\")});\n    if (doc){\n      if (doc.owner == Meteor.userId()){\n        return true;\n      }\n    }\n    return false;\n  }\n})\n\nTemplate.editableText.helpers({\n    // test if a user is allowed to edit current doc\n  userCanEdit : function(doc,Collection) {\n    // can edit if the current doc is owned by me.\n    doc = Documents.findOne({_id:Session.get(\"docid\"), owner:Meteor.userId()});\n    if (doc){\n      return true;\n    }\n    else {\n      return false;\n    }\n  }    \n})\n\nTemplate.docList.helpers({\n  // find all visible docs\n  documents:function(){\n    return Documents.find();\n  }\n})\n\nTemplate.insertCommentForm.helpers({\n  // find current doc id\n  docid:function(){\n    return Session.get(\"docid\");\n  }, \n})\n\nTemplate.commentList.helpers({\n  // find all comments for current doc\n  comments:function(){\n    return Comments.find({docid:Session.get(\"docid\")});\n  }\n})\n\n/////////\n/// EVENTS\n////////\n\nTemplate.navbar.events({\n  // add doc button\n  \"click .js-add-doc\":function(event){\n    event.preventDefault();\n    console.log(\"Add a new doc!\");\n\n    for (var i=0;i<10;i++){\n      Meteor.call('testMethod', function(){\n        console.log('testMethod returned');\n      });\n      console.log('after testMethod call');\n    }\n\n\n    if (!Meteor.user()){// user not available\n        alert(\"You need to login first!\");\n    }\n    else {\n      // they are logged in... lets insert a doc\n      var id = Meteor.call(\"addDoc\", function(err, res){\n        if (!err){// all good\n          console.log(\"event callback received id: \"+res);\n          Session.set(\"docid\", res);            \n        }\n      });\n    }\n  }, \n  // load doc button\n  \"click .js-load-doc\":function(event){\n    //console.log(this);\n    Session.set(\"docid\", this._id);\n  }\n})\n\nTemplate.docMeta.events({\n  // change document privacy\n  \"click .js-tog-private\":function(event){\n    console.log(event.target.checked);\n    var doc = {_id:Session.get(\"docid\"), isPrivate:event.target.checked};\n    Meteor.call(\"updateDocPrivacy\", doc);\n\n  }\n})\n\n// helper to make sure a doc is available\nfunction setupCurrentDocument(){\n  var doc;\n  if (!Session.get(\"docid\")){// no doc id set yet\n    doc = Documents.findOne();\n    if (doc){\n      Session.set(\"docid\", doc._id);\n    }\n  }\n}\n// helper to remove hyphens from object keys for spacebars.\nfunction fixObjectKeys(obj){\n  var newObj = {};\n  for (key in obj){\n    var key2 = key.replace(\"-\", \"\");\n    newObj[key2] = obj[key];\n  }\n  return newObj;\n}\n\n\n\n\n  \n\n\n}).call(this);\n","servePath":"/client/main.js","sourceMap":null},{"type":"js","data":"(function(){// code that is shared between client and server, i.e. sent to both\n\n// method definitions\nMeteor.methods({\n  // adding new comments\n  addComment:function(comment){\n    console.log(\"addComment method running!\");\n    if (this.userId){// we have a user\n      comment.owner = this.userId;\n        return Comments.insert(comment);\n    }\n    return;\n  }, \n\n  // adding new documents\n  addDoc:function(){\n    var doc;\n    if (!this.userId){// not logged in\n      return;\n    }\n    else {\n      doc = {owner:this.userId, createdOn:new Date(), \n            title:\"my new doc\"};\n      var id = Documents.insert(doc);\n      console.log(\"addDoc method: got an id \"+id);\n      return id;\n    }\n  }, \n  // changing doc privacy settings\n  updateDocPrivacy:function(doc){\n    console.log(\"updateDocPrivacy method\");\n    console.log(doc);\n    var realDoc = Documents.findOne({_id:doc._id, owner:this.userId});\n    if (realDoc){\n      realDoc.isPrivate = doc.isPrivate;\n      Documents.update({_id:doc._id}, realDoc);\n    }\n  },\n// adding editors to a document\n  addEditingUser:function(docid){\n    var doc, user, eusers;\n    doc = Documents.findOne({_id:docid});\n    if (!doc){return;}// no doc give up\n    if (!this.userId){return;}// no logged in user give up\n    // now I have a doc and possibly a user\n    user = Meteor.user().profile;\n    eusers = EditingUsers.findOne({docid:doc._id});\n    if (!eusers){\n      eusers = {\n        docid:doc._id, \n        users:{}, \n      };\n    }\n    user.lastEdit = new Date();\n    eusers.users[this.userId] = user;\n\n    EditingUsers.upsert({_id:eusers._id}, eusers);\n  }\n})\n}).call(this);\n","servePath":"/shared/main.js","sourceMap":null}]