[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\nemojione = Package['emojione:emojione'].emojione;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"shared\":{\"methods.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// shared/methods.js                                                                                                //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n                                                                                                                    //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"minstant.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// minstant.js                                                                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nChats = new Mongo.Collection(\"chats\");                                                                              // 1\n// subscriptions - allow read access to collections                                                                 //\n                                                                                                                    //\nif (Meteor.isClient) {                                                                                              // 5\n                                                                                                                    //\n  Meteor.subscribe(\"chats\");                                                                                        // 7\n  Meteor.subscribe(\"users\");                                                                                        // 8\n                                                                                                                    //\n  // set up the main template the the router will use to build pages                                                //\n  Router.configure({                                                                                                // 11\n    layoutTemplate: 'ApplicationLayout'                                                                             // 12\n  });                                                                                                               // 11\n  // specify the top level route, the page users see when they arrive at the site                                   //\n  Router.route('/', function () {                                                                                   // 15\n    console.log(\"rendering root /\");                                                                                // 16\n    this.render(\"navbar\", { to: \"header\" });                                                                        // 17\n    this.render(\"lobby_page\", { to: \"main\" });                                                                      // 18\n  });                                                                                                               // 19\n                                                                                                                    //\n  // specify a route that allows the current user to chat to another users                                          //\n  Router.route('/chat/:_id', function () {                                                                          // 22\n    // make sure user is logged in before chatting TBD: see iron:router documentation                               //\n    if (!Meteor.user()) {                                                                                           // 24\n      console.log(\"you are not logged in!!!\");                                                                      // 25\n      Router.go('/');                                                                                               // 26\n    }                                                                                                               // 28\n                                                                                                                    //\n    // the user they want to chat to has id equal to                                                                //\n    // the id sent in after /chat/...                                                                               //\n    var otherUserId = this.params._id;                                                                              // 33\n    // find a chat that has two users that match current user id                                                    //\n    // and the requested user id                                                                                    //\n    var filter = {                                                                                                  // 36\n      $or: [{ user1Id: Meteor.userId(), user2Id: otherUserId }, { user2Id: Meteor.userId(), user1Id: otherUserId }]\n    };                                                                                                              // 36\n    var chat = Chats.findOne(filter);                                                                               // 42\n    if (!chat) {                                                                                                    // 43\n      // no chat matching the filter - need to insert a new one                                                     //\n      // chatId = Chats.insert({user1Id:Meteor.userId(), user2Id:otherUserId});                                     //\n      chatId = Meteor.call(\"addChat\", Meteor.userId(), otherUserId);                                                // 45\n    } else {                                                                                                        // 46\n      // there is a chat going already - use that.                                                                  //\n      chatId = chat._id;                                                                                            // 48\n    }                                                                                                               // 49\n    if (chatId) {                                                                                                   // 50\n      // looking good, save the id to the session                                                                   //\n      Session.set(\"chatId\", chatId);                                                                                // 51\n    }                                                                                                               // 52\n    this.render(\"navbar\", { to: \"header\" });                                                                        // 53\n    this.render(\"chat_page\", { to: \"main\" });                                                                       // 54\n  });                                                                                                               // 56\n                                                                                                                    //\n  ///                                                                                                               //\n  // helper functions                                                                                               //\n  ///                                                                                                               //\n  Template.available_user_list.helpers({                                                                            // 61\n    users: function users() {                                                                                       // 62\n      return Meteor.users.find();                                                                                   // 63\n    }                                                                                                               // 64\n  });                                                                                                               // 61\n  Template.available_user.helpers({                                                                                 // 66\n    getUsername: function getUsername(userId) {                                                                     // 67\n      user = Meteor.users.findOne({ _id: userId });                                                                 // 68\n      return user.profile.username;                                                                                 // 69\n    },                                                                                                              // 70\n    isMyUser: function isMyUser(userId) {                                                                           // 71\n      if (userId == Meteor.userId()) {                                                                              // 72\n        return true;                                                                                                // 73\n      } else {                                                                                                      // 74\n        return false;                                                                                               // 76\n      }                                                                                                             // 77\n    }                                                                                                               // 78\n  });                                                                                                               // 66\n                                                                                                                    //\n  Template.chat_page.helpers({                                                                                      // 82\n    messages: function messages() {                                                                                 // 83\n      var chat = Chats.findOne({ _id: Session.get(\"chatId\") });                                                     // 84\n      return chat.messages;                                                                                         // 85\n    },                                                                                                              // 86\n    other_user: function other_user() {                                                                             // 87\n      return \"\";                                                                                                    // 88\n    }                                                                                                               // 89\n                                                                                                                    //\n  });                                                                                                               // 82\n                                                                                                                    //\n  Template.chat_message.helpers({                                                                                   // 93\n    userId2Avatar: function userId2Avatar(userId) {                                                                 // 94\n      user = Meteor.users.findOne({ _id: userId });                                                                 // 95\n      console.log(\"avatar: \" + user.profile.avatar);                                                                // 96\n      return user.profile.avatar;                                                                                   // 97\n    },                                                                                                              // 98\n    userId2Name: function userId2Name(userId) {                                                                     // 99\n      user = Meteor.users.findOne({ _id: userId });                                                                 // 100\n      console.log(\"avatar: \" + user.profile.avatar);                                                                // 101\n      return user.profile.username;                                                                                 // 102\n    }                                                                                                               // 103\n  });                                                                                                               // 93\n                                                                                                                    //\n  Template.chat_page.events({                                                                                       // 106\n    // this event fires when the user sends a message on the chat page                                              //\n    'submit .js-send-chat': function submitJsSendChat(event) {                                                      // 108\n      // stop the form from triggering a page reload                                                                //\n      event.preventDefault();                                                                                       // 110\n      var chatId = Session.get(\"chatId\");                                                                           // 111\n      var chatText = event.target.chat.value;                                                                       // 112\n      Meteor.call(\"sendChat\", chatId, chatText);                                                                    // 113\n      // reset the form                                                                                             //\n      event.target.chat.value = \"\";                                                                                 // 115\n    }                                                                                                               // 116\n  });                                                                                                               // 106\n}                                                                                                                   // 118\n                                                                                                                    //\n// Meteor Methods                                                                                                   //\nMeteor.methods({                                                                                                    // 121\n  addChat: function addChat(u1, u2) {                                                                               // 122\n    if (!this.userId) {                                                                                             // 123\n      console.log(\"user not logged in!\");                                                                           // 124\n      return; // user not logged in, give up                                                                        // 125\n    }                                                                                                               // 126\n    return Chats.insert({ user1Id: u1, user2Id: u2 });                                                              // 127\n  },                                                                                                                // 128\n  sendChat: function sendChat(chatId, chatText) {                                                                   // 129\n    // see if we can find a chat object in the database                                                             //\n    // to which we'll add the message                                                                               //\n    var chat = Chats.findOne({ _id: chatId });                                                                      // 132\n    if (chat) {                                                                                                     // 133\n      // ok - we have a chat to use                                                                                 //\n      var msgs = chat.messages; // pull the messages property                                                       // 134\n      if (!msgs) {                                                                                                  // 135\n        // no messages yet, create a new array                                                                      //\n        msgs = [];                                                                                                  // 136\n      }                                                                                                             // 137\n      // is a good idea to insert data straight from the form                                                       //\n      // (i.e. the user) into the database?? certainly not.                                                         //\n      // push adds the message to the end of the array                                                              //\n      msgs.push({ text: chatText, source: Meteor.userId() });                                                       // 141\n                                                                                                                    //\n      // put the messages array onto the chat object                                                                //\n      chat.messages = msgs;                                                                                         // 144\n      // update the chat object in the database.                                                                    //\n      Chats.update(chat._id, chat);                                                                                 // 146\n    }                                                                                                               // 147\n  }                                                                                                                 // 148\n});                                                                                                                 // 121\n                                                                                                                    //\n// start up script that creates some users for testing                                                              //\n// users have the username 'user1@test.com' .. 'user8@test.com'                                                     //\n// and the password test123                                                                                         //\n                                                                                                                    //\nif (Meteor.isServer) {                                                                                              // 157\n  Meteor.startup(function () {                                                                                      // 158\n    if (!Meteor.users.findOne()) {                                                                                  // 159\n      for (var i = 1; i < 9; i++) {                                                                                 // 160\n        var email = \"user\" + i + \"@test.com\";                                                                       // 161\n        var username = \"user\" + i;                                                                                  // 162\n        var avatar = \"ava\" + i + \".png\";                                                                            // 163\n        console.log(\"creating a user with password 'test123' and username/ email: \" + email);                       // 164\n        Meteor.users.insert({ profile: { username: username, avatar: avatar }, emails: [{ address: email }], services: { password: { \"bcrypt\": \"$2a$10$I3erQ084OiyILTv8ybtQ4ON6wusgPbMZ6.P33zzSDei.BbDL.Q4EO\" } } });\n      }                                                                                                             // 166\n    }                                                                                                               // 167\n  });                                                                                                               // 168\n                                                                                                                    //\n  Meteor.publish(\"chats\", function () {                                                                             // 170\n    return Chats.find({});                                                                                          // 171\n  });                                                                                                               // 172\n                                                                                                                    //\n  Meteor.publish(\"users\", function () {                                                                             // 174\n    return Meteor.users.find({});                                                                                   // 175\n  });                                                                                                               // 176\n}                                                                                                                   // 177\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./shared/methods.js\");\nrequire(\"./minstant.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/minstant.js"],"names":[],"mappings":"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","file":"/app.js","sourcesContent":["Chats = new Mongo.Collection(\"chats\");\n// subscriptions - allow read access to collections \n\n\nif (Meteor.isClient) {\n\n    Meteor.subscribe(\"chats\");\n    Meteor.subscribe(\"users\");\n\n  // set up the main template the the router will use to build pages\n  Router.configure({\n    layoutTemplate: 'ApplicationLayout'\n  });\n  // specify the top level route, the page users see when they arrive at the site\n  Router.route('/', function () {\n    console.log(\"rendering root /\");\n    this.render(\"navbar\", {to:\"header\"});\n    this.render(\"lobby_page\", {to:\"main\"});  \n  });\n\n  // specify a route that allows the current user to chat to another users\n  Router.route('/chat/:_id', function () {\n      // make sure user is logged in before chatting TBD: see iron:router documentation\n      if (!Meteor.user()) {\r\n          console.log(\"you are not logged in!!!\");\r\n          Router.go('/');\r\n         \r\n      }\n\n         \n      // the user they want to chat to has id equal to \n      // the id sent in after /chat/... \n      var otherUserId = this.params._id;\n      // find a chat that has two users that match current user id\n      // and the requested user id\n      var filter = {\r\n          $or: [\n                      { user1Id: Meteor.userId(), user2Id: otherUserId },\n                      { user2Id: Meteor.userId(), user1Id: otherUserId }\n          ]\r\n      };\n      var chat = Chats.findOne(filter);\n      if (!chat) {// no chat matching the filter - need to insert a new one\n          // chatId = Chats.insert({user1Id:Meteor.userId(), user2Id:otherUserId});\n          chatId = Meteor.call(\"addChat\", Meteor.userId(), otherUserId);\r\n      }\n      else {// there is a chat going already - use that. \n          chatId = chat._id;\r\n      }\n      if (chatId) {// looking good, save the id to the session\n          Session.set(\"chatId\", chatId);\r\n      }\n      this.render(\"navbar\", { to: \"header\" });\n      this.render(\"chat_page\", { to: \"main\" });\r\n\n  });\n\n  ///\n  // helper functions \n  /// \n  Template.available_user_list.helpers({\n    users:function(){\n      return Meteor.users.find();\n    }\n  })\n Template.available_user.helpers({\n    getUsername:function(userId){\n      user = Meteor.users.findOne({_id:userId});\n      return user.profile.username;\n    }, \n    isMyUser:function(userId){\n      if (userId == Meteor.userId()){\n        return true;\n      }\n      else {\n        return false;\n      }\n    }\n  })\n\n\n  Template.chat_page.helpers({\n    messages:function(){\n      var chat = Chats.findOne({_id:Session.get(\"chatId\")});\n      return chat.messages;\n    }, \n    other_user:function(){\n      return \"\"\n    }, \n\n  })\n\n  Template.chat_message.helpers({\r\n      userId2Avatar: function (userId) {\r\n          user = Meteor.users.findOne({ _id: userId });\r\n          console.log(\"avatar: \" + user.profile.avatar)\r\n          return user.profile.avatar;\r\n      },\r\n      userId2Name: function (userId) {\r\n          user = Meteor.users.findOne({ _id: userId });\r\n          console.log(\"avatar: \" + user.profile.avatar)\r\n          return user.profile.username;\r\n      }\r\n  })\n\n Template.chat_page.events({\n  // this event fires when the user sends a message on the chat page\n  'submit .js-send-chat':function(event){\n    // stop the form from triggering a page reload\n      event.preventDefault();\n      var chatId =  Session.get(\"chatId\");\n      var chatText =  event.target.chat.value;\n      Meteor.call(\"sendChat\", chatId, chatText);\n      // reset the form\n    event.target.chat.value = \"\";\n  }\n })\n}\n\n// Meteor Methods\nMeteor.methods({\r\n    addChat: function (u1, u2) {\r\n        if (!this.userId) {\r\n            console.log(\"user not logged in!\");\r\n            return; // user not logged in, give up\r\n        }\r\n        return Chats.insert({ user1Id: u1, user2Id: u2 });\r\n    },\r\n    sendChat: function (chatId, chatText) {\r\n        // see if we can find a chat object in the database\n        // to which we'll add the message\n        var chat = Chats.findOne({ _id: chatId });\n        if (chat) {// ok - we have a chat to use\n            var msgs = chat.messages; // pull the messages property\n            if (!msgs) {// no messages yet, create a new array\n                msgs = [];\r\n            }\n            // is a good idea to insert data straight from the form\n            // (i.e. the user) into the database?? certainly not. \n            // push adds the message to the end of the array\n            msgs.push({ text: chatText, source: Meteor.userId() });\n\n            // put the messages array onto the chat object\n            chat.messages = msgs;\n            // update the chat object in the database.\n            Chats.update(chat._id, chat);\r\n        }\r\n    }\r\n})\n\n\n\n// start up script that creates some users for testing\n// users have the username 'user1@test.com' .. 'user8@test.com'\n// and the password test123 \n\nif (Meteor.isServer) {\n  Meteor.startup(function () {\n    if (!Meteor.users.findOne()){\n      for (var i=1;i<9;i++){\n        var email = \"user\"+i+\"@test.com\";\n        var username = \"user\"+i;\n        var avatar = \"ava\"+i+\".png\"\n        console.log(\"creating a user with password 'test123' and username/ email: \"+email);\n        Meteor.users.insert({profile:{username:username, avatar:avatar}, emails:[{address:email}],services:{ password:{\"bcrypt\" : \"$2a$10$I3erQ084OiyILTv8ybtQ4ON6wusgPbMZ6.P33zzSDei.BbDL.Q4EO\"}}});\n      }\n    } \n  });\n\n  Meteor.publish(\"chats\", function () {\r\n      return Chats.find({});\n  });\n\n  Meteor.publish(\"users\", function () {\r\n      return Meteor.users.find({});\n  });\n}\n"]}}]