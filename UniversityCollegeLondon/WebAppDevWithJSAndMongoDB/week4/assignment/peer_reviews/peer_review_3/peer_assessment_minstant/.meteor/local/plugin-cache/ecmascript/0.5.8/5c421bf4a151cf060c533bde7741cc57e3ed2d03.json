{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/minstant.js","filenameRelative":"/minstant.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/minstant.js.map","sourceFileName":"/minstant.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"minstant"},"ignored":false,"code":"Chats = new Mongo.Collection(\"chats\");\n// subscriptions - allow read access to collections\n\nif (Meteor.isClient) {\n\n  Meteor.subscribe(\"chats\");\n  Meteor.subscribe(\"users\");\n\n  // set up the main template the the router will use to build pages\n  Router.configure({\n    layoutTemplate: 'ApplicationLayout'\n  });\n  // specify the top level route, the page users see when they arrive at the site\n  Router.route('/', function () {\n    console.log(\"rendering root /\");\n    this.render(\"navbar\", { to: \"header\" });\n    this.render(\"lobby_page\", { to: \"main\" });\n  });\n\n  // specify a route that allows the current user to chat to another users\n  Router.route('/chat/:_id', function () {\n    // make sure user is logged in before chatting TBD: see iron:router documentation\n    if (!Meteor.user()) {\n      console.log(\"you are not logged in!!!\");\n      Router.go('/');\n    }\n\n    // the user they want to chat to has id equal to\n    // the id sent in after /chat/...\n    var otherUserId = this.params._id;\n    // find a chat that has two users that match current user id\n    // and the requested user id\n    var filter = {\n      $or: [{ user1Id: Meteor.userId(), user2Id: otherUserId }, { user2Id: Meteor.userId(), user1Id: otherUserId }]\n    };\n    var chat = Chats.findOne(filter);\n    if (!chat) {\n      // no chat matching the filter - need to insert a new one\n      // chatId = Chats.insert({user1Id:Meteor.userId(), user2Id:otherUserId});\n      chatId = Meteor.call(\"addChat\", Meteor.userId(), otherUserId);\n    } else {\n      // there is a chat going already - use that.\n      chatId = chat._id;\n    }\n    if (chatId) {\n      // looking good, save the id to the session\n      Session.set(\"chatId\", chatId);\n    }\n    this.render(\"navbar\", { to: \"header\" });\n    this.render(\"chat_page\", { to: \"main\" });\n  });\n\n  ///\n  // helper functions\n  ///\n  Template.available_user_list.helpers({\n    users: function () {\n      function users() {\n        return Meteor.users.find();\n      }\n\n      return users;\n    }()\n  });\n  Template.available_user.helpers({\n    getUsername: function () {\n      function getUsername(userId) {\n        user = Meteor.users.findOne({ _id: userId });\n        return user.profile.username;\n      }\n\n      return getUsername;\n    }(),\n    isMyUser: function () {\n      function isMyUser(userId) {\n        if (userId == Meteor.userId()) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n\n      return isMyUser;\n    }()\n  });\n\n  Template.chat_page.helpers({\n    messages: function () {\n      function messages() {\n        var chat = Chats.findOne({ _id: Session.get(\"chatId\") });\n        return chat.messages;\n      }\n\n      return messages;\n    }(),\n    other_user: function () {\n      function other_user() {\n        return \"\";\n      }\n\n      return other_user;\n    }()\n\n  });\n\n  Template.chat_message.helpers({\n    userId2Avatar: function () {\n      function userId2Avatar(userId) {\n        user = Meteor.users.findOne({ _id: userId });\n        console.log(\"avatar: \" + user.profile.avatar);\n        return user.profile.avatar;\n      }\n\n      return userId2Avatar;\n    }(),\n    userId2Name: function () {\n      function userId2Name(userId) {\n        user = Meteor.users.findOne({ _id: userId });\n        console.log(\"avatar: \" + user.profile.avatar);\n        return user.profile.username;\n      }\n\n      return userId2Name;\n    }()\n  });\n\n  Template.chat_page.events({\n    // this event fires when the user sends a message on the chat page\n    'submit .js-send-chat': function () {\n      function submitJsSendChat(event) {\n        // stop the form from triggering a page reload\n        event.preventDefault();\n        var chatId = Session.get(\"chatId\");\n        var chatText = event.target.chat.value;\n        Meteor.call(\"sendChat\", chatId, chatText);\n        // reset the form\n        event.target.chat.value = \"\";\n      }\n\n      return submitJsSendChat;\n    }()\n  });\n}\n\n// Meteor Methods\nMeteor.methods({\n  addChat: function () {\n    function addChat(u1, u2) {\n      if (!this.userId) {\n        console.log(\"user not logged in!\");\n        return; // user not logged in, give up\n      }\n      return Chats.insert({ user1Id: u1, user2Id: u2 });\n    }\n\n    return addChat;\n  }(),\n  sendChat: function () {\n    function sendChat(chatId, chatText) {\n      // see if we can find a chat object in the database\n      // to which we'll add the message\n      var chat = Chats.findOne({ _id: chatId });\n      if (chat) {\n        // ok - we have a chat to use\n        var msgs = chat.messages; // pull the messages property\n        if (!msgs) {\n          // no messages yet, create a new array\n          msgs = [];\n        }\n        // is a good idea to insert data straight from the form\n        // (i.e. the user) into the database?? certainly not.\n        // push adds the message to the end of the array\n        msgs.push({ text: chatText, source: Meteor.userId() });\n\n        // put the messages array onto the chat object\n        chat.messages = msgs;\n        // update the chat object in the database.\n        Chats.update(chat._id, chat);\n      }\n    }\n\n    return sendChat;\n  }()\n});\n\n// start up script that creates some users for testing\n// users have the username 'user1@test.com' .. 'user8@test.com'\n// and the password test123\n\nif (Meteor.isServer) {\n  Meteor.startup(function () {\n    if (!Meteor.users.findOne()) {\n      for (var i = 1; i < 9; i++) {\n        var email = \"user\" + i + \"@test.com\";\n        var username = \"user\" + i;\n        var avatar = \"ava\" + i + \".png\";\n        console.log(\"creating a user with password 'test123' and username/ email: \" + email);\n        Meteor.users.insert({ profile: { username: username, avatar: avatar }, emails: [{ address: email }], services: { password: { \"bcrypt\": \"$2a$10$I3erQ084OiyILTv8ybtQ4ON6wusgPbMZ6.P33zzSDei.BbDL.Q4EO\" } } });\n      }\n    }\n  });\n\n  Meteor.publish(\"chats\", function () {\n    return Chats.find({});\n  });\n\n  Meteor.publish(\"users\", function () {\n    return Meteor.users.find({});\n  });\n}","ast":null,"map":{"version":3,"sources":["/minstant.js"],"names":[],"mappings":"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","file":"/minstant.js.map","sourcesContent":["Chats = new Mongo.Collection(\"chats\");\n// subscriptions - allow read access to collections \n\n\nif (Meteor.isClient) {\n\n    Meteor.subscribe(\"chats\");\n    Meteor.subscribe(\"users\");\n\n  // set up the main template the the router will use to build pages\n  Router.configure({\n    layoutTemplate: 'ApplicationLayout'\n  });\n  // specify the top level route, the page users see when they arrive at the site\n  Router.route('/', function () {\n    console.log(\"rendering root /\");\n    this.render(\"navbar\", {to:\"header\"});\n    this.render(\"lobby_page\", {to:\"main\"});  \n  });\n\n  // specify a route that allows the current user to chat to another users\n  Router.route('/chat/:_id', function () {\n      // make sure user is logged in before chatting TBD: see iron:router documentation\n      if (!Meteor.user()) {\r\n          console.log(\"you are not logged in!!!\");\r\n          Router.go('/');\r\n         \r\n      }\n\n         \n      // the user they want to chat to has id equal to \n      // the id sent in after /chat/... \n      var otherUserId = this.params._id;\n      // find a chat that has two users that match current user id\n      // and the requested user id\n      var filter = {\r\n          $or: [\n                      { user1Id: Meteor.userId(), user2Id: otherUserId },\n                      { user2Id: Meteor.userId(), user1Id: otherUserId }\n          ]\r\n      };\n      var chat = Chats.findOne(filter);\n      if (!chat) {// no chat matching the filter - need to insert a new one\n          // chatId = Chats.insert({user1Id:Meteor.userId(), user2Id:otherUserId});\n          chatId = Meteor.call(\"addChat\", Meteor.userId(), otherUserId);\r\n      }\n      else {// there is a chat going already - use that. \n          chatId = chat._id;\r\n      }\n      if (chatId) {// looking good, save the id to the session\n          Session.set(\"chatId\", chatId);\r\n      }\n      this.render(\"navbar\", { to: \"header\" });\n      this.render(\"chat_page\", { to: \"main\" });\r\n\n  });\n\n  ///\n  // helper functions \n  /// \n  Template.available_user_list.helpers({\n    users:function(){\n      return Meteor.users.find();\n    }\n  })\n Template.available_user.helpers({\n    getUsername:function(userId){\n      user = Meteor.users.findOne({_id:userId});\n      return user.profile.username;\n    }, \n    isMyUser:function(userId){\n      if (userId == Meteor.userId()){\n        return true;\n      }\n      else {\n        return false;\n      }\n    }\n  })\n\n\n  Template.chat_page.helpers({\n    messages:function(){\n      var chat = Chats.findOne({_id:Session.get(\"chatId\")});\n      return chat.messages;\n    }, \n    other_user:function(){\n      return \"\"\n    }, \n\n  })\n\n  Template.chat_message.helpers({\r\n      userId2Avatar: function (userId) {\r\n          user = Meteor.users.findOne({ _id: userId });\r\n          console.log(\"avatar: \" + user.profile.avatar)\r\n          return user.profile.avatar;\r\n      },\r\n      userId2Name: function (userId) {\r\n          user = Meteor.users.findOne({ _id: userId });\r\n          console.log(\"avatar: \" + user.profile.avatar)\r\n          return user.profile.username;\r\n      }\r\n  })\n\n Template.chat_page.events({\n  // this event fires when the user sends a message on the chat page\n  'submit .js-send-chat':function(event){\n    // stop the form from triggering a page reload\n      event.preventDefault();\n      var chatId =  Session.get(\"chatId\");\n      var chatText =  event.target.chat.value;\n      Meteor.call(\"sendChat\", chatId, chatText);\n      // reset the form\n    event.target.chat.value = \"\";\n  }\n })\n}\n\n// Meteor Methods\nMeteor.methods({\r\n    addChat: function (u1, u2) {\r\n        if (!this.userId) {\r\n            console.log(\"user not logged in!\");\r\n            return; // user not logged in, give up\r\n        }\r\n        return Chats.insert({ user1Id: u1, user2Id: u2 });\r\n    },\r\n    sendChat: function (chatId, chatText) {\r\n        // see if we can find a chat object in the database\n        // to which we'll add the message\n        var chat = Chats.findOne({ _id: chatId });\n        if (chat) {// ok - we have a chat to use\n            var msgs = chat.messages; // pull the messages property\n            if (!msgs) {// no messages yet, create a new array\n                msgs = [];\r\n            }\n            // is a good idea to insert data straight from the form\n            // (i.e. the user) into the database?? certainly not. \n            // push adds the message to the end of the array\n            msgs.push({ text: chatText, source: Meteor.userId() });\n\n            // put the messages array onto the chat object\n            chat.messages = msgs;\n            // update the chat object in the database.\n            Chats.update(chat._id, chat);\r\n        }\r\n    }\r\n})\n\n\n\n// start up script that creates some users for testing\n// users have the username 'user1@test.com' .. 'user8@test.com'\n// and the password test123 \n\nif (Meteor.isServer) {\n  Meteor.startup(function () {\n    if (!Meteor.users.findOne()){\n      for (var i=1;i<9;i++){\n        var email = \"user\"+i+\"@test.com\";\n        var username = \"user\"+i;\n        var avatar = \"ava\"+i+\".png\"\n        console.log(\"creating a user with password 'test123' and username/ email: \"+email);\n        Meteor.users.insert({profile:{username:username, avatar:avatar}, emails:[{address:email}],services:{ password:{\"bcrypt\" : \"$2a$10$I3erQ084OiyILTv8ybtQ4ON6wusgPbMZ6.P33zzSDei.BbDL.Q4EO\"}}});\n      }\n    } \n  });\n\n  Meteor.publish(\"chats\", function () {\r\n      return Chats.find({});\n  });\n\n  Meteor.publish(\"users\", function () {\r\n      return Meteor.users.find({});\n  });\n}\n"]},"hash":"5c421bf4a151cf060c533bde7741cc57e3ed2d03"}
