[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Mongo = Package.mongo.Mongo;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar _ = Package.underscore._;\nvar Template = Package.templating.Template;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar __coffeescriptShare, Emojis;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/lookback_emoji/polyfill.js                                                                     //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */                                                    // 1\nif (!String.fromCodePoint) {                                                                               // 2\n\t(function() {                                                                                             // 3\n\t\tvar defineProperty = (function() {                                                                       // 4\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements                                           // 5\n\t\t\ttry {                                                                                                   // 6\n\t\t\t\tvar object = {};                                                                                       // 7\n\t\t\t\tvar $defineProperty = Object.defineProperty;                                                           // 8\n\t\t\t\tvar result = $defineProperty(object, object, object) && $defineProperty;                               // 9\n\t\t\t} catch(error) {}                                                                                       // 10\n\t\t\treturn result;                                                                                          // 11\n\t\t}());                                                                                                    // 12\n\t\tvar stringFromCharCode = String.fromCharCode;                                                            // 13\n\t\tvar floor = Math.floor;                                                                                  // 14\n\t\tvar fromCodePoint = function(_) {                                                                        // 15\n\t\t\tvar MAX_SIZE = 0x4000;                                                                                  // 16\n\t\t\tvar codeUnits = [];                                                                                     // 17\n\t\t\tvar highSurrogate;                                                                                      // 18\n\t\t\tvar lowSurrogate;                                                                                       // 19\n\t\t\tvar index = -1;                                                                                         // 20\n\t\t\tvar length = arguments.length;                                                                          // 21\n\t\t\tif (!length) {                                                                                          // 22\n\t\t\t\treturn '';                                                                                             // 23\n\t\t\t}                                                                                                       // 24\n\t\t\tvar result = '';                                                                                        // 25\n\t\t\twhile (++index < length) {                                                                              // 26\n\t\t\t\tvar codePoint = Number(arguments[index]);                                                              // 27\n\t\t\t\tif (                                                                                                   // 28\n\t\t\t\t\t!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`                                         // 29\n\t\t\t\t\tcodePoint < 0 || // not a valid Unicode code point                                                    // 30\n\t\t\t\t\tcodePoint > 0x10FFFF || // not a valid Unicode code point                                             // 31\n\t\t\t\t\tfloor(codePoint) != codePoint // not an integer                                                       // 32\n\t\t\t\t) {                                                                                                    // 33\n\t\t\t\t\tthrow RangeError('Invalid code point: ' + codePoint);                                                 // 34\n\t\t\t\t}                                                                                                      // 35\n\t\t\t\tif (codePoint <= 0xFFFF) { // BMP code point                                                           // 36\n\t\t\t\t\tcodeUnits.push(codePoint);                                                                            // 37\n\t\t\t\t} else { // Astral code point; split in surrogate halves                                               // 38\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae                              // 39\n\t\t\t\t\tcodePoint -= 0x10000;                                                                                 // 40\n\t\t\t\t\thighSurrogate = (codePoint >> 10) + 0xD800;                                                           // 41\n\t\t\t\t\tlowSurrogate = (codePoint % 0x400) + 0xDC00;                                                          // 42\n\t\t\t\t\tcodeUnits.push(highSurrogate, lowSurrogate);                                                          // 43\n\t\t\t\t}                                                                                                      // 44\n\t\t\t\tif (index + 1 == length || codeUnits.length > MAX_SIZE) {                                              // 45\n\t\t\t\t\tresult += stringFromCharCode.apply(null, codeUnits);                                                  // 46\n\t\t\t\t\tcodeUnits.length = 0;                                                                                 // 47\n\t\t\t\t}                                                                                                      // 48\n\t\t\t}                                                                                                       // 49\n\t\t\treturn result;                                                                                          // 50\n\t\t};                                                                                                       // 51\n\t\tif (defineProperty) {                                                                                    // 52\n\t\t\tdefineProperty(String, 'fromCodePoint', {                                                               // 53\n\t\t\t\t'value': fromCodePoint,                                                                                // 54\n\t\t\t\t'configurable': true,                                                                                  // 55\n\t\t\t\t'writable': true                                                                                       // 56\n\t\t\t});                                                                                                     // 57\n\t\t} else {                                                                                                 // 58\n\t\t\tString.fromCodePoint = fromCodePoint;                                                                   // 59\n\t\t}                                                                                                        // 60\n\t}());                                                                                                     // 61\n}                                                                                                          // 62\n                                                                                                           // 63\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/lookback_emoji/emojis.coffee.js                                                                //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar imagePath, isCustom, parse, shortnameRegexp, smileyRegexp, toCodePoints, toHex, toImage, wrap;        \n                                                                                                           //\nshortnameRegexp = /\\B:([\\w+-]+):/g;                                                                        // 3\n                                                                                                           //\nsmileyRegexp = /\\B([:;=#%XB8><](-|\\.)?[']?[D|$S3XE<>OP)(\\]\\/\\\\]|-[_\\.]-|<\\/?3)/g;                          // 3\n                                                                                                           //\ntoCodePoints = function(str) {                                                                             // 3\n  var c1, c2, chars, i;                                                                                    // 9\n  chars = [];                                                                                              // 9\n  i = 0;                                                                                                   // 9\n  while (i < str.length) {                                                                                 // 12\n    c1 = str.charCodeAt(i);                                                                                // 13\n    if (c1 >= 0xD800 && c1 < 0xDC00 && i + 1 < str.length) {                                               // 15\n      c2 = str.charCodeAt(i + 1);                                                                          // 16\n      if (c2 >= 0xDC00 && c2 < 0xE000) {                                                                   // 17\n        chars.push(0x10000 + ((c1 - 0xD800) << 10) + (c2 - 0xDC00));                                       // 18\n        i += 2;                                                                                            // 18\n        continue;                                                                                          // 20\n      }                                                                                                    //\n    }                                                                                                      //\n    chars.push(c1);                                                                                        // 13\n    i++;                                                                                                   // 13\n  }                                                                                                        //\n  return chars;                                                                                            // 25\n};                                                                                                         // 8\n                                                                                                           //\nisCustom = function(emoji) {                                                                               // 3\n  return emoji && typeof emoji.emoji === 'undefined';                                                      //\n};                                                                                                         // 27\n                                                                                                           //\ntoHex = function(str) {                                                                                    // 3\n  if (!str) {                                                                                              // 31\n    return '';                                                                                             // 31\n  }                                                                                                        //\n  return toCodePoints(str).map(function(char) {                                                            //\n    return char.toString(16);                                                                              //\n  }).join('-');                                                                                            //\n};                                                                                                         // 30\n                                                                                                           //\nimagePath = function(emoji) {                                                                              // 3\n  if (isCustom(emoji)) {                                                                                   // 38\n    return emoji.alias + \".png\";                                                                           //\n  } else {                                                                                                 //\n    return (toHex(emoji.emoji).replace(/-fe0f\\b/, '')) + \".png\";                                           //\n  }                                                                                                        //\n};                                                                                                         // 37\n                                                                                                           //\ntoImage = function(emoji) {                                                                                // 3\n  return \"<img src='\" + emoji.path + \"' title='\" + emoji.alias + \"' alt='\" + (emoji.emoji || emoji.alias) + \"' class='emoji'>\";\n};                                                                                                         // 43\n                                                                                                           //\nwrap = function(emoji) {                                                                                   // 3\n  return \"<span class='emoji' title='\" + emoji.alias + \"'>\" + emoji.emoji + \"</span>\";                     //\n};                                                                                                         // 46\n                                                                                                           //\nEmojis = new Mongo.Collection('emojis', {                                                                  // 3\n  transform: function(emoji) {                                                                             // 50\n    emoji.path = Emojis.basePath() + '/' + imagePath(emoji);                                               // 54\n    emoji.toHTML = function() {                                                                            // 54\n      if (!Emojis.isSupported || isCustom(this) || Emojis.useImages) {                                     // 57\n        return Emojis.imageTemplate(this);                                                                 //\n      } else {                                                                                             //\n        return Emojis.template(this);                                                                      //\n      }                                                                                                    //\n    };                                                                                                     //\n    emoji.toHex = function() {                                                                             // 54\n      return toHex(this.emoji);                                                                            //\n    };                                                                                                     //\n    return emoji;                                                                                          // 62\n  }                                                                                                        //\n});                                                                                                        //\n                                                                                                           //\nif (Meteor.isServer) {                                                                                     // 64\n  Emojis._ensureIndex({                                                                                    // 65\n    alias: 1                                                                                               // 65\n  });                                                                                                      //\n  Emojis._ensureIndex({                                                                                    // 65\n    ascii: 1                                                                                               // 66\n  });                                                                                                      //\n}                                                                                                          //\n                                                                                                           //\nparse = function(text, fn) {                                                                               // 3\n  check(text, String);                                                                                     // 76\n  check(fn, Match.Optional(Function));                                                                     // 76\n  return text.replace(smileyRegexp, function(match, smiley, nose) {                                        //\n    var emoji;                                                                                             // 81\n    smiley = smiley.toUpperCase();                                                                         // 81\n    smiley = nose ? smiley.replace(/:-/g, ':') : smiley;                                                   // 81\n    emoji = Emojis.findOne({                                                                               // 81\n      ascii: smiley                                                                                        // 84\n    });                                                                                                    //\n    if (emoji) {                                                                                           // 86\n      if (fn) {                                                                                            // 87\n        return fn(emoji);                                                                                  //\n      } else {                                                                                             //\n        return emoji;                                                                                      //\n      }                                                                                                    //\n    } else {                                                                                               //\n      return match;                                                                                        // 89\n    }                                                                                                      //\n  }).replace(shortnameRegexp, function(match, alias) {                                                     //\n    var emoji;                                                                                             // 92\n    emoji = Emojis.findOne({                                                                               // 92\n      alias: alias                                                                                         // 92\n    });                                                                                                    //\n    if (emoji) {                                                                                           // 94\n      if (fn) {                                                                                            // 95\n        return fn(emoji);                                                                                  //\n      } else {                                                                                             //\n        return emoji;                                                                                      //\n      }                                                                                                    //\n    } else {                                                                                               //\n      return match;                                                                                        // 97\n    }                                                                                                      //\n  });                                                                                                      //\n};                                                                                                         // 75\n                                                                                                           //\nEmojis._basePath = '/images/emojis';                                                                       // 3\n                                                                                                           //\nEmojis.setBasePath = function(path) {                                                                      // 3\n  check(path, String);                                                                                     // 102\n  return Emojis._basePath = path.replace(/\\/+$/, '');                                                      //\n};                                                                                                         // 101\n                                                                                                           //\nEmojis.basePath = function() {                                                                             // 3\n  return Emojis._basePath;                                                                                 //\n};                                                                                                         // 107\n                                                                                                           //\nEmojis.template = wrap;                                                                                    // 3\n                                                                                                           //\nEmojis.imageTemplate = toImage;                                                                            // 3\n                                                                                                           //\nEmojis.toUnicode = function(text) {                                                                        // 3\n  return parse(text, function(emoji) {                                                                     //\n    return emoji.emoji || '';                                                                              //\n  });                                                                                                      //\n};                                                                                                         // 116\n                                                                                                           //\nEmojis.parse = function(text) {                                                                            // 3\n  return parse(text, function(emoji) {                                                                     //\n    return emoji.toHTML();                                                                                 //\n  });                                                                                                      //\n};                                                                                                         // 119\n                                                                                                           //\nEmojis.isSupported = (function() {                                                                         // 3\n  var canvas, context, smile;                                                                              // 124\n  if (Meteor.isServer) {                                                                                   // 124\n    return true;                                                                                           // 125\n  }                                                                                                        //\n  canvas = document.createElement('canvas');                                                               // 124\n  if (!canvas.getContext) {                                                                                // 128\n    return;                                                                                                // 129\n  }                                                                                                        //\n  context = canvas.getContext('2d');                                                                       // 124\n  if (typeof context.fillText !== 'function') {                                                            // 133\n    return;                                                                                                // 134\n  }                                                                                                        //\n  smile = String.fromCodePoint(0x1F604);                                                                   // 124\n  context.textBaseline = \"top\";                                                                            // 124\n  context.font = \"32px Arial\";                                                                             // 124\n  context.fillText(smile, 0, 0);                                                                           // 124\n  return context.getImageData(16, 16, 1, 1).data[0] !== 0;                                                 //\n})();                                                                                                      // 123\n                                                                                                           //\nif (Meteor.isClient) {                                                                                     // 145\n  Emojis.useImages || (Emojis.useImages = !Emojis.isSupported);                                            // 146\n} else {                                                                                                   //\n  Emojis.useImages || (Emojis.useImages = false);                                                          // 148\n}                                                                                                          //\n                                                                                                           //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/lookback_emoji/template.coffee.js                                                              //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar tmpl;                                                                                                  // 1\n                                                                                                           //\ntmpl = new Template('Template.emoji', function() {                                                         // 1\n  var content;                                                                                             // 2\n  content = '';                                                                                            // 2\n  if (this.templateContentBlock) {                                                                         // 4\n    content = Blaze._toText(this.templateContentBlock, HTML.TEXTMODE.STRING);                              // 6\n  } else {                                                                                                 //\n    content = this.parentView.dataVar.get();                                                               // 9\n  }                                                                                                        //\n  return HTML.Raw(Emojis.parse(content));                                                                  // 11\n});                                                                                                        // 1\n                                                                                                           //\nTemplate.registerHelper('emoji', tmpl);                                                                    // 1\n                                                                                                           //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['lookback:emoji'] = {}, {\n  Emojis: Emojis\n});\n\n})();\n","servePath":"/packages/lookback_emoji.js","sourceMap":{"version":3,"sources":["/packages/lookback_emoji/polyfill.js","/packages/lookback_emoji/emojis.coffee","/packages/lookback_emoji/template.coffee"],"names":[],"mappings":"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","file":"/packages/lookback_emoji.js","sourcesContent":["/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */\nif (!String.fromCodePoint) {\n\t(function() {\n\t\tvar defineProperty = (function() {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\ttry {\n\t\t\t\tvar object = {};\n\t\t\t\tvar $defineProperty = Object.defineProperty;\n\t\t\t\tvar result = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t} catch(error) {}\n\t\t\treturn result;\n\t\t}());\n\t\tvar stringFromCharCode = String.fromCharCode;\n\t\tvar floor = Math.floor;\n\t\tvar fromCodePoint = function(_) {\n\t\t\tvar MAX_SIZE = 0x4000;\n\t\t\tvar codeUnits = [];\n\t\t\tvar highSurrogate;\n\t\t\tvar lowSurrogate;\n\t\t\tvar index = -1;\n\t\t\tvar length = arguments.length;\n\t\t\tif (!length) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tvar result = '';\n\t\t\twhile (++index < length) {\n\t\t\t\tvar codePoint = Number(arguments[index]);\n\t\t\t\tif (\n\t\t\t\t\t!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n\t\t\t\t\tcodePoint < 0 || // not a valid Unicode code point\n\t\t\t\t\tcodePoint > 0x10FFFF || // not a valid Unicode code point\n\t\t\t\t\tfloor(codePoint) != codePoint // not an integer\n\t\t\t\t) {\n\t\t\t\t\tthrow RangeError('Invalid code point: ' + codePoint);\n\t\t\t\t}\n\t\t\t\tif (codePoint <= 0xFFFF) { // BMP code point\n\t\t\t\t\tcodeUnits.push(codePoint);\n\t\t\t\t} else { // Astral code point; split in surrogate halves\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\tcodePoint -= 0x10000;\n\t\t\t\t\thighSurrogate = (codePoint >> 10) + 0xD800;\n\t\t\t\t\tlowSurrogate = (codePoint % 0x400) + 0xDC00;\n\t\t\t\t\tcodeUnits.push(highSurrogate, lowSurrogate);\n\t\t\t\t}\n\t\t\t\tif (index + 1 == length || codeUnits.length > MAX_SIZE) {\n\t\t\t\t\tresult += stringFromCharCode.apply(null, codeUnits);\n\t\t\t\t\tcodeUnits.length = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\tif (defineProperty) {\n\t\t\tdefineProperty(String, 'fromCodePoint', {\n\t\t\t\t'value': fromCodePoint,\n\t\t\t\t'configurable': true,\n\t\t\t\t'writable': true\n\t\t\t});\n\t\t} else {\n\t\t\tString.fromCodePoint = fromCodePoint;\n\t\t}\n\t}());\n}\n","# Force whitespace (\\s) between text and emoji/smiley, for safety. Otherwise\n# this guy will collide with URLs like http://lolol.com (see the ':/' in there? :D).\nshortnameRegexp = /\\B:([\\w+-]+):/g\nsmileyRegexp = /\\B([:;=#%XB8><](-|\\.)?[']?[D|$S3XE<>OP)(\\]/\\\\]|-[_\\.]-|<\\/?3)/g\n\n# Emulation of Ruby's String#codepoints. Takes Javascript's flawed\n# unicode implementation into consideration regarding surrogate pairs.\ntoCodePoints = (str) ->\n    chars = []\n    i = 0\n\n    while i < str.length\n        c1 = str.charCodeAt(i)\n\n        if c1 >= 0xD800 and c1 < 0xDC00 and i+1 < str.length\n            c2 = str.charCodeAt(i+1)\n            if c2 >= 0xDC00 && c2 < 0xE000\n                chars.push(0x10000 + ((c1-0xD800)<<10) + (c2-0xDC00))\n                i += 2\n                continue\n\n        chars.push(c1)\n        i++\n\n    return chars\n\nisCustom = (emoji) ->\n  emoji and typeof emoji.emoji is 'undefined'\n\ntoHex = (str) ->\n  return '' if not str\n\n  toCodePoints(str).map (char) ->\n    char.toString(16)\n  .join('-')\n\nimagePath = (emoji) ->\n  if isCustom(emoji)\n    \"#{emoji.alias}.png\"\n  else\n    \"#{toHex(emoji.emoji).replace(/-fe0f\\b/, '')}.png\"\n\ntoImage = (emoji) ->\n  \"<img src='#{emoji.path}' title='#{emoji.alias}' alt='#{emoji.emoji or emoji.alias}' class='emoji'>\"\n\nwrap = (emoji) ->\n  \"<span class='emoji' title='#{emoji.alias}'>#{emoji.emoji}</span>\"\n\nEmojis = new Mongo.Collection 'emojis',\n  transform: (emoji) ->\n\n    # Shortcut helpers\n\n    emoji.path = Emojis.basePath() + '/' + imagePath(emoji)\n\n    emoji.toHTML = ->\n      if !Emojis.isSupported or isCustom(this) or Emojis.useImages then Emojis.imageTemplate(this) else Emojis.template(this)\n\n    emoji.toHex = ->\n      toHex(@emoji)\n\n    return emoji\n\nif Meteor.isServer\n  Emojis._ensureIndex(alias: 1)\n  Emojis._ensureIndex(ascii: 1)\n\n\n# General parse function.\n#\n# Parses `text` and returns emoji objects from :shortnames: and ASCII\n# smileys (:D).\n#\n# Optionally takes a function which can transform the return value.\nparse = (text, fn) ->\n  check text, String\n  check fn, Match.Optional(Function)\n\n  text\n  .replace smileyRegexp, (match, smiley, nose) ->\n    smiley = smiley.toUpperCase()\n    smiley = if nose then smiley.replace(/:-/g, ':') else smiley\n\n    emoji = Emojis.findOne(ascii: smiley)\n\n    if emoji\n      return if fn then fn(emoji) else emoji\n    else\n      return match\n\n  .replace shortnameRegexp, (match, alias) ->\n    emoji = Emojis.findOne(alias: alias)\n\n    if emoji\n      return if fn then fn(emoji) else emoji\n    else\n      return match\n\nEmojis._basePath = '/images/emojis'\n\nEmojis.setBasePath = (path) ->\n  check path, String\n\n  # Remove trailing slashes.\n  Emojis._basePath = path.replace(/\\/+$/, '')\n\nEmojis.basePath = ->\n  Emojis._basePath\n\n# Overridable\n\nEmojis.template = wrap\nEmojis.imageTemplate = toImage\n\n# Replace emoji shortnames with their unicode version.\nEmojis.toUnicode = (text) ->\n  parse text, (emoji) -> emoji.emoji || ''\n\nEmojis.parse = (text) ->\n  parse text, (emoji) -> emoji.toHTML()\n\n# From https://gist.github.com/mwunsch/4710561\nEmojis.isSupported = do ->\n  if Meteor.isServer\n    return true\n\n  canvas = document.createElement('canvas')\n  if !canvas.getContext\n    return\n\n  context = canvas.getContext('2d')\n\n  if typeof context.fillText isnt 'function'\n    return\n\n  # :smile: String.fromCharCode(55357) + String.fromCharCode(56835)\n  smile = String.fromCodePoint(0x1F604)\n\n  context.textBaseline = \"top\"\n  context.font = \"32px Arial\"\n  context.fillText(smile, 0, 0)\n\n  context.getImageData(16, 16, 1, 1).data[0] isnt 0\n\nif Meteor.isClient\n  Emojis.useImages ||= !Emojis.isSupported\nelse\n  Emojis.useImages ||= false\n","tmpl = new Template 'Template.emoji', ->\n  content = ''\n\n  if @templateContentBlock\n    # this is for the block usage eg: {{#emoji}}:smile:{{/emoji}}\n    content = Blaze._toText(@templateContentBlock, HTML.TEXTMODE.STRING)\n  else\n    # this is for the direct usage eg: {{> emoji ':blush:'}}\n    content = @parentView.dataVar.get()\n  \n  return HTML.Raw(Emojis.parse(content))\n\nTemplate.registerHelper 'emoji', tmpl\n"]}}]