{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar imagePath, isCustom, parse, shortnameRegexp, smileyRegexp, toCodePoints, toHex, toImage, wrap;        \n\nshortnameRegexp = /\\B:([\\w+-]+):/g;\n\nsmileyRegexp = /\\B([:;=#%XB8><](-|\\.)?[']?[D|$S3XE<>OP)(\\]\\/\\\\]|-[_\\.]-|<\\/?3)/g;\n\ntoCodePoints = function(str) {\n  var c1, c2, chars, i;\n  chars = [];\n  i = 0;\n  while (i < str.length) {\n    c1 = str.charCodeAt(i);\n    if (c1 >= 0xD800 && c1 < 0xDC00 && i + 1 < str.length) {\n      c2 = str.charCodeAt(i + 1);\n      if (c2 >= 0xDC00 && c2 < 0xE000) {\n        chars.push(0x10000 + ((c1 - 0xD800) << 10) + (c2 - 0xDC00));\n        i += 2;\n        continue;\n      }\n    }\n    chars.push(c1);\n    i++;\n  }\n  return chars;\n};\n\nisCustom = function(emoji) {\n  return emoji && typeof emoji.emoji === 'undefined';\n};\n\ntoHex = function(str) {\n  if (!str) {\n    return '';\n  }\n  return toCodePoints(str).map(function(char) {\n    return char.toString(16);\n  }).join('-');\n};\n\nimagePath = function(emoji) {\n  if (isCustom(emoji)) {\n    return emoji.alias + \".png\";\n  } else {\n    return (toHex(emoji.emoji).replace(/-fe0f\\b/, '')) + \".png\";\n  }\n};\n\ntoImage = function(emoji) {\n  return \"<img src='\" + emoji.path + \"' title='\" + emoji.alias + \"' alt='\" + (emoji.emoji || emoji.alias) + \"' class='emoji'>\";\n};\n\nwrap = function(emoji) {\n  return \"<span class='emoji' title='\" + emoji.alias + \"'>\" + emoji.emoji + \"</span>\";\n};\n\nEmojis = new Mongo.Collection('emojis', {\n  transform: function(emoji) {\n    emoji.path = Emojis.basePath() + '/' + imagePath(emoji);\n    emoji.toHTML = function() {\n      if (!Emojis.isSupported || isCustom(this) || Emojis.useImages) {\n        return Emojis.imageTemplate(this);\n      } else {\n        return Emojis.template(this);\n      }\n    };\n    emoji.toHex = function() {\n      return toHex(this.emoji);\n    };\n    return emoji;\n  }\n});\n\nif (Meteor.isServer) {\n  Emojis._ensureIndex({\n    alias: 1\n  });\n  Emojis._ensureIndex({\n    ascii: 1\n  });\n}\n\nparse = function(text, fn) {\n  check(text, String);\n  check(fn, Match.Optional(Function));\n  return text.replace(smileyRegexp, function(match, smiley, nose) {\n    var emoji;\n    smiley = smiley.toUpperCase();\n    smiley = nose ? smiley.replace(/:-/g, ':') : smiley;\n    emoji = Emojis.findOne({\n      ascii: smiley\n    });\n    if (emoji) {\n      if (fn) {\n        return fn(emoji);\n      } else {\n        return emoji;\n      }\n    } else {\n      return match;\n    }\n  }).replace(shortnameRegexp, function(match, alias) {\n    var emoji;\n    emoji = Emojis.findOne({\n      alias: alias\n    });\n    if (emoji) {\n      if (fn) {\n        return fn(emoji);\n      } else {\n        return emoji;\n      }\n    } else {\n      return match;\n    }\n  });\n};\n\nEmojis._basePath = '/images/emojis';\n\nEmojis.setBasePath = function(path) {\n  check(path, String);\n  return Emojis._basePath = path.replace(/\\/+$/, '');\n};\n\nEmojis.basePath = function() {\n  return Emojis._basePath;\n};\n\nEmojis.template = wrap;\n\nEmojis.imageTemplate = toImage;\n\nEmojis.toUnicode = function(text) {\n  return parse(text, function(emoji) {\n    return emoji.emoji || '';\n  });\n};\n\nEmojis.parse = function(text) {\n  return parse(text, function(emoji) {\n    return emoji.toHTML();\n  });\n};\n\nEmojis.isSupported = (function() {\n  var canvas, context, smile;\n  if (Meteor.isServer) {\n    return true;\n  }\n  canvas = document.createElement('canvas');\n  if (!canvas.getContext) {\n    return;\n  }\n  context = canvas.getContext('2d');\n  if (typeof context.fillText !== 'function') {\n    return;\n  }\n  smile = String.fromCodePoint(0x1F604);\n  context.textBaseline = \"top\";\n  context.font = \"32px Arial\";\n  context.fillText(smile, 0, 0);\n  return context.getImageData(16, 16, 1, 1).data[0] !== 0;\n})();\n\nif (Meteor.isClient) {\n  Emojis.useImages || (Emojis.useImages = !Emojis.isSupported);\n} else {\n  Emojis.useImages || (Emojis.useImages = false);\n}\n","sourceMap":{"version":3,"file":"/emojis.coffee.js","sourceRoot":"","sources":["/packages/lookback_emoji/emojis.coffee"],"names":[],"mappings":"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","sourcesContent":["# Force whitespace (\\s) between text and emoji/smiley, for safety. Otherwise\n# this guy will collide with URLs like http://lolol.com (see the ':/' in there? :D).\nshortnameRegexp = /\\B:([\\w+-]+):/g\nsmileyRegexp = /\\B([:;=#%XB8><](-|\\.)?[']?[D|$S3XE<>OP)(\\]/\\\\]|-[_\\.]-|<\\/?3)/g\n\n# Emulation of Ruby's String#codepoints. Takes Javascript's flawed\n# unicode implementation into consideration regarding surrogate pairs.\ntoCodePoints = (str) ->\n    chars = []\n    i = 0\n\n    while i < str.length\n        c1 = str.charCodeAt(i)\n\n        if c1 >= 0xD800 and c1 < 0xDC00 and i+1 < str.length\n            c2 = str.charCodeAt(i+1)\n            if c2 >= 0xDC00 && c2 < 0xE000\n                chars.push(0x10000 + ((c1-0xD800)<<10) + (c2-0xDC00))\n                i += 2\n                continue\n\n        chars.push(c1)\n        i++\n\n    return chars\n\nisCustom = (emoji) ->\n  emoji and typeof emoji.emoji is 'undefined'\n\ntoHex = (str) ->\n  return '' if not str\n\n  toCodePoints(str).map (char) ->\n    char.toString(16)\n  .join('-')\n\nimagePath = (emoji) ->\n  if isCustom(emoji)\n    \"#{emoji.alias}.png\"\n  else\n    \"#{toHex(emoji.emoji).replace(/-fe0f\\b/, '')}.png\"\n\ntoImage = (emoji) ->\n  \"<img src='#{emoji.path}' title='#{emoji.alias}' alt='#{emoji.emoji or emoji.alias}' class='emoji'>\"\n\nwrap = (emoji) ->\n  \"<span class='emoji' title='#{emoji.alias}'>#{emoji.emoji}</span>\"\n\nEmojis = new Mongo.Collection 'emojis',\n  transform: (emoji) ->\n\n    # Shortcut helpers\n\n    emoji.path = Emojis.basePath() + '/' + imagePath(emoji)\n\n    emoji.toHTML = ->\n      if !Emojis.isSupported or isCustom(this) or Emojis.useImages then Emojis.imageTemplate(this) else Emojis.template(this)\n\n    emoji.toHex = ->\n      toHex(@emoji)\n\n    return emoji\n\nif Meteor.isServer\n  Emojis._ensureIndex(alias: 1)\n  Emojis._ensureIndex(ascii: 1)\n\n\n# General parse function.\n#\n# Parses `text` and returns emoji objects from :shortnames: and ASCII\n# smileys (:D).\n#\n# Optionally takes a function which can transform the return value.\nparse = (text, fn) ->\n  check text, String\n  check fn, Match.Optional(Function)\n\n  text\n  .replace smileyRegexp, (match, smiley, nose) ->\n    smiley = smiley.toUpperCase()\n    smiley = if nose then smiley.replace(/:-/g, ':') else smiley\n\n    emoji = Emojis.findOne(ascii: smiley)\n\n    if emoji\n      return if fn then fn(emoji) else emoji\n    else\n      return match\n\n  .replace shortnameRegexp, (match, alias) ->\n    emoji = Emojis.findOne(alias: alias)\n\n    if emoji\n      return if fn then fn(emoji) else emoji\n    else\n      return match\n\nEmojis._basePath = '/images/emojis'\n\nEmojis.setBasePath = (path) ->\n  check path, String\n\n  # Remove trailing slashes.\n  Emojis._basePath = path.replace(/\\/+$/, '')\n\nEmojis.basePath = ->\n  Emojis._basePath\n\n# Overridable\n\nEmojis.template = wrap\nEmojis.imageTemplate = toImage\n\n# Replace emoji shortnames with their unicode version.\nEmojis.toUnicode = (text) ->\n  parse text, (emoji) -> emoji.emoji || ''\n\nEmojis.parse = (text) ->\n  parse text, (emoji) -> emoji.toHTML()\n\n# From https://gist.github.com/mwunsch/4710561\nEmojis.isSupported = do ->\n  if Meteor.isServer\n    return true\n\n  canvas = document.createElement('canvas')\n  if !canvas.getContext\n    return\n\n  context = canvas.getContext('2d')\n\n  if typeof context.fillText isnt 'function'\n    return\n\n  # :smile: String.fromCharCode(55357) + String.fromCharCode(56835)\n  smile = String.fromCodePoint(0x1F604)\n\n  context.textBaseline = \"top\"\n  context.font = \"32px Arial\"\n  context.fillText(smile, 0, 0)\n\n  context.getImageData(16, 16, 1, 1).data[0] isnt 0\n\nif Meteor.isClient\n  Emojis.useImages ||= !Emojis.isSupported\nelse\n  Emojis.useImages ||= false\n"]}}