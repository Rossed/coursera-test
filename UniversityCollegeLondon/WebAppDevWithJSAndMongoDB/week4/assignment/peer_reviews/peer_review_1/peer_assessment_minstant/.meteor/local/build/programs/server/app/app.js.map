{"version":3,"sources":["meteor://ðŸ’»app/lib/collections.js","meteor://ðŸ’»app/lib/methods.js","meteor://ðŸ’»app/lib/routes.js","meteor://ðŸ’»app/server/startup.js"],"names":[],"mappings":";;;;;;;;AAAA,QAAQ,IAAI,MAAM,UAAN,CAAiB,OAArB,CAAR;;AAEA,IAAI,OAAO,QAAP,EAAiB;;AAEnB,SAAO,OAAP,CAAe,OAAf,EAAwB,YAAU;AAChC,WAAO,MAAM,IAAN,CAAW,EAAC,KAAI,CACrB,EAAC,SAAQ,KAAK,MAAL,EADY,EAErB,EAAC,SAAQ,KAAK,MAAL,EAFY,CAAJ,EAAZ,CAAP,CADgC;GAAV,CAAxB,CAFmB;;AASnB,SAAO,OAAP,CAAe,OAAf,EAAwB,YAAU;AAChC,WAAO,OAAO,KAAP,CAAa,IAAb,EAAP,CADgC;GAAV,CAAxB,CATmB;;AAanB,SAAO,OAAP,CAAe,QAAf,EAAyB,YAAW;;;AAGlC,WAAO,OAAO,IAAP,EAAP,CAHkC;GAAX,CAAzB,CAbmB;CAArB;;AAoBA,IAAI,OAAO,QAAP,EAAiB;AACnB,SAAO,SAAP,CAAiB,OAAjB,EADmB;AAEnB,SAAO,SAAP,CAAiB,OAAjB,EAFmB;AAGnB,SAAO,SAAP,CAAiB,QAAjB,EAHmB;CAArB,6F;;;;;;;;;;;ACtBA,OAAO,OAAP,CAAe;AACb;AAAW,qBAAU,WAAV,EAAuB;;;;AAIhC,UAAI,KAAK,MAAL,EAAa;AACf,YAAI,SAAS,EAAC,KAAI,CAChB,EAAC,SAAQ,KAAK,MAAL,EAAa,SAAQ,WAAR,EADN,EAEhB,EAAC,SAAQ,KAAK,MAAL,EAAa,SAAQ,WAAR,EAFN,CAAJ,EAAV,CADW;AAKf,YAAI,OAAO,MAAM,OAAN,CAAc,MAAd,CAAP,CALW;AAMf,YAAI,CAAC,IAAD,EAAM;;AACR,iBAAO,MAAM,MAAN,CAAa,EAAC,SAAQ,OAAO,MAAP,EAAR,EAAyB,SAAQ,WAAR,EAAvC,CAAP,CADQ;SAAV,MAGK;;AACH,iBAAO,KAAK,GAAL,CADJ;SAHL;OANF;KAJS;;;KAAX;AAkBA;AAAe,yBAAS,MAAT,EAAiB,OAAjB,EAA0B;AACvC,UAAI,KAAK,MAAL,EAAa;AACf,YAAI,OAAO,MAAM,OAAN,CAAc,EAAC,KAAI,MAAJ,EAAf,CAAP,CADW;AAEf,YAAI,IAAJ,EAAS;;AACP,cAAI,OAAO,KAAK,QAAL;AADJ,cAEH,CAAC,IAAD,EAAM;;AACR,mBAAO,EAAP,CADQ;WAAV;;;;AAFO,cAQP,CAAK,IAAL,CAAU;AACR,kBAAM,OAAN;AACA,oBAAQ,KAAK,MAAL;AACR,uBAAW,IAAI,IAAJ,EAAX;WAHF;;AARO,cAcP,CAAK,QAAL,GAAgB,IAAhB;;AAdO,eAgBP,CAAM,MAAN,CAAa,KAAK,GAAL,EAAU,IAAvB,EAhBO;SAAT;OAFF;KADa;;;KAAf;CAnBF,6F;;;;;;;;;;;;ACCA,OAAO,SAAP,CAAiB;AACf,kBAAgB,mBAAhB;CADF;;AAIA,OAAO,KAAP,CAAa,GAAb,EAAkB,YAAY;AAC5B,OAAK,MAAL,CAAY,QAAZ,EAAsB,EAAC,IAAG,QAAH,EAAvB,EAD4B;AAE5B,OAAK,MAAL,CAAY,YAAZ,EAA0B,EAAC,IAAG,MAAH,EAA3B,EAF4B;CAAZ,CAAlB;;;AAMA,OAAO,KAAP,CAAa,YAAb,EAA2B,YAAY;AACrC,SAAO,IAAP,CAAY,SAAZ,EAAuB,KAAK,MAAL,CAAY,GAAZ,EAAiB,UAAS,KAAT,EAAgB,MAAhB,EAAuB;AAC7D,YAAQ,GAAR,CAAY,QAAZ,EAAqB,MAArB,EAD6D;GAAvB,CAAxC;;;;;;;;;;;;;;;;;;;;AADqC,MAuBrC,CAAK,MAAL,CAAY,QAAZ,EAAsB,EAAC,IAAG,QAAH,EAAvB,EAvBqC;AAwBrC,OAAK,MAAL,CAAY,WAAZ,EAAyB,EAAC,IAAG,MAAH,EAA1B,EAxBqC;CAAZ,CAA3B;AA0BA,OAAO,KAAP,CAAa,QAAb,EAAuB,YAAY;AACjC,OAAK,MAAL,CAAY,QAAZ,EAAsB,EAAC,IAAG,QAAH,EAAvB,EADiC;AAEjC,OAAK,MAAL,CAAY,OAAZ,EAAqB,EAAC,IAAG,MAAH,EAAtB,EAFiC;CAAZ,CAAvB,4F;;;;;;;;;;;;;;AClCA,OAAO,OAAP,CAAe,YAAY;AACzB,MAAI,CAAC,OAAO,KAAP,CAAa,OAAb,EAAD,EAAwB;AAC1B,SAAK,IAAI,IAAE,CAAF,EAAI,IAAE,CAAF,EAAI,GAAjB,EAAqB;AACnB,UAAI,QAAQ,SAAO,CAAP,GAAS,WAAT,CADO;AAEnB,UAAI,WAAW,SAAO,CAAP,CAFI;AAGnB,UAAI,SAAS,QAAM,CAAN,GAAQ,MAAR,CAHM;AAInB,cAAQ,GAAR,CAAY,kEAAgE,KAAhE,CAAZ,CAJmB;AAKnB,aAAO,KAAP,CAAa,MAAb,CAAoB,EAAC,SAAQ,EAAC,UAAS,QAAT,EAAmB,QAAO,MAAP,EAA5B,EAA4C,QAAO,CAAC,EAAC,SAAQ,KAAR,EAAF,CAAP,EAAyB,UAAS,EAAE,UAAS,EAAC,UAAW,8DAAX,EAAV,EAAX,EAA1F,EALmB;KAArB;GADF;CADa,CAAf,4F","file":"/app.js","sourcesContent":["Chats = new Mongo.Collection(\"chats\");\n\nif (Meteor.isServer) {\n\n  Meteor.publish(\"chats\", function(){\n    return Chats.find({$or:[\n      {user1Id:this.userId},\n      {user2Id:this.userId}\n    ]});\n  });\n\n  Meteor.publish(\"users\", function(){\n    return Meteor.users.find()\n  });\n\n  Meteor.publish('emojis', function() {\n    // Here you can choose to publish a subset of all emojis\n    // if you'd like to.\n    return Emojis.find();\n  });\n}\n\nif (Meteor.isClient) {\n  Meteor.subscribe('chats');\n  Meteor.subscribe('users');\n  Meteor.subscribe('emojis');\n}\n","Meteor.methods({\n  \"getChat\": function (otherUserId) {\n    // var otherUserId = this.params._id;\n    // find a chat that has two users that match current user id\n    // and the requested user id\n    if (this.userId) {\n      var filter = {$or:[\n        {user1Id:this.userId, user2Id:otherUserId},\n        {user2Id:this.userId, user1Id:otherUserId}\n      ]};\n      var chat = Chats.findOne(filter);\n      if (!chat){// no chat matching the filter - need to insert a new one\n        return Chats.insert({user1Id:Meteor.userId(), user2Id:otherUserId});\n      }\n      else {// there is a chat going already - use that.\n        return chat._id;\n      }\n    }\n  },\n  \"sendMessage\": function(chatId, message) {\n    if (this.userId) {\n      var chat = Chats.findOne({_id:chatId});\n      if (chat){// ok - we have a chat to use\n        var msgs = chat.messages; // pull the messages property\n        if (!msgs){// no messages yet, create a new array\n          msgs = [];\n        }\n        // is a good idea to insert data straight from the form\n        // (i.e. the user) into the database?? certainly not.\n        // push adds the message to the end of the array\n        msgs.push({\n          text: message,\n          userId: this.userId,\n          createdOn: new Date(),\n        });\n        // put the messages array onto the chat object\n        chat.messages = msgs;\n        // update the chat object in the database.\n        Chats.update(chat._id, chat);\n      }\n    }\n  }\n});\n","// set up the main template the the router will use to build pages\nRouter.configure({\n  layoutTemplate: 'ApplicationLayout'\n});\n// specify the top level route, the page users see when they arrive at the site\nRouter.route('/', function () {\n  this.render(\"navbar\", {to:\"header\"});\n  this.render(\"lobby_page\", {to:\"main\"});\n});\n\n// specify a route that allows the current user to chat to another users\nRouter.route('/chat/:_id', function () {\n  Meteor.call(\"getChat\", this.params._id, function(error, result){\n    Session.set(\"chatId\",result);\n  });\n  // // the user they want to chat to has id equal to\n  // // the id sent in after /chat/...\n  // var otherUserId = this.params._id;\n  // // find a chat that has two users that match current user id\n  // // and the requested user id\n  // var filter = {$or:[\n  //             {user1Id:Meteor.userId(), user2Id:otherUserId},\n  //             {user2Id:Meteor.userId(), user1Id:otherUserId}\n  //             ]};\n  // var chat = Chats.findOne(filter);\n  // if (!chat){// no chat matching the filter - need to insert a new one\n  //   chatId = Chats.insert({user1Id:Meteor.userId(), user2Id:otherUserId});\n  // }\n  // else {// there is a chat going already - use that.\n  //   chatId = chat._id;\n  // }\n  // if (chatId){// looking good, save the id to the session\n  //   Session.set(\"chatId\",chatId);\n  // }\n  this.render(\"navbar\", {to:\"header\"});\n  this.render(\"chat_page\", {to:\"main\"});\n});\nRouter.route('/about', function () {\n  this.render(\"navbar\", {to:\"header\"});\n  this.render(\"about\", {to:\"main\"});\n});\n","// start up script that creates some users for testing\n// users have the username 'user1@test.com' .. 'user8@test.com'\n// and the password test123 \nMeteor.startup(function () {\n  if (!Meteor.users.findOne()){\n    for (var i=1;i<9;i++){\n      var email = \"user\"+i+\"@test.com\";\n      var username = \"user\"+i;\n      var avatar = \"ava\"+i+\".png\"\n      console.log(\"creating a user with password 'test123' and username/ email: \"+email);\n      Meteor.users.insert({profile:{username:username, avatar:avatar}, emails:[{address:email}],services:{ password:{\"bcrypt\" : \"$2a$10$I3erQ084OiyILTv8ybtQ4ON6wusgPbMZ6.P33zzSDei.BbDL.Q4EO\"}}});\n    }\n  }\n});\n"]}