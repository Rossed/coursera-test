[{"type":"js","data":"/* Imports for global scope */\n\nMongo = Package.mongo.Mongo;\nSession = Package.session.Session;\n$ = Package.jquery.$;\njQuery = Package.jquery.jQuery;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\naccountsUIBootstrap3 = Package['ian:accounts-ui-bootstrap-3'].accountsUIBootstrap3;\nSimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nMongoObject = Package['aldeed:simple-schema'].MongoObject;\nmoment = Package['momentjs:moment'].moment;\nEmojis = Package['lookback:emoji'].Emojis;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nTemplate = Package.templating.Template;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAccounts = Package['accounts-base'].Accounts;\nCollection2 = Package['aldeed:collection2-core'].Collection2;\nAutoupdate = Package.autoupdate.Autoupdate;\nReload = Package.reload.Reload;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"client\":{\"template.about.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// client/template.about.js                                                                                        //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n                                                                                                                   // 1\nTemplate.__checkName(\"about\");                                                                                     // 2\nTemplate[\"about\"] = new Template(\"Template.about\", (function() {                                                   // 3\n  var view = this;                                                                                                 // 4\n  return HTML.Raw('<h2>This is a chat</h2>\\n  <p>Try to use emojis</p>\\n  <p><a href=\"http://www.webpagefx.com/tools/emoji-cheat-sheet/\">emojis cheatsheet</a></p>');\n}));                                                                                                               // 6\n                                                                                                                   // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template.chat.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// client/template.chat.js                                                                                         //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n                                                                                                                   // 1\nTemplate.__checkName(\"chat_page\");                                                                                 // 2\nTemplate[\"chat_page\"] = new Template(\"Template.chat_page\", (function() {                                           // 3\n  var view = this;                                                                                                 // 4\n  return [ HTML.H2(\"Type in the box below to send a message to \", Blaze.View(\"lookup:chatWith.profile.username\", function() {\n    return Spacebars.mustache(Spacebars.dot(view.lookup(\"chatWith\"), \"profile\", \"username\"));                      // 6\n  }), \"!\"), \"\\n\t\", HTML.DIV({                                                                                      // 7\n    \"class\": \"row\"                                                                                                 // 8\n  }, \"\\n\t\t\", HTML.DIV({                                                                                            // 9\n    \"class\": \"col-md-12\"                                                                                           // 10\n  }, \"\\n\t\t\t\", HTML.DIV({                                                                                           // 11\n    \"class\": \"well well-lg\"                                                                                        // 12\n  }, \"\\n\t\t\t\", Blaze.Each(function() {                                                                              // 13\n    return Spacebars.call(view.lookup(\"messages\"));                                                                // 14\n  }, function() {                                                                                                  // 15\n    return [ \"\\n\t\t\t\", Spacebars.include(view.lookupTemplate(\"chat_message\")), \"\\n\t\t\t\" ];                           // 16\n  }), \"\\n\t\t\t\"), \"\\n\t\t\"), \"\\n\t\"), HTML.Raw('\\n    <div class=\"row\">\\n\t\t<div class=\"col-md-12\">\\n\t\t\t<form class=\"js-send-chat\">\\n\t\t\t\t<div class=\"input-group\">\\n\t\t\t\t\t<input class=\"input form-control\" type=\"text\" name=\"chat\" placeholder=\"type a message here...\">\\n\t\t      <span class=\"input-group-btn\">\\n\t\t        <button class=\"btn btn-default\" type=\"submit\">Send</button>\\n\t\t      </span>\\n\t\t    </div>\\n\t\t\t</form>\\n\t\t</div>\\n\t</div>') ];\n}));                                                                                                               // 18\n                                                                                                                   // 19\nTemplate.__checkName(\"chat_message\");                                                                              // 20\nTemplate[\"chat_message\"] = new Template(\"Template.chat_message\", (function() {                                     // 21\n  var view = this;                                                                                                 // 22\n  return HTML.DIV({                                                                                                // 23\n    \"class\": function() {                                                                                          // 24\n      return [ \"\\n\t\trow\\n\t\t\", Blaze.If(function() {                                                                // 25\n        return Spacebars.call(view.lookup(\"isOwner\"));                                                             // 26\n      }, function() {                                                                                              // 27\n        return \"\\n\t\t\tbg-success\\n\t\t\";                                                                              // 28\n      }), \"\\n\\n\t\" ];                                                                                               // 29\n    }                                                                                                              // 30\n  }, \"\\n\t  \", HTML.DIV({                                                                                           // 31\n    \"class\": \"col-xs-3 col-md-2\"                                                                                   // 32\n  }, \"\\n\t    \", HTML.A({                                                                                           // 33\n    href: \"#\",                                                                                                     // 34\n    \"class\": \"thumbnail\"                                                                                           // 35\n  }, \"\\n\t      \", HTML.IMG({                                                                                       // 36\n    \"class\": \"media-object\",                                                                                       // 37\n    src: function() {                                                                                              // 38\n      return [ \"/\", Spacebars.mustache(Spacebars.dot(view.lookup(\"user\"), \"profile\", \"avatar\")) ];                 // 39\n    },                                                                                                             // 40\n    alt: function() {                                                                                              // 41\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\"user\"), \"profile\", \"username\"));                        // 42\n    }                                                                                                              // 43\n  }), \"\\n\t    \"), \"\\n\t  \"), \"\\n\t  \", HTML.DIV({                                                                    // 44\n    \"class\": \"col-xs-9 col-md-10\"                                                                                  // 45\n  }, \"\\n\t    \", HTML.H4({                                                                                          // 46\n    \"class\": \"media-heading\"                                                                                       // 47\n  }, \"\\n\t\t\t\t\", Blaze.If(function() {                                                                               // 48\n    return Spacebars.call(view.lookup(\"isOwner\"));                                                                 // 49\n  }, function() {                                                                                                  // 50\n    return \"\\n\t\t\t\t\tYou said\\n\t\t\t  \";                                                                               // 51\n  }, function() {                                                                                                  // 52\n    return [ \"\\n\t\t\t\t\t\", Blaze.View(\"lookup:user.profile.username\", function() {                                    // 53\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\"user\"), \"profile\", \"username\"));                        // 54\n    }), \" said\\n\t\t\t  \" ];                                                                                          // 55\n  }), \"\\n\t\t\t\t\", Blaze.If(function() {                                                                              // 56\n    return Spacebars.call(view.lookup(\"createdOn\"));                                                               // 57\n  }, function() {                                                                                                  // 58\n    return [ \"\\n\t\t\t\t\t\", Blaze.View(\"lookup:formatedDate\", function() {                                             // 59\n      return Spacebars.mustache(view.lookup(\"formatedDate\"));                                                      // 60\n    }), \"\\n\t\t\t\t\" ];                                                                                                // 61\n  }), \"\\n\t\t\t\"), \"\\n\t\t\t\", Spacebars.include(view.lookupTemplate(\"emoji\"), function() {                              // 62\n    return [ \"\\n\t\t  \t\", Blaze.View(\"lookup:text\", function() {                                                     // 63\n      return Spacebars.mustache(view.lookup(\"text\"));                                                              // 64\n    }), \"\\n\t\t\t\" ];                                                                                                 // 65\n  }), \"\\n\t  \"), \"\\n\t\");                                                                                            // 66\n}));                                                                                                               // 67\n                                                                                                                   // 68\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template.layout.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// client/template.layout.js                                                                                       //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n                                                                                                                   // 1\nTemplate.body.addContent((function() {                                                                             // 2\n  var view = this;                                                                                                 // 3\n  return \"\";                                                                                                       // 4\n}));                                                                                                               // 5\nMeteor.startup(Template.body.renderToDocument);                                                                    // 6\n                                                                                                                   // 7\nTemplate.__checkName(\"ApplicationLayout\");                                                                         // 8\nTemplate[\"ApplicationLayout\"] = new Template(\"Template.ApplicationLayout\", (function() {                           // 9\n  var view = this;                                                                                                 // 10\n  return [ Blaze._TemplateWith(function() {                                                                        // 11\n    return \"header\";                                                                                               // 12\n  }, function() {                                                                                                  // 13\n    return Spacebars.include(view.lookupTemplate(\"yield\"));                                                        // 14\n  }), \"\\n\\n\t\", HTML.DIV({                                                                                          // 15\n    \"class\": \"container\"                                                                                           // 16\n  }, \"\\n\t\", Blaze._TemplateWith(function() {                                                                       // 17\n    return \"main\";                                                                                                 // 18\n  }, function() {                                                                                                  // 19\n    return Spacebars.include(view.lookupTemplate(\"yield\"));                                                        // 20\n  }), \"\\n\t\") ];                                                                                                    // 21\n}));                                                                                                               // 22\n                                                                                                                   // 23\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template.minstant.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// client/template.minstant.js                                                                                     //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n                                                                                                                   // 1\nTemplate.__checkName(\"lobby_page\");                                                                                // 2\nTemplate[\"lobby_page\"] = new Template(\"Template.lobby_page\", (function() {                                         // 3\n  var view = this;                                                                                                 // 4\n  return Spacebars.include(view.lookupTemplate(\"available_user_list\"));                                            // 5\n}));                                                                                                               // 6\n                                                                                                                   // 7\nTemplate.__checkName(\"available_user_list\");                                                                       // 8\nTemplate[\"available_user_list\"] = new Template(\"Template.available_user_list\", (function() {                       // 9\n  var view = this;                                                                                                 // 10\n  return [ HTML.Raw(\"<h2>Choose someone to chat with:</h2>\\n\t\"), HTML.DIV({                                        // 11\n    \"class\": \"row\"                                                                                                 // 12\n  }, \"\\n\t\", Blaze.If(function() {                                                                                  // 13\n    return Spacebars.call(view.lookup(\"currentUser\"));                                                             // 14\n  }, function() {                                                                                                  // 15\n    return [ \"\\n\t\t\", Blaze.Each(function() {                                                                       // 16\n      return Spacebars.call(view.lookup(\"users\"));                                                                 // 17\n    }, function() {                                                                                                // 18\n      return [ \"\\n\t\t\", Spacebars.include(view.lookupTemplate(\"available_user\")), \"\\n\t\t\" ];                         // 19\n    }), \"\\n\t\" ];                                                                                                   // 20\n  }, function() {                                                                                                  // 21\n    return [ \"\\n\t\t\", HTML.H3(\"Please login\"), \"\\n\t\" ];                                                             // 22\n  }), \"\\n\") ];                                                                                                     // 23\n}));                                                                                                               // 24\n                                                                                                                   // 25\nTemplate.__checkName(\"available_user\");                                                                            // 26\nTemplate[\"available_user\"] = new Template(\"Template.available_user\", (function() {                                 // 27\n  var view = this;                                                                                                 // 28\n  return HTML.DIV({                                                                                                // 29\n    \"class\": \"col-xs-6 col-md-2\"                                                                                   // 30\n  }, \"\\n\t\t\", HTML.DIV({                                                                                            // 31\n    \"class\": \"user_avatar\"                                                                                         // 32\n  }, \"\\n\t\t\t\", Blaze.If(function() {                                                                                // 33\n    return Spacebars.dataMustache(view.lookup(\"isMyUser\"), view.lookup(\"_id\"));                                    // 34\n  }, function() {                                                                                                  // 35\n    return [ \"\\n\t\t\t\", HTML.DIV({                                                                                   // 36\n      \"class\": \"bg-success\"                                                                                        // 37\n    }, Blaze.View(\"lookup:getUsername\", function() {                                                               // 38\n      return Spacebars.mustache(view.lookup(\"getUsername\"), view.lookup(\"_id\"));                                   // 39\n    }), \" (YOU)\\n\t\t\t\t\", HTML.BR(), \"\\n\t\t\t\t\", HTML.IMG({                                                            // 40\n      src: function() {                                                                                            // 41\n        return [ \"/\", Spacebars.mustache(Spacebars.dot(view.lookup(\"profile\"), \"avatar\")) ];                       // 42\n      },                                                                                                           // 43\n      \"class\": \"avatar_img\"                                                                                        // 44\n    }), \"\\n\t\t\t\"), \"\\n\t\t\t\" ];                                                                                       // 45\n  }, function() {                                                                                                  // 46\n    return [ \"\\n\t\t\t\", HTML.A({                                                                                     // 47\n      href: function() {                                                                                           // 48\n        return [ \"/chat/\", Spacebars.mustache(view.lookup(\"_id\")) ];                                               // 49\n      }                                                                                                            // 50\n    }, \"\\n\t\t\t\t\", Blaze.View(\"lookup:getUsername\", function() {                                                     // 51\n      return Spacebars.mustache(view.lookup(\"getUsername\"), view.lookup(\"_id\"));                                   // 52\n    }), \"\\n\t\t\t\t\", HTML.BR(), \"\\n\t\t\t\t\", HTML.IMG({                                                                  // 53\n      src: function() {                                                                                            // 54\n        return [ \"/\", Spacebars.mustache(Spacebars.dot(view.lookup(\"profile\"), \"avatar\")) ];                       // 55\n      },                                                                                                           // 56\n      \"class\": \"avatar_img\"                                                                                        // 57\n    }), \"\\n\t\t\t\"), \"\\n\t\t\t\" ];                                                                                       // 58\n  }), \"\\n\t\t\"), \"\\n\t\");                                                                                             // 59\n}));                                                                                                               // 60\n                                                                                                                   // 61\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template.navbar.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// client/template.navbar.js                                                                                       //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n                                                                                                                   // 1\nTemplate.__checkName(\"navbar\");                                                                                    // 2\nTemplate[\"navbar\"] = new Template(\"Template.navbar\", (function() {                                                 // 3\n  var view = this;                                                                                                 // 4\n  return HTML.NAV({                                                                                                // 5\n    \"class\": \"navbar navbar-default navbar-fixed-top\"                                                              // 6\n  }, \"\\n  \", HTML.DIV({                                                                                            // 7\n    \"class\": \"container-fluid\"                                                                                     // 8\n  }, \"\\n    \", HTML.Raw('<div class=\"navbar-header\">\\n      <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\">\\n        <span class=\"sr-only\">Toggle navigation</span>\\n        <span class=\"icon-bar\"></span>\\n        <span class=\"icon-bar\"></span>\\n        <span class=\"icon-bar\"></span>\\n      </button>\\n      <a class=\"navbar-brand\" href=\"/\">\\n        Minstant!\\n      </a>\\n    </div>'), \"\\n    \", HTML.DIV({\n    \"class\": \"collapse navbar-collapse\",                                                                           // 10\n    id: \"navbar\"                                                                                                   // 11\n  }, \"\\n      \", HTML.Raw('<ul class=\"nav navbar-nav \">\\n        <li><a href=\"/about\">About</a></li>\\n      </ul>'), \"\\n      \", HTML.DIV({\n    \"class\": \"nav navbar-nav navbar-right\"                                                                         // 13\n  }, \"\\n        \", Spacebars.include(view.lookupTemplate(\"loginButtons\")), \"\\n      \"), \"\\n    \"), \"\\n  \"), \"\\n\");\n}));                                                                                                               // 15\n                                                                                                                   // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"chat.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// client/chat.js                                                                                                  //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nTemplate.chat_page.helpers({                                                                                       // 1\n  messages: function () {                                                                                          // 2\n    function messages() {                                                                                          // 2\n      var chat = Chats.findOne({ _id: Session.get(\"chatId\") });                                                    // 3\n      if (chat) {                                                                                                  // 4\n        return chat.messages;                                                                                      // 5\n      } else {                                                                                                     //\n        return [];                                                                                                 // 7\n      }                                                                                                            //\n    }                                                                                                              //\n                                                                                                                   //\n    return messages;                                                                                               //\n  }(),                                                                                                             //\n  chatWith: function () {                                                                                          // 10\n    function chatWith() {                                                                                          // 10\n      var chat = Chats.findOne({ _id: Session.get(\"chatId\") });                                                    // 11\n      if (chat) {                                                                                                  // 12\n        if (chat.user1Id === Meteor.userId()) {                                                                    // 13\n          return Meteor.users.findOne(chat.user2Id);                                                               // 14\n        } else {                                                                                                   //\n          return Meteor.users.findOne(chat.user1Id);                                                               // 16\n        }                                                                                                          //\n      }                                                                                                            //\n      return;                                                                                                      // 19\n    }                                                                                                              //\n                                                                                                                   //\n    return chatWith;                                                                                               //\n  }()                                                                                                              //\n});                                                                                                                //\nTemplate.chat_page.events({                                                                                        // 22\n  // this event fires when the user sends a message on the chat page                                               //\n  'submit .js-send-chat': function () {                                                                            // 24\n    function submitJsSendChat(event) {                                                                             // 24\n      // stop the form from triggering a page reload                                                               //\n      event.preventDefault();                                                                                      // 26\n      Meteor.call(\"sendMessage\", Session.get(\"chatId\"), event.target.chat.value, function (error, result) {        // 27\n        event.target.chat.value = \"\";                                                                              // 31\n      });                                                                                                          //\n    }                                                                                                              //\n                                                                                                                   //\n    return submitJsSendChat;                                                                                       //\n  }()                                                                                                              //\n});                                                                                                                //\n                                                                                                                   //\nTemplate.chat_message.helpers({                                                                                    // 37\n  isOwner: function () {                                                                                           // 38\n    function isOwner() {                                                                                           // 38\n      return this.userId === Meteor.userId();                                                                      // 39\n    }                                                                                                              //\n                                                                                                                   //\n    return isOwner;                                                                                                //\n  }(),                                                                                                             //\n  user: function () {                                                                                              // 41\n    function user() {                                                                                              // 41\n      return Meteor.users.findOne(this.userId);                                                                    // 42\n    }                                                                                                              //\n                                                                                                                   //\n    return user;                                                                                                   //\n  }(),                                                                                                             //\n  formatedDate: function () {                                                                                      // 44\n    function formatedDate() {                                                                                      // 44\n      return moment(this.createdOn).fromNow();                                                                     // 45\n    }                                                                                                              //\n                                                                                                                   //\n    return formatedDate;                                                                                           //\n  }()                                                                                                              //\n});                                                                                                                //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// client/main.js                                                                                                  //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n///                                                                                                                //\n// helper functions                                                                                                //\n///                                                                                                                //\nTemplate.available_user_list.helpers({                                                                             // 4\n  users: function () {                                                                                             // 5\n    function users() {                                                                                             // 5\n      return Meteor.users.find();                                                                                  // 6\n    }                                                                                                              //\n                                                                                                                   //\n    return users;                                                                                                  //\n  }()                                                                                                              //\n});                                                                                                                //\nTemplate.available_user.helpers({                                                                                  // 9\n  getUsername: function () {                                                                                       // 10\n    function getUsername(userId) {                                                                                 // 10\n      user = Meteor.users.findOne({ _id: userId });                                                                // 11\n      return user.profile.username;                                                                                // 12\n    }                                                                                                              //\n                                                                                                                   //\n    return getUsername;                                                                                            //\n  }(),                                                                                                             //\n  isMyUser: function () {                                                                                          // 14\n    function isMyUser(userId) {                                                                                    // 14\n      if (userId == Meteor.userId()) {                                                                             // 15\n        return true;                                                                                               // 16\n      } else {                                                                                                     //\n        return false;                                                                                              // 19\n      }                                                                                                            //\n    }                                                                                                              //\n                                                                                                                   //\n    return isMyUser;                                                                                               //\n  }()                                                                                                              //\n});                                                                                                                //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lib\":{\"collections.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// lib/collections.js                                                                                              //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nChats = new Mongo.Collection(\"chats\");                                                                             // 1\n                                                                                                                   //\nif (Meteor.isServer) {                                                                                             // 3\n                                                                                                                   //\n  Meteor.publish(\"chats\", function () {                                                                            // 5\n    return Chats.find({ $or: [{ user1Id: this.userId }, { user2Id: this.userId }] });                              // 6\n  });                                                                                                              //\n                                                                                                                   //\n  Meteor.publish(\"users\", function () {                                                                            // 12\n    return Meteor.users.find();                                                                                    // 13\n  });                                                                                                              //\n                                                                                                                   //\n  Meteor.publish('emojis', function () {                                                                           // 16\n    // Here you can choose to publish a subset of all emojis                                                       //\n    // if you'd like to.                                                                                           //\n    return Emojis.find();                                                                                          // 19\n  });                                                                                                              //\n}                                                                                                                  //\n                                                                                                                   //\nif (Meteor.isClient) {                                                                                             // 23\n  Meteor.subscribe('chats');                                                                                       // 24\n  Meteor.subscribe('users');                                                                                       // 25\n  Meteor.subscribe('emojis');                                                                                      // 26\n}                                                                                                                  //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// lib/methods.js                                                                                                  //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nMeteor.methods({                                                                                                   // 1\n  \"getChat\": function () {                                                                                         // 2\n    function getChat(otherUserId) {                                                                                // 2\n      // var otherUserId = this.params._id;                                                                        //\n      // find a chat that has two users that match current user id                                                 //\n      // and the requested user id                                                                                 //\n      if (this.userId) {                                                                                           // 6\n        var filter = { $or: [{ user1Id: this.userId, user2Id: otherUserId }, { user2Id: this.userId, user1Id: otherUserId }] };\n        var chat = Chats.findOne(filter);                                                                          // 11\n        if (!chat) {                                                                                               // 12\n          // no chat matching the filter - need to insert a new one                                                //\n          return Chats.insert({ user1Id: Meteor.userId(), user2Id: otherUserId });                                 // 13\n        } else {                                                                                                   //\n          // there is a chat going already - use that.                                                             //\n          return chat._id;                                                                                         // 16\n        }                                                                                                          //\n      }                                                                                                            //\n    }                                                                                                              //\n                                                                                                                   //\n    return getChat;                                                                                                //\n  }(),                                                                                                             //\n  \"sendMessage\": function () {                                                                                     // 20\n    function sendMessage(chatId, message) {                                                                        // 20\n      if (this.userId) {                                                                                           // 21\n        var chat = Chats.findOne({ _id: chatId });                                                                 // 22\n        if (chat) {                                                                                                // 23\n          // ok - we have a chat to use                                                                            //\n          var msgs = chat.messages; // pull the messages property                                                  // 24\n          if (!msgs) {                                                                                             // 23\n            // no messages yet, create a new array                                                                 //\n            msgs = [];                                                                                             // 26\n          }                                                                                                        //\n          // is a good idea to insert data straight from the form                                                  //\n          // (i.e. the user) into the database?? certainly not.                                                    //\n          // push adds the message to the end of the array                                                         //\n          msgs.push({                                                                                              // 23\n            text: message,                                                                                         // 32\n            userId: this.userId,                                                                                   // 33\n            createdOn: new Date()                                                                                  // 34\n          });                                                                                                      //\n          // put the messages array onto the chat object                                                           //\n          chat.messages = msgs;                                                                                    // 23\n          // update the chat object in the database.                                                               //\n          Chats.update(chat._id, chat);                                                                            // 23\n        }                                                                                                          //\n      }                                                                                                            //\n    }                                                                                                              //\n                                                                                                                   //\n    return sendMessage;                                                                                            //\n  }()                                                                                                              //\n});                                                                                                                //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"routes.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// lib/routes.js                                                                                                   //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n// set up the main template the the router will use to build pages                                                 //\nRouter.configure({                                                                                                 // 2\n  layoutTemplate: 'ApplicationLayout'                                                                              // 3\n});                                                                                                                //\n// specify the top level route, the page users see when they arrive at the site                                    //\nRouter.route('/', function () {                                                                                    // 6\n  this.render(\"navbar\", { to: \"header\" });                                                                         // 7\n  this.render(\"lobby_page\", { to: \"main\" });                                                                       // 8\n});                                                                                                                //\n                                                                                                                   //\n// specify a route that allows the current user to chat to another users                                           //\nRouter.route('/chat/:_id', function () {                                                                           // 12\n  Meteor.call(\"getChat\", this.params._id, function (error, result) {                                               // 13\n    Session.set(\"chatId\", result);                                                                                 // 14\n  });                                                                                                              //\n  // // the user they want to chat to has id equal to                                                              //\n  // // the id sent in after /chat/...                                                                             //\n  // var otherUserId = this.params._id;                                                                            //\n  // // find a chat that has two users that match current user id                                                  //\n  // // and the requested user id                                                                                  //\n  // var filter = {$or:[                                                                                           //\n  //             {user1Id:Meteor.userId(), user2Id:otherUserId},                                                   //\n  //             {user2Id:Meteor.userId(), user1Id:otherUserId}                                                    //\n  //             ]};                                                                                               //\n  // var chat = Chats.findOne(filter);                                                                             //\n  // if (!chat){// no chat matching the filter - need to insert a new one                                          //\n  //   chatId = Chats.insert({user1Id:Meteor.userId(), user2Id:otherUserId});                                      //\n  // }                                                                                                             //\n  // else {// there is a chat going already - use that.                                                            //\n  //   chatId = chat._id;                                                                                          //\n  // }                                                                                                             //\n  // if (chatId){// looking good, save the id to the session                                                       //\n  //   Session.set(\"chatId\",chatId);                                                                               //\n  // }                                                                                                             //\n  this.render(\"navbar\", { to: \"header\" });                                                                         // 12\n  this.render(\"chat_page\", { to: \"main\" });                                                                        // 36\n});                                                                                                                //\nRouter.route('/about', function () {                                                                               // 38\n  this.render(\"navbar\", { to: \"header\" });                                                                         // 39\n  this.render(\"about\", { to: \"main\" });                                                                            // 40\n});                                                                                                                //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\"extensions\":[\".js\",\".json\",\".html\",\".css\"]});\nrequire(\"./client/template.about.js\");\nrequire(\"./client/template.chat.js\");\nrequire(\"./client/template.layout.js\");\nrequire(\"./client/template.minstant.js\");\nrequire(\"./client/template.navbar.js\");\nrequire(\"./lib/collections.js\");\nrequire(\"./lib/methods.js\");\nrequire(\"./lib/routes.js\");\nrequire(\"./client/chat.js\");\nrequire(\"./client/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/client/template.about.js","/client/template.chat.js","/client/template.layout.js","/client/template.minstant.js","/client/template.navbar.js","/client/chat.js","/client/main.js","/lib/collections.js","/lib/methods.js","/lib/routes.js"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,uH;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wH;;;;;;;;;;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wH;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wH;;;;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wH;;;;;;;;;;;ACfA,SAAS,SAAT,CAAmB,OAAnB,CAA2B;AACzB;AAAS,wBAAU;AACjB,UAAI,OAAO,MAAM,OAAN,CAAc,EAAC,KAAI,QAAQ,GAAR,CAAY,QAAZ,CAAJ,EAAf,CAAP,CADa;AAEjB,UAAI,IAAJ,EAAU;AACR,eAAO,KAAK,QAAL,CADC;OAAV,MAEO;AACL,eAAO,EAAP,CADK;OAFP;KAFO;;;KAAT;AAQA;AAAU,wBAAW;AACnB,UAA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","file":"/app.js","sourcesContent":["\nTemplate.__checkName(\"about\");\nTemplate[\"about\"] = new Template(\"Template.about\", (function() {\n  var view = this;\n  return HTML.Raw('<h2>This is a chat</h2>\\n  <p>Try to use emojis</p>\\n  <p><a href=\"http://www.webpagefx.com/tools/emoji-cheat-sheet/\">emojis cheatsheet</a></p>');\n}));\n","\nTemplate.__checkName(\"chat_page\");\nTemplate[\"chat_page\"] = new Template(\"Template.chat_page\", (function() {\n  var view = this;\n  return [ HTML.H2(\"Type in the box below to send a message to \", Blaze.View(\"lookup:chatWith.profile.username\", function() {\n    return Spacebars.mustache(Spacebars.dot(view.lookup(\"chatWith\"), \"profile\", \"username\"));\n  }), \"!\"), \"\\n\t\", HTML.DIV({\n    \"class\": \"row\"\n  }, \"\\n\t\t\", HTML.DIV({\n    \"class\": \"col-md-12\"\n  }, \"\\n\t\t\t\", HTML.DIV({\n    \"class\": \"well well-lg\"\n  }, \"\\n\t\t\t\", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"messages\"));\n  }, function() {\n    return [ \"\\n\t\t\t\", Spacebars.include(view.lookupTemplate(\"chat_message\")), \"\\n\t\t\t\" ];\n  }), \"\\n\t\t\t\"), \"\\n\t\t\"), \"\\n\t\"), HTML.Raw('\\n    <div class=\"row\">\\n\t\t<div class=\"col-md-12\">\\n\t\t\t<form class=\"js-send-chat\">\\n\t\t\t\t<div class=\"input-group\">\\n\t\t\t\t\t<input class=\"input form-control\" type=\"text\" name=\"chat\" placeholder=\"type a message here...\">\\n\t\t      <span class=\"input-group-btn\">\\n\t\t        <button class=\"btn btn-default\" type=\"submit\">Send</button>\\n\t\t      </span>\\n\t\t    </div>\\n\t\t\t</form>\\n\t\t</div>\\n\t</div>') ];\n}));\n\nTemplate.__checkName(\"chat_message\");\nTemplate[\"chat_message\"] = new Template(\"Template.chat_message\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": function() {\n      return [ \"\\n\t\trow\\n\t\t\", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"isOwner\"));\n      }, function() {\n        return \"\\n\t\t\tbg-success\\n\t\t\";\n      }), \"\\n\\n\t\" ];\n    }\n  }, \"\\n\t  \", HTML.DIV({\n    \"class\": \"col-xs-3 col-md-2\"\n  }, \"\\n\t    \", HTML.A({\n    href: \"#\",\n    \"class\": \"thumbnail\"\n  }, \"\\n\t      \", HTML.IMG({\n    \"class\": \"media-object\",\n    src: function() {\n      return [ \"/\", Spacebars.mustache(Spacebars.dot(view.lookup(\"user\"), \"profile\", \"avatar\")) ];\n    },\n    alt: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\"user\"), \"profile\", \"username\"));\n    }\n  }), \"\\n\t    \"), \"\\n\t  \"), \"\\n\t  \", HTML.DIV({\n    \"class\": \"col-xs-9 col-md-10\"\n  }, \"\\n\t    \", HTML.H4({\n    \"class\": \"media-heading\"\n  }, \"\\n\t\t\t\t\", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"isOwner\"));\n  }, function() {\n    return \"\\n\t\t\t\t\tYou said\\n\t\t\t  \";\n  }, function() {\n    return [ \"\\n\t\t\t\t\t\", Blaze.View(\"lookup:user.profile.username\", function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\"user\"), \"profile\", \"username\"));\n    }), \" said\\n\t\t\t  \" ];\n  }), \"\\n\t\t\t\t\", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"createdOn\"));\n  }, function() {\n    return [ \"\\n\t\t\t\t\t\", Blaze.View(\"lookup:formatedDate\", function() {\n      return Spacebars.mustache(view.lookup(\"formatedDate\"));\n    }), \"\\n\t\t\t\t\" ];\n  }), \"\\n\t\t\t\"), \"\\n\t\t\t\", Spacebars.include(view.lookupTemplate(\"emoji\"), function() {\n    return [ \"\\n\t\t  \t\", Blaze.View(\"lookup:text\", function() {\n      return Spacebars.mustache(view.lookup(\"text\"));\n    }), \"\\n\t\t\t\" ];\n  }), \"\\n\t  \"), \"\\n\t\");\n}));\n","\nTemplate.body.addContent((function() {\n  var view = this;\n  return \"\";\n}));\nMeteor.startup(Template.body.renderToDocument);\n\nTemplate.__checkName(\"ApplicationLayout\");\nTemplate[\"ApplicationLayout\"] = new Template(\"Template.ApplicationLayout\", (function() {\n  var view = this;\n  return [ Blaze._TemplateWith(function() {\n    return \"header\";\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"yield\"));\n  }), \"\\n\\n\t\", HTML.DIV({\n    \"class\": \"container\"\n  }, \"\\n\t\", Blaze._TemplateWith(function() {\n    return \"main\";\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"yield\"));\n  }), \"\\n\t\") ];\n}));\n","\nTemplate.__checkName(\"lobby_page\");\nTemplate[\"lobby_page\"] = new Template(\"Template.lobby_page\", (function() {\n  var view = this;\n  return Spacebars.include(view.lookupTemplate(\"available_user_list\"));\n}));\n\nTemplate.__checkName(\"available_user_list\");\nTemplate[\"available_user_list\"] = new Template(\"Template.available_user_list\", (function() {\n  var view = this;\n  return [ HTML.Raw(\"<h2>Choose someone to chat with:</h2>\\n\t\"), HTML.DIV({\n    \"class\": \"row\"\n  }, \"\\n\t\", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"currentUser\"));\n  }, function() {\n    return [ \"\\n\t\t\", Blaze.Each(function() {\n      return Spacebars.call(view.lookup(\"users\"));\n    }, function() {\n      return [ \"\\n\t\t\", Spacebars.include(view.lookupTemplate(\"available_user\")), \"\\n\t\t\" ];\n    }), \"\\n\t\" ];\n  }, function() {\n    return [ \"\\n\t\t\", HTML.H3(\"Please login\"), \"\\n\t\" ];\n  }), \"\\n\") ];\n}));\n\nTemplate.__checkName(\"available_user\");\nTemplate[\"available_user\"] = new Template(\"Template.available_user\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"col-xs-6 col-md-2\"\n  }, \"\\n\t\t\", HTML.DIV({\n    \"class\": \"user_avatar\"\n  }, \"\\n\t\t\t\", Blaze.If(function() {\n    return Spacebars.dataMustache(view.lookup(\"isMyUser\"), view.lookup(\"_id\"));\n  }, function() {\n    return [ \"\\n\t\t\t\", HTML.DIV({\n      \"class\": \"bg-success\"\n    }, Blaze.View(\"lookup:getUsername\", function() {\n      return Spacebars.mustache(view.lookup(\"getUsername\"), view.lookup(\"_id\"));\n    }), \" (YOU)\\n\t\t\t\t\", HTML.BR(), \"\\n\t\t\t\t\", HTML.IMG({\n      src: function() {\n        return [ \"/\", Spacebars.mustache(Spacebars.dot(view.lookup(\"profile\"), \"avatar\")) ];\n      },\n      \"class\": \"avatar_img\"\n    }), \"\\n\t\t\t\"), \"\\n\t\t\t\" ];\n  }, function() {\n    return [ \"\\n\t\t\t\", HTML.A({\n      href: function() {\n        return [ \"/chat/\", Spacebars.mustache(view.lookup(\"_id\")) ];\n      }\n    }, \"\\n\t\t\t\t\", Blaze.View(\"lookup:getUsername\", function() {\n      return Spacebars.mustache(view.lookup(\"getUsername\"), view.lookup(\"_id\"));\n    }), \"\\n\t\t\t\t\", HTML.BR(), \"\\n\t\t\t\t\", HTML.IMG({\n      src: function() {\n        return [ \"/\", Spacebars.mustache(Spacebars.dot(view.lookup(\"profile\"), \"avatar\")) ];\n      },\n      \"class\": \"avatar_img\"\n    }), \"\\n\t\t\t\"), \"\\n\t\t\t\" ];\n  }), \"\\n\t\t\"), \"\\n\t\");\n}));\n","\nTemplate.__checkName(\"navbar\");\nTemplate[\"navbar\"] = new Template(\"Template.navbar\", (function() {\n  var view = this;\n  return HTML.NAV({\n    \"class\": \"navbar navbar-default navbar-fixed-top\"\n  }, \"\\n  \", HTML.DIV({\n    \"class\": \"container-fluid\"\n  }, \"\\n    \", HTML.Raw('<div class=\"navbar-header\">\\n      <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\">\\n        <span class=\"sr-only\">Toggle navigation</span>\\n        <span class=\"icon-bar\"></span>\\n        <span class=\"icon-bar\"></span>\\n        <span class=\"icon-bar\"></span>\\n      </button>\\n      <a class=\"navbar-brand\" href=\"/\">\\n        Minstant!\\n      </a>\\n    </div>'), \"\\n    \", HTML.DIV({\n    \"class\": \"collapse navbar-collapse\",\n    id: \"navbar\"\n  }, \"\\n      \", HTML.Raw('<ul class=\"nav navbar-nav \">\\n        <li><a href=\"/about\">About</a></li>\\n      </ul>'), \"\\n      \", HTML.DIV({\n    \"class\": \"nav navbar-nav navbar-right\"\n  }, \"\\n        \", Spacebars.include(view.lookupTemplate(\"loginButtons\")), \"\\n      \"), \"\\n    \"), \"\\n  \"), \"\\n\");\n}));\n","Template.chat_page.helpers({\n  messages:function(){\n    var chat = Chats.findOne({_id:Session.get(\"chatId\")});\n    if (chat) {\n      return chat.messages;\n    } else {\n      return [];\n    }\n  },\n  chatWith: function (){\n    var chat = Chats.findOne({_id:Session.get(\"chatId\")});\n    if (chat) {\n      if (chat.user1Id === Meteor.userId()){\n        return Meteor.users.findOne(chat.user2Id);\n      } else {\n        return Meteor.users.findOne(chat.user1Id);\n      }\n    }\n    return ;\n  }\n})\nTemplate.chat_page.events({\n// this event fires when the user sends a message on the chat page\n'submit .js-send-chat':function(event){\n  // stop the form from triggering a page reload\n  event.preventDefault();\n  Meteor.call(\"sendMessage\",\n    Session.get(\"chatId\"),\n    event.target.chat.value,\n    function(error, result){\n      event.target.chat.value = \"\";\n    }\n  );\n}\n})\n\nTemplate.chat_message.helpers({\n  isOwner: function() {\n    return this.userId === Meteor.userId();\n  },\n  user: function() {\n    return Meteor.users.findOne(this.userId);\n  },\n  formatedDate: function() {\n    return moment(this.createdOn).fromNow();\n  }\n});\n","///\n// helper functions\n///\nTemplate.available_user_list.helpers({\n  users:function(){\n    return Meteor.users.find();\n  }\n})\nTemplate.available_user.helpers({\n  getUsername:function(userId){\n    user = Meteor.users.findOne({_id:userId});\n    return user.profile.username;\n  },\n  isMyUser:function(userId){\n    if (userId == Meteor.userId()){\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n})\n","Chats = new Mongo.Collection(\"chats\");\n\nif (Meteor.isServer) {\n\n  Meteor.publish(\"chats\", function(){\n    return Chats.find({$or:[\n      {user1Id:this.userId},\n      {user2Id:this.userId}\n    ]});\n  });\n\n  Meteor.publish(\"users\", function(){\n    return Meteor.users.find()\n  });\n\n  Meteor.publish('emojis', function() {\n    // Here you can choose to publish a subset of all emojis\n    // if you'd like to.\n    return Emojis.find();\n  });\n}\n\nif (Meteor.isClient) {\n  Meteor.subscribe('chats');\n  Meteor.subscribe('users');\n  Meteor.subscribe('emojis');\n}\n","Meteor.methods({\n  \"getChat\": function (otherUserId) {\n    // var otherUserId = this.params._id;\n    // find a chat that has two users that match current user id\n    // and the requested user id\n    if (this.userId) {\n      var filter = {$or:[\n        {user1Id:this.userId, user2Id:otherUserId},\n        {user2Id:this.userId, user1Id:otherUserId}\n      ]};\n      var chat = Chats.findOne(filter);\n      if (!chat){// no chat matching the filter - need to insert a new one\n        return Chats.insert({user1Id:Meteor.userId(), user2Id:otherUserId});\n      }\n      else {// there is a chat going already - use that.\n        return chat._id;\n      }\n    }\n  },\n  \"sendMessage\": function(chatId, message) {\n    if (this.userId) {\n      var chat = Chats.findOne({_id:chatId});\n      if (chat){// ok - we have a chat to use\n        var msgs = chat.messages; // pull the messages property\n        if (!msgs){// no messages yet, create a new array\n          msgs = [];\n        }\n        // is a good idea to insert data straight from the form\n        // (i.e. the user) into the database?? certainly not.\n        // push adds the message to the end of the array\n        msgs.push({\n          text: message,\n          userId: this.userId,\n          createdOn: new Date(),\n        });\n        // put the messages array onto the chat object\n        chat.messages = msgs;\n        // update the chat object in the database.\n        Chats.update(chat._id, chat);\n      }\n    }\n  }\n});\n","// set up the main template the the router will use to build pages\nRouter.configure({\n  layoutTemplate: 'ApplicationLayout'\n});\n// specify the top level route, the page users see when they arrive at the site\nRouter.route('/', function () {\n  this.render(\"navbar\", {to:\"header\"});\n  this.render(\"lobby_page\", {to:\"main\"});\n});\n\n// specify a route that allows the current user to chat to another users\nRouter.route('/chat/:_id', function () {\n  Meteor.call(\"getChat\", this.params._id, function(error, result){\n    Session.set(\"chatId\",result);\n  });\n  // // the user they want to chat to has id equal to\n  // // the id sent in after /chat/...\n  // var otherUserId = this.params._id;\n  // // find a chat that has two users that match current user id\n  // // and the requested user id\n  // var filter = {$or:[\n  //             {user1Id:Meteor.userId(), user2Id:otherUserId},\n  //             {user2Id:Meteor.userId(), user1Id:otherUserId}\n  //             ]};\n  // var chat = Chats.findOne(filter);\n  // if (!chat){// no chat matching the filter - need to insert a new one\n  //   chatId = Chats.insert({user1Id:Meteor.userId(), user2Id:otherUserId});\n  // }\n  // else {// there is a chat going already - use that.\n  //   chatId = chat._id;\n  // }\n  // if (chatId){// looking good, save the id to the session\n  //   Session.set(\"chatId\",chatId);\n  // }\n  this.render(\"navbar\", {to:\"header\"});\n  this.render(\"chat_page\", {to:\"main\"});\n});\nRouter.route('/about', function () {\n  this.render(\"navbar\", {to:\"header\"});\n  this.render(\"about\", {to:\"main\"});\n});\n"]}}]