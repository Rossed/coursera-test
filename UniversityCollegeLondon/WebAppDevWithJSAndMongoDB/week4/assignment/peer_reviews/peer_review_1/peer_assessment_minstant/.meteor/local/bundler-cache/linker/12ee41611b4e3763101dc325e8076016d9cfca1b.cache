[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\nSimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nMongoObject = Package['aldeed:simple-schema'].MongoObject;\nmoment = Package['momentjs:moment'].moment;\nEmojis = Package['lookback:emoji'].Emojis;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAccounts = Package['accounts-base'].Accounts;\nCollection2 = Package['aldeed:collection2-core'].Collection2;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"lib\":{\"collections.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// lib/collections.js                                                                       //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\nChats = new Mongo.Collection(\"chats\");                                                      // 1\n                                                                                            //\nif (Meteor.isServer) {                                                                      // 3\n                                                                                            //\n  Meteor.publish(\"chats\", function () {                                                     // 5\n    return Chats.find({ $or: [{ user1Id: this.userId }, { user2Id: this.userId }] });       // 6\n  });                                                                                       //\n                                                                                            //\n  Meteor.publish(\"users\", function () {                                                     // 12\n    return Meteor.users.find();                                                             // 13\n  });                                                                                       //\n                                                                                            //\n  Meteor.publish('emojis', function () {                                                    // 16\n    // Here you can choose to publish a subset of all emojis                                //\n    // if you'd like to.                                                                    //\n    return Emojis.find();                                                                   // 19\n  });                                                                                       //\n}                                                                                           //\n                                                                                            //\nif (Meteor.isClient) {                                                                      // 23\n  Meteor.subscribe('chats');                                                                // 24\n  Meteor.subscribe('users');                                                                // 25\n  Meteor.subscribe('emojis');                                                               // 26\n}                                                                                           //\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// lib/methods.js                                                                           //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\nMeteor.methods({                                                                            // 1\n  \"getChat\": function () {                                                                  // 2\n    function getChat(otherUserId) {                                                         // 2\n      // var otherUserId = this.params._id;                                                 //\n      // find a chat that has two users that match current user id                          //\n      // and the requested user id                                                          //\n      if (this.userId) {                                                                    // 6\n        var filter = { $or: [{ user1Id: this.userId, user2Id: otherUserId }, { user2Id: this.userId, user1Id: otherUserId }] };\n        var chat = Chats.findOne(filter);                                                   // 11\n        if (!chat) {                                                                        // 12\n          // no chat matching the filter - need to insert a new one                         //\n          return Chats.insert({ user1Id: Meteor.userId(), user2Id: otherUserId });          // 13\n        } else {                                                                            //\n          // there is a chat going already - use that.                                      //\n          return chat._id;                                                                  // 16\n        }                                                                                   //\n      }                                                                                     //\n    }                                                                                       //\n                                                                                            //\n    return getChat;                                                                         //\n  }(),                                                                                      //\n  \"sendMessage\": function () {                                                              // 20\n    function sendMessage(chatId, message) {                                                 // 20\n      if (this.userId) {                                                                    // 21\n        var chat = Chats.findOne({ _id: chatId });                                          // 22\n        if (chat) {                                                                         // 23\n          // ok - we have a chat to use                                                     //\n          var msgs = chat.messages; // pull the messages property                           // 24\n          if (!msgs) {                                                                      // 23\n            // no messages yet, create a new array                                          //\n            msgs = [];                                                                      // 26\n          }                                                                                 //\n          // is a good idea to insert data straight from the form                           //\n          // (i.e. the user) into the database?? certainly not.                             //\n          // push adds the message to the end of the array                                  //\n          msgs.push({                                                                       // 23\n            text: message,                                                                  // 32\n            userId: this.userId,                                                            // 33\n            createdOn: new Date()                                                           // 34\n          });                                                                               //\n          // put the messages array onto the chat object                                    //\n          chat.messages = msgs;                                                             // 23\n          // update the chat object in the database.                                        //\n          Chats.update(chat._id, chat);                                                     // 23\n        }                                                                                   //\n      }                                                                                     //\n    }                                                                                       //\n                                                                                            //\n    return sendMessage;                                                                     //\n  }()                                                                                       //\n});                                                                                         //\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"routes.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// lib/routes.js                                                                            //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\n// set up the main template the the router will use to build pages                          //\nRouter.configure({                                                                          // 2\n  layoutTemplate: 'ApplicationLayout'                                                       // 3\n});                                                                                         //\n// specify the top level route, the page users see when they arrive at the site             //\nRouter.route('/', function () {                                                             // 6\n  this.render(\"navbar\", { to: \"header\" });                                                  // 7\n  this.render(\"lobby_page\", { to: \"main\" });                                                // 8\n});                                                                                         //\n                                                                                            //\n// specify a route that allows the current user to chat to another users                    //\nRouter.route('/chat/:_id', function () {                                                    // 12\n  Meteor.call(\"getChat\", this.params._id, function (error, result) {                        // 13\n    Session.set(\"chatId\", result);                                                          // 14\n  });                                                                                       //\n  // // the user they want to chat to has id equal to                                       //\n  // // the id sent in after /chat/...                                                      //\n  // var otherUserId = this.params._id;                                                     //\n  // // find a chat that has two users that match current user id                           //\n  // // and the requested user id                                                           //\n  // var filter = {$or:[                                                                    //\n  //             {user1Id:Meteor.userId(), user2Id:otherUserId},                            //\n  //             {user2Id:Meteor.userId(), user1Id:otherUserId}                             //\n  //             ]};                                                                        //\n  // var chat = Chats.findOne(filter);                                                      //\n  // if (!chat){// no chat matching the filter - need to insert a new one                   //\n  //   chatId = Chats.insert({user1Id:Meteor.userId(), user2Id:otherUserId});               //\n  // }                                                                                      //\n  // else {// there is a chat going already - use that.                                     //\n  //   chatId = chat._id;                                                                   //\n  // }                                                                                      //\n  // if (chatId){// looking good, save the id to the session                                //\n  //   Session.set(\"chatId\",chatId);                                                        //\n  // }                                                                                      //\n  this.render(\"navbar\", { to: \"header\" });                                                  // 12\n  this.render(\"chat_page\", { to: \"main\" });                                                 // 36\n});                                                                                         //\nRouter.route('/about', function () {                                                        // 38\n  this.render(\"navbar\", { to: \"header\" });                                                  // 39\n  this.render(\"about\", { to: \"main\" });                                                     // 40\n});                                                                                         //\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"server\":{\"startup.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// server/startup.js                                                                        //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\n// start up script that creates some users for testing                                      //\n// users have the username 'user1@test.com' .. 'user8@test.com'                             //\n// and the password test123                                                                 //\nMeteor.startup(function () {                                                                // 4\n  if (!Meteor.users.findOne()) {                                                            // 5\n    for (var i = 1; i < 9; i++) {                                                           // 6\n      var email = \"user\" + i + \"@test.com\";                                                 // 7\n      var username = \"user\" + i;                                                            // 8\n      var avatar = \"ava\" + i + \".png\";                                                      // 9\n      console.log(\"creating a user with password 'test123' and username/ email: \" + email);\n      Meteor.users.insert({ profile: { username: username, avatar: avatar }, emails: [{ address: email }], services: { password: { \"bcrypt\": \"$2a$10$I3erQ084OiyILTv8ybtQ4ON6wusgPbMZ6.P33zzSDei.BbDL.Q4EO\" } } });\n    }                                                                                       //\n  }                                                                                         //\n});                                                                                         //\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./lib/collections.js\");\nrequire(\"./lib/methods.js\");\nrequire(\"./lib/routes.js\");\nrequire(\"./server/startup.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/lib/collections.js","/lib/methods.js","/lib/routes.js","/server/startup.js"],"names":[],"mappings":"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","file":"/app.js","sourcesContent":["Chats = new Mongo.Collection(\"chats\");\n\nif (Meteor.isServer) {\n\n  Meteor.publish(\"chats\", function(){\n    return Chats.find({$or:[\n      {user1Id:this.userId},\n      {user2Id:this.userId}\n    ]});\n  });\n\n  Meteor.publish(\"users\", function(){\n    return Meteor.users.find()\n  });\n\n  Meteor.publish('emojis', function() {\n    // Here you can choose to publish a subset of all emojis\n    // if you'd like to.\n    return Emojis.find();\n  });\n}\n\nif (Meteor.isClient) {\n  Meteor.subscribe('chats');\n  Meteor.subscribe('users');\n  Meteor.subscribe('emojis');\n}\n","Meteor.methods({\n  \"getChat\": function (otherUserId) {\n    // var otherUserId = this.params._id;\n    // find a chat that has two users that match current user id\n    // and the requested user id\n    if (this.userId) {\n      var filter = {$or:[\n        {user1Id:this.userId, user2Id:otherUserId},\n        {user2Id:this.userId, user1Id:otherUserId}\n      ]};\n      var chat = Chats.findOne(filter);\n      if (!chat){// no chat matching the filter - need to insert a new one\n        return Chats.insert({user1Id:Meteor.userId(), user2Id:otherUserId});\n      }\n      else {// there is a chat going already - use that.\n        return chat._id;\n      }\n    }\n  },\n  \"sendMessage\": function(chatId, message) {\n    if (this.userId) {\n      var chat = Chats.findOne({_id:chatId});\n      if (chat){// ok - we have a chat to use\n        var msgs = chat.messages; // pull the messages property\n        if (!msgs){// no messages yet, create a new array\n          msgs = [];\n        }\n        // is a good idea to insert data straight from the form\n        // (i.e. the user) into the database?? certainly not.\n        // push adds the message to the end of the array\n        msgs.push({\n          text: message,\n          userId: this.userId,\n          createdOn: new Date(),\n        });\n        // put the messages array onto the chat object\n        chat.messages = msgs;\n        // update the chat object in the database.\n        Chats.update(chat._id, chat);\n      }\n    }\n  }\n});\n","// set up the main template the the router will use to build pages\nRouter.configure({\n  layoutTemplate: 'ApplicationLayout'\n});\n// specify the top level route, the page users see when they arrive at the site\nRouter.route('/', function () {\n  this.render(\"navbar\", {to:\"header\"});\n  this.render(\"lobby_page\", {to:\"main\"});\n});\n\n// specify a route that allows the current user to chat to another users\nRouter.route('/chat/:_id', function () {\n  Meteor.call(\"getChat\", this.params._id, function(error, result){\n    Session.set(\"chatId\",result);\n  });\n  // // the user they want to chat to has id equal to\n  // // the id sent in after /chat/...\n  // var otherUserId = this.params._id;\n  // // find a chat that has two users that match current user id\n  // // and the requested user id\n  // var filter = {$or:[\n  //             {user1Id:Meteor.userId(), user2Id:otherUserId},\n  //             {user2Id:Meteor.userId(), user1Id:otherUserId}\n  //             ]};\n  // var chat = Chats.findOne(filter);\n  // if (!chat){// no chat matching the filter - need to insert a new one\n  //   chatId = Chats.insert({user1Id:Meteor.userId(), user2Id:otherUserId});\n  // }\n  // else {// there is a chat going already - use that.\n  //   chatId = chat._id;\n  // }\n  // if (chatId){// looking good, save the id to the session\n  //   Session.set(\"chatId\",chatId);\n  // }\n  this.render(\"navbar\", {to:\"header\"});\n  this.render(\"chat_page\", {to:\"main\"});\n});\nRouter.route('/about', function () {\n  this.render(\"navbar\", {to:\"header\"});\n  this.render(\"about\", {to:\"main\"});\n});\n","// start up script that creates some users for testing\n// users have the username 'user1@test.com' .. 'user8@test.com'\n// and the password test123 \nMeteor.startup(function () {\n  if (!Meteor.users.findOne()){\n    for (var i=1;i<9;i++){\n      var email = \"user\"+i+\"@test.com\";\n      var username = \"user\"+i;\n      var avatar = \"ava\"+i+\".png\"\n      console.log(\"creating a user with password 'test123' and username/ email: \"+email);\n      Meteor.users.insert({profile:{username:username, avatar:avatar}, emails:[{address:email}],services:{ password:{\"bcrypt\" : \"$2a$10$I3erQ084OiyILTv8ybtQ4ON6wusgPbMZ6.P33zzSDei.BbDL.Q4EO\"}}});\n    }\n  }\n});\n"]}}]