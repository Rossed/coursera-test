{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/lib/routes.js","filenameRelative":"/lib/routes.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/lib/routes.js.map","sourceFileName":"/lib/routes.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"routes"},"ignored":false,"code":"// set up the main template the the router will use to build pages\nRouter.configure({\n  layoutTemplate: 'ApplicationLayout'\n});\n// specify the top level route, the page users see when they arrive at the site\nRouter.route('/', function () {\n  this.render(\"navbar\", { to: \"header\" });\n  this.render(\"lobby_page\", { to: \"main\" });\n});\n\n// specify a route that allows the current user to chat to another users\nRouter.route('/chat/:_id', function () {\n  Meteor.call(\"getChat\", this.params._id, function (error, result) {\n    Session.set(\"chatId\", result);\n  });\n  // // the user they want to chat to has id equal to\n  // // the id sent in after /chat/...\n  // var otherUserId = this.params._id;\n  // // find a chat that has two users that match current user id\n  // // and the requested user id\n  // var filter = {$or:[\n  //             {user1Id:Meteor.userId(), user2Id:otherUserId},\n  //             {user2Id:Meteor.userId(), user1Id:otherUserId}\n  //             ]};\n  // var chat = Chats.findOne(filter);\n  // if (!chat){// no chat matching the filter - need to insert a new one\n  //   chatId = Chats.insert({user1Id:Meteor.userId(), user2Id:otherUserId});\n  // }\n  // else {// there is a chat going already - use that.\n  //   chatId = chat._id;\n  // }\n  // if (chatId){// looking good, save the id to the session\n  //   Session.set(\"chatId\",chatId);\n  // }\n  this.render(\"navbar\", { to: \"header\" });\n  this.render(\"chat_page\", { to: \"main\" });\n});\nRouter.route('/about', function () {\n  this.render(\"navbar\", { to: \"header\" });\n  this.render(\"about\", { to: \"main\" });\n});","ast":null,"map":{"version":3,"sources":["/lib/routes.js"],"names":[],"mappings":";AACA,OAAO,SAAP,CAAiB;AACf,kBAAgB,mBAAhB;CADF;;AAIA,OAAO,KAAP,CAAa,GAAb,EAAkB,YAAY;AAC5B,OAAK,MAAL,CAAY,QAAZ,EAAsB,EAAC,IAAG,QAAH,EAAvB,EAD4B;AAE5B,OAAK,MAAL,CAAY,YAAZ,EAA0B,EAAC,IAAG,MAAH,EAA3B,EAF4B;CAAZ,CAAlB;;;AAMA,OAAO,KAAP,CAAa,YAAb,EAA2B,YAAY;AACrC,SAAO,IAAP,CAAY,SAAZ,EAAuB,KAAK,MAAL,CAAY,GAAZ,EAAiB,UAAS,KAAT,EAAgB,MAAhB,EAAuB;AAC7D,YAAQ,GAAR,CAAY,QAAZ,EAAqB,MAArB,EAD6D;GAAvB,CAAxC;;;;;;;;;;;;;;;;;;;;AADqC,MAuBrC,CAAK,MAAL,CAAY,QAAZ,EAAsB,EAAC,IAAG,QAAH,EAAvB,EAvBqC;AAwBrC,OAAK,MAAL,CAAY,WAAZ,EAAyB,EAAC,IAAG,MAAH,EAA1B,EAxBqC;CAAZ,CAA3B;AA0BA,OAAO,KAAP,CAAa,QAAb,EAAuB,YAAY;AACjC,OAAK,MAAL,CAAY,QAAZ,EAAsB,EAAC,IAAG,QAAH,EAAvB,EADiC;AAEjC,OAAK,MAAL,CAAY,OAAZ,EAAqB,EAAC,IAAG,MAAH,EAAtB,EAFiC;CAAZ,CAAvB","file":"/lib/routes.js.map","sourcesContent":["// set up the main template the the router will use to build pages\nRouter.configure({\n  layoutTemplate: 'ApplicationLayout'\n});\n// specify the top level route, the page users see when they arrive at the site\nRouter.route('/', function () {\n  this.render(\"navbar\", {to:\"header\"});\n  this.render(\"lobby_page\", {to:\"main\"});\n});\n\n// specify a route that allows the current user to chat to another users\nRouter.route('/chat/:_id', function () {\n  Meteor.call(\"getChat\", this.params._id, function(error, result){\n    Session.set(\"chatId\",result);\n  });\n  // // the user they want to chat to has id equal to\n  // // the id sent in after /chat/...\n  // var otherUserId = this.params._id;\n  // // find a chat that has two users that match current user id\n  // // and the requested user id\n  // var filter = {$or:[\n  //             {user1Id:Meteor.userId(), user2Id:otherUserId},\n  //             {user2Id:Meteor.userId(), user1Id:otherUserId}\n  //             ]};\n  // var chat = Chats.findOne(filter);\n  // if (!chat){// no chat matching the filter - need to insert a new one\n  //   chatId = Chats.insert({user1Id:Meteor.userId(), user2Id:otherUserId});\n  // }\n  // else {// there is a chat going already - use that.\n  //   chatId = chat._id;\n  // }\n  // if (chatId){// looking good, save the id to the session\n  //   Session.set(\"chatId\",chatId);\n  // }\n  this.render(\"navbar\", {to:\"header\"});\n  this.render(\"chat_page\", {to:\"main\"});\n});\nRouter.route('/about', function () {\n  this.render(\"navbar\", {to:\"header\"});\n  this.render(\"about\", {to:\"main\"});\n});\n"]},"hash":"c98146bf2a868b09aa5ddd17436fef9444869dbb"}
