[{"type":"js","data":"/* Imports for global scope */\n\nMongo = Package.mongo.Mongo;\nSession = Package.session.Session;\n$ = Package.jquery.$;\njQuery = Package.jquery.jQuery;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\naccountsUIBootstrap3 = Package['ian:accounts-ui-bootstrap-3'].accountsUIBootstrap3;\nEmojis = Package['lookback:emoji'].Emojis;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nTemplate = Package.templating.Template;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nReload = Package.reload.Reload;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"client\":{\"template.minstant.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// client/template.minstant.js                                                                      //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\n                                                                                                    // 1\nTemplate.body.addContent((function() {                                                              // 2\n  var view = this;                                                                                  // 3\n  return \"\";                                                                                        // 4\n}));                                                                                                // 5\nMeteor.startup(Template.body.renderToDocument);                                                     // 6\n                                                                                                    // 7\nTemplate.__checkName(\"ApplicationLayout\");                                                          // 8\nTemplate[\"ApplicationLayout\"] = new Template(\"Template.ApplicationLayout\", (function() {            // 9\n  var view = this;                                                                                  // 10\n  return [ Blaze._TemplateWith(function() {                                                         // 11\n    return \"header\";                                                                                // 12\n  }, function() {                                                                                   // 13\n    return Spacebars.include(view.lookupTemplate(\"yield\"));                                         // 14\n  }), \"\\n\t\\n\t\", HTML.DIV({                                                                          // 15\n    \"class\": \"container\"                                                                            // 16\n  }, \"\\n\t\", Blaze._TemplateWith(function() {                                                        // 17\n    return \"main\";                                                                                  // 18\n  }, function() {                                                                                   // 19\n    return Spacebars.include(view.lookupTemplate(\"yield\"));                                         // 20\n  }), \"\\n\t\") ];                                                                                     // 21\n}));                                                                                                // 22\n                                                                                                    // 23\nTemplate.__checkName(\"navbar\");                                                                     // 24\nTemplate[\"navbar\"] = new Template(\"Template.navbar\", (function() {                                  // 25\n  var view = this;                                                                                  // 26\n  return HTML.NAV({                                                                                 // 27\n    \"class\": \"navbar navbar-default\"                                                                // 28\n  }, \"\\n  \", HTML.DIV({                                                                             // 29\n    \"class\": \"container-fluid\"                                                                      // 30\n  }, \"\\n    \", HTML.Raw('<div class=\"navbar-header\">\\n      <a class=\"navbar-brand\" href=\"/\">\\n        Minstant!\\n      </a>\\n    </div>'), \"\\n    \", HTML.DIV({\n    \"class\": \"nav navbar-nav navbar-right\"                                                          // 32\n  }, \"\\n    \", Spacebars.include(view.lookupTemplate(\"loginButtons\")), \"\\n\"), \"\\n  \"), \"\\n\");       // 33\n}));                                                                                                // 34\n                                                                                                    // 35\nTemplate.__checkName(\"lobby_page\");                                                                 // 36\nTemplate[\"lobby_page\"] = new Template(\"Template.lobby_page\", (function() {                          // 37\n  var view = this;                                                                                  // 38\n  return Spacebars.include(view.lookupTemplate(\"available_user_list\"));                             // 39\n}));                                                                                                // 40\n                                                                                                    // 41\nTemplate.__checkName(\"available_user_list\");                                                        // 42\nTemplate[\"available_user_list\"] = new Template(\"Template.available_user_list\", (function() {        // 43\n  var view = this;                                                                                  // 44\n  return [ HTML.Raw('<h2 class=\"text-center\">Choose someone to chat with:</h2>\\n\t'), HTML.DIV({     // 45\n    \"class\": \"row\"                                                                                  // 46\n  }, \"\\n\t\t\", HTML.DIV({                                                                             // 47\n    \"class\": \"col-md-6\"                                                                             // 48\n  }, \"\\n\t\t\", HTML.Raw('<h2 class=\"text-center\">Online</h2>'), \"\\n\t\t\", Blaze.Each(function() {       // 49\n    return Spacebars.call(view.lookup(\"users\"));                                                    // 50\n  }, function() {                                                                                   // 51\n    return [ \"\\n\t\t\t\", Blaze.If(function() {                                                         // 52\n      return Spacebars.dataMustache(view.lookup(\"isMyUser\"), view.lookup(\"_id\"));                   // 53\n    }, function() {                                                                                 // 54\n      return \"\\n\t\t\t\";                                                                               // 55\n    }, function() {                                                                                 // 56\n      return [ \"\\n\t\t\t\t\", Blaze.If(function() {                                                      // 57\n        return Spacebars.dataMustache(view.lookup(\"online\"), view.lookup(\"_id\"));                   // 58\n      }, function() {                                                                               // 59\n        return [ \"\\n\t\t\t\t\t\t\", Spacebars.include(view.lookupTemplate(\"online_user\")), \"\\n\t\t\t\t\" ];     // 60\n      }), \"\\n\t\t\t\" ];                                                                                // 61\n    }), \"\\n\t\t\" ];                                                                                   // 62\n  }), \"\\n\t\t\"), \"\\n\t\t\", HTML.DIV({                                                                   // 63\n    \"class\": \"col-md-6\"                                                                             // 64\n  }, \"\\n\t\t\", HTML.Raw('<h2 class=\"text-center\">Offline</h2>'), \"\\n\t\t\", Blaze.Each(function() {      // 65\n    return Spacebars.call(view.lookup(\"users\"));                                                    // 66\n  }, function() {                                                                                   // 67\n    return [ \"\\n\t\t\t\", Blaze.If(function() {                                                         // 68\n      return Spacebars.dataMustache(view.lookup(\"isMyUser\"), view.lookup(\"_id\"));                   // 69\n    }, function() {                                                                                 // 70\n      return \"\\n\t\t\t\";                                                                               // 71\n    }, function() {                                                                                 // 72\n      return [ \"\\n\t\t\t\t\", Blaze.If(function() {                                                      // 73\n        return Spacebars.dataMustache(view.lookup(\"online\"), view.lookup(\"_id\"));                   // 74\n      }, function() {                                                                               // 75\n        return \"\\n\t\t\t\t\";                                                                            // 76\n      }, function() {                                                                               // 77\n        return [ \"\\n\t\t\t\t\t\t\", Spacebars.include(view.lookupTemplate(\"offline_user\")), \"\\n\t\t\t\t\" ];    // 78\n      }), \"\\n\t\t\t\" ];                                                                                // 79\n    }), \"\\n\t\t\" ];                                                                                   // 80\n  }), \"\\n\t\t\"), \"\\n\\n\\n\t\t\t\", HTML.Raw(\"<!-- {{> available_user}} -->\"), \"\\n\t\") ];                    // 81\n}));                                                                                                // 82\n                                                                                                    // 83\nTemplate.__checkName(\"online_user\");                                                                // 84\nTemplate[\"online_user\"] = new Template(\"Template.online_user\", (function() {                        // 85\n  var view = this;                                                                                  // 86\n  return HTML.DIV({                                                                                 // 87\n    \"class\": \"row\"                                                                                  // 88\n  }, HTML.Raw('\\n\t<div class=\"col-xs-4\"></div>\\n\t\t'), HTML.DIV({                                    // 89\n    \"class\": \"col-xs-4 display_username online\"                                                     // 90\n  }, \"\\n\t\t\t\", HTML.A({                                                                              // 91\n    href: function() {                                                                              // 92\n      return [ \"/chat/\", Spacebars.mustache(view.lookup(\"_id\")) ];                                  // 93\n    }                                                                                               // 94\n  }, \"\\n\t\t\t\t\", HTML.DIV({                                                                           // 95\n    \"class\": \"div_username\"                                                                         // 96\n  }, \"\\n\t\t\t\t\t\", HTML.DIV(\"\\n\t\t\t\t\t\", HTML.Raw('<div id=\"circle\" class=\"pull-left\"></div>'), HTML.P({\n    \"class\": \"inline username\"                                                                      // 98\n  }, Blaze.View(\"lookup:getUsername\", function() {                                                  // 99\n    return Spacebars.mustache(view.lookup(\"getUsername\"), view.lookup(\"_id\"));                      // 100\n  })), \"\\n\t\t\t\t\t\"), \"\\n\t\t\t\t\"), \"\\n\t\t\t\t\", HTML.DIV({                                                  // 101\n    \"class\": \"display_pic\"                                                                          // 102\n  }, \"\\n\t\t\t\t\t\", HTML.DIV({                                                                          // 103\n    \"class\": \"background_avatar_img\"                                                                // 104\n  }, \"\\n\t\t\t\t\t\t\", HTML.IMG({                                                                         // 105\n    src: function() {                                                                               // 106\n      return [ \"/\", Spacebars.mustache(Spacebars.dot(view.lookup(\"profile\"), \"avatar\")) ];          // 107\n    },                                                                                              // 108\n    \"class\": \"avatar_img\"                                                                           // 109\n  }), \"\\n\t\t\t\t\t\"), \"\\n\t\t\t\t\"), \"\\n\t\t\t\"), \"\\n\t\t\"), HTML.Raw('\\n\t\t<div class=\"col-xs-4\"></div>\\n\t'));   // 110\n}));                                                                                                // 111\n                                                                                                    // 112\nTemplate.__checkName(\"offline_user\");                                                               // 113\nTemplate[\"offline_user\"] = new Template(\"Template.offline_user\", (function() {                      // 114\n  var view = this;                                                                                  // 115\n  return HTML.DIV({                                                                                 // 116\n    \"class\": \"row\"                                                                                  // 117\n  }, HTML.Raw('\\n\t\t<div class=\"col-xs-4\"></div>\\n\t\t'), HTML.DIV({                                   // 118\n    \"class\": \"col-xs-4 display_username offline\"                                                    // 119\n  }, \"\\n\t\t\t\", HTML.A({                                                                              // 120\n    href: function() {                                                                              // 121\n      return [ \"/chat/\", Spacebars.mustache(view.lookup(\"_id\")) ];                                  // 122\n    }                                                                                               // 123\n  }, \"\\n\t\t\t\", HTML.DIV({                                                                            // 124\n    \"class\": \"div_username\"                                                                         // 125\n  }, \"\\n\t\t\t\t\", HTML.DIV(\"\\n\t\t\t\t\", HTML.Raw('<div id=\"circle\" class=\"pull-left\"></div>'), HTML.P({   // 126\n    \"class\": \"username\"                                                                             // 127\n  }, Blaze.View(\"lookup:getUsername\", function() {                                                  // 128\n    return Spacebars.mustache(view.lookup(\"getUsername\"), view.lookup(\"_id\"));                      // 129\n  })), \"\\n\t\t\t\t\"), \"\\n\t\t\t\t\"), \"\\n\t\t\t\t\", HTML.DIV({                                                   // 130\n    \"class\": \"display_pic\"                                                                          // 131\n  }, \"\\n\t\t\t\t\t\", HTML.DIV({                                                                          // 132\n    \"class\": \"background_avatar_img\"                                                                // 133\n  }, \"\\n\t\t\t\t\t\t\", HTML.IMG({                                                                         // 134\n    src: function() {                                                                               // 135\n      return [ \"/\", Spacebars.mustache(Spacebars.dot(view.lookup(\"profile\"), \"avatar\")) ];          // 136\n    },                                                                                              // 137\n    \"class\": \"avatar_img\"                                                                           // 138\n  }), \"\\n\t\t\t\t\t\"), \"\\n\t\t\t\t\"), \"\\n\t\t\t\"), \"\\n\t\t\"), HTML.Raw('\\n\t\t<div class=\"col-xs-4\"></div>\\n\t'));   // 139\n}));                                                                                                // 140\n                                                                                                    // 141\nTemplate.__checkName(\"chat_page\");                                                                  // 142\nTemplate[\"chat_page\"] = new Template(\"Template.chat_page\", (function() {                            // 143\n  var view = this;                                                                                  // 144\n  return [ HTML.DIV({                                                                               // 145\n    \"class\": \"row\"                                                                                  // 146\n  }, \"\\n\t\t\", HTML.DIV({                                                                             // 147\n    \"class\": \"col-md-12\"                                                                            // 148\n  }, \"\\n\t\t\t\", HTML.H2({                                                                             // 149\n    \"class\": \"text-center\"                                                                          // 150\n  }, \"Your talking to \", Blaze.View(\"lookup:other_user\", function() {                               // 151\n    return Spacebars.mustache(view.lookup(\"other_user\"));                                           // 152\n  })), \"\\n\t\t\t\", HTML.DIV(\"\\n\t\t\t\", Blaze.Each(function() {                                           // 153\n    return Spacebars.call(view.lookup(\"messages\"));                                                 // 154\n  }, function() {                                                                                   // 155\n    return [ \"\\n\t\t\t\t\", Spacebars.include(view.lookupTemplate(\"chat_message\")), \"\\n\t\t\t\" ];           // 156\n  }), \"\\n\t\t\t\"), \"\t\\n\t\t\"), \"\\n\t\"), \"\\n    \", HTML.DIV({                                              // 157\n    \"class\": \"row\"                                                                                  // 158\n  }, \"\\n\t\t\", HTML.DIV({                                                                             // 159\n    \"class\": \"col-md-12\"                                                                            // 160\n  }, \"\\n\t\t\", HTML.DIV({                                                                             // 161\n    \"class\": \"div-chat-input\"                                                                       // 162\n  }, \"\\n\t\t  \", HTML.Raw('<h3 class=\"text-center\">Type in the box below to send a message!</h3>'), \"\\n\t\t  \", HTML.FORM({\n    \"class\": \"js-send-chat\"                                                                         // 164\n  }, \"\\n\t\t\t\", HTML.Raw('<input class=\"input pull-left\" id=\"message_input\" type=\"text\" name=\"chat\" placeholder=\"type a message here...\">'), \"\\n\t\t\t\", HTML.Raw('<!-- <div contenteditable=\"true\" class=\"input pull-left\" id=\"message_input\">\\n \t\t\t</div>\\n -->'), \"\\n\t\t\t\", HTML.Raw(\"<!-- start emoticon dropdown menu -->\"), \"\\n\t\t    \", HTML.DIV({\n    \"class\": \"dropdown pull-left\",                                                                  // 166\n    id: \"menu-emoticon-container\"                                                                   // 167\n  }, \"\\n\t\t    \", HTML.DIV(\"\\n\t\t        \", HTML.A({                                                  // 168\n    href: \"#\",                                                                                      // 169\n    \"class\": \"dropdown-toggle\",                                                                     // 170\n    \"data-toggle\": \"dropdown\"                                                                       // 171\n  }, \" \\n\t\t        \t\", Blaze.View(\"lookup:getEmoji\", function() {                                   // 172\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"smile\");                                    // 173\n  }), \"\\n\t\t        \", HTML.Raw('<b class=\"caret\"></b>')), \"\\n\t\t        \", HTML.UL({                 // 174\n    \"class\": \"dropdown-menu js-insert-emoticon\"                                                     // 175\n  }, \"\\n\t\t            \", HTML.LI(\"\\n\t\t                \", HTML.DIV({                                 // 176\n    \"class\": \"row dropdown-list\",                                                                   // 177\n    style: \"width: 150px;\"                                                                          // 178\n  }, \"\\n\t\t                    \", HTML.UL({                                                          // 179\n    \"class\": \"list-unstyled col-md-3\"                                                               // 180\n  }, \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {             // 181\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"smile\");                                    // 182\n  })), \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {           // 183\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"blush\");                                    // 184\n  })), \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {           // 185\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"relaxed\");                                  // 186\n  })), \"\\n\t\t                    \"), \"\\n\t\t                    \", HTML.UL({                           // 187\n    \"class\": \"list-unstyled col-md-3\"                                                               // 188\n  }, \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {             // 189\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"wink\");                                     // 190\n  })), \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {           // 191\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"heart_eyes\");                               // 192\n  })), \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {           // 193\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"kissing_heart\");                            // 194\n  })), \"\\n\t\t                    \"), \"\\n\t\t                    \", HTML.UL({                           // 195\n    \"class\": \"list-unstyled col-md-3\"                                                               // 196\n  }, \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {             // 197\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"kissing_closed_eyes\");                      // 198\n  })), \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {           // 199\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"stuck_out_tongue_winking_eye\");             // 200\n  })), \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {           // 201\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"stuck_out_tongue_closed_eyes\");             // 202\n  })), \"\\n\t\t                    \"), \"\\n\t\t                    \", HTML.UL({                           // 203\n    \"class\": \"list-unstyled col-md-3\"                                                               // 204\n  }, \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {             // 205\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"grin\");                                     // 206\n  })), \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {           // 207\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"pensive\");                                  // 208\n  })), \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {           // 209\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"disappointed\");                             // 210\n  })), \"\\n\t\t                    \"), \"\\n\t\t                \"), \"\\n\t\t            \"), \"\\n\t\t        \"), \"\\n\t\t        \"), \"\\n\t\t    \"), \"\\n\t\t\t\", HTML.Raw(\"<!-- end emoticon dropdown menu -->\"), \"\\n\\n\t\t\t\", HTML.Raw('<button class=\"btn btn-primary\" id=\"btn-chat-send\">send</button>'), \"\\n\t\t  \"), \"\\n\t\t\"), \"\\n\t\t\"), \"\\n\t\") ];\n}));                                                                                                // 212\n                                                                                                    // 213\nTemplate.__checkName(\"chat_message\");                                                               // 214\nTemplate[\"chat_message\"] = new Template(\"Template.chat_message\", (function() {                      // 215\n  var view = this;                                                                                  // 216\n  return HTML.DIV({                                                                                 // 217\n    \"class\": \"row\"                                                                                  // 218\n  }, \"\\n\t\", HTML.DIV({                                                                              // 219\n    \"class\": function() {                                                                           // 220\n      return [ \"well well-lg \", Spacebars.mustache(view.lookup(\"message_sender\")) ];                // 221\n    },                                                                                              // 222\n    id: \"message\"                                                                                   // 223\n  }, \"\\n\t  \", HTML.IMG({                                                                            // 224\n    src: function() {                                                                               // 225\n      return [ \"/\", Spacebars.mustache(view.lookup(\"display_pic\")) ];                               // 226\n    },                                                                                              // 227\n    height: \"20px\",                                                                                 // 228\n    width: \"20px\"                                                                                   // 229\n  }), \"  said: \", Blaze.View(\"lookup:text\", function() {                                            // 230\n    return Spacebars.mustache(view.lookup(\"text\"));                                                 // 231\n  }), \"\\n\t  \", HTML.Raw(\"<br>\"), \"\\n\t\"), \"\\n  \");                                                   // 232\n}));                                                                                                // 233\n                                                                                                    // 234\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// client/main.js                                                                                   //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\nMeteor.subscribe(\"chats\", function () {                                                             // 1\n  Session.set('db_data_loaded', true);                                                              // 2\n});                                                                                                 //\nMeteor.subscribe(\"users\");                                                                          // 4\n                                                                                                    //\nMeteor.startup(function () {                                                                        // 6\n  Session.set('db_data_loaded', false);                                                             // 7\n  Meteor.subscribe('emojis');                                                                       // 8\n});                                                                                                 //\n// set up the main template the the router will use to build pages                                  //\nRouter.configure({                                                                                  // 11\n  layoutTemplate: 'ApplicationLayout'                                                               // 12\n});                                                                                                 //\n// specify the top level route, the page users see when they arrive at the site                     //\nRouter.route('/', function () {                                                                     // 15\n  console.log(\"rendering root /\");                                                                  // 16\n  this.render(\"navbar\", { to: \"header\" });                                                          // 17\n  this.render(\"lobby_page\", { to: \"main\" });                                                        // 18\n});                                                                                                 //\n                                                                                                    //\n// specify a route that allows the current user to chat to another users                            //\nRouter.route('/chat/:_id', function () {                                                            // 22\n  // the user they want to chat to has id equal to                                                  //\n  // the id sent in after /chat/...                                                                 //\n  var otherUserId = this.params._id;                                                                // 25\n  // find a chat that has two users that match current user id                                      //\n  // and the requested user id                                                                      //\n  var filter = { $or: [{ user1Id: Meteor.userId(), user2Id: otherUserId }, { user2Id: Meteor.userId(), user1Id: otherUserId }] };\n  var chat = Chats.findOne(filter);                                                                 // 32\n  if (Session.get('db_data_loaded')) {                                                              // 33\n    if (!chat) {                                                                                    // 34\n      // no chat matching the filter - need to insert a new one                                     //\n      chatId = Meteor.call('insertChat', otherUserId);                                              // 35\n      console.log(\"no chat matching the filter - need to insert a new one\");                        // 36\n    } else {                                                                                        //\n      // there is a chat going already - use that.                                                  //\n      console.log(\"there is a chat going already - use that.\");                                     // 39\n      chatId = chat._id;                                                                            // 40\n    }                                                                                               //\n    if (chatId) {                                                                                   // 42\n      // looking good, save the id to the session                                                   //\n      Session.set(\"chatId\", chatId);                                                                // 43\n    }                                                                                               //\n  }                                                                                                 //\n  this.render(\"navbar\", { to: \"header\" });                                                          // 46\n  this.render(\"chat_page\", { to: \"main\" });                                                         // 47\n});                                                                                                 //\n                                                                                                    //\n///                                                                                                 //\n// helper functions                                                                                 //\n///                                                                                                 //\nTemplate.available_user_list.helpers({                                                              // 53\n  users: function () {                                                                              // 54\n    function users() {                                                                              // 54\n      return Meteor.users.find();                                                                   // 55\n    }                                                                                               //\n                                                                                                    //\n    return users;                                                                                   //\n  }(),                                                                                              //\n  isMyUser: function () {                                                                           // 57\n    function isMyUser(userId) {                                                                     // 57\n      if (userId == Meteor.userId()) {                                                              // 58\n        return true;                                                                                // 59\n      } else {                                                                                      //\n        return false;                                                                               // 62\n      }                                                                                             //\n    }                                                                                               //\n                                                                                                    //\n    return isMyUser;                                                                                //\n  }(),                                                                                              //\n  online: function () {                                                                             // 65\n    function online(userId) {                                                                       // 65\n      if (Meteor.users.findOne({ _id: userId }).services.resume && Meteor.users.findOne({ _id: userId }).services.resume.loginTokens.length > 0) {\n        return true;                                                                                // 68\n      } else {                                                                                      //\n        return false;                                                                               // 70\n      }                                                                                             //\n    }                                                                                               //\n                                                                                                    //\n    return online;                                                                                  //\n  }()                                                                                               //\n                                                                                                    //\n});                                                                                                 //\nTemplate.online_user.helpers({                                                                      // 75\n  getUsername: function () {                                                                        // 76\n    function getUsername(userId) {                                                                  // 76\n      user = Meteor.users.findOne({ _id: userId });                                                 // 77\n      return user.profile.username;                                                                 // 78\n    }                                                                                               //\n                                                                                                    //\n    return getUsername;                                                                             //\n  }()                                                                                               //\n});                                                                                                 //\nTemplate.offline_user.helpers({                                                                     // 81\n  getUsername: function () {                                                                        // 82\n    function getUsername(userId) {                                                                  // 82\n      user = Meteor.users.findOne({ _id: userId });                                                 // 83\n      return user.profile.username;                                                                 // 84\n    }                                                                                               //\n                                                                                                    //\n    return getUsername;                                                                             //\n  }()                                                                                               //\n});                                                                                                 //\n// Template.available_user.helpers({                                                                //\n//    getUsername:function(userId){                                                                 //\n//      user = Meteor.users.findOne({_id:userId});                                                  //\n//      return user.profile.username;                                                               //\n//    },                                                                                            //\n//    isMyUser:function(userId){                                                                    //\n//      if (userId == Meteor.userId()){                                                             //\n//        return true;                                                                              //\n//      }                                                                                           //\n//      else {                                                                                      //\n//        return false;                                                                             //\n//      }                                                                                           //\n//    },                                                                                            //\n//    online:function(userId) {                                                                     //\n//    \tif(Meteor.users.findOne({_id:userId}).services.resume &&                                     //\n//    \t\tMeteor.users.findOne({_id:userId}).services.resume.loginTokens.length > 0) {                //\n//    \t\treturn true;                                                                                //\n//    \t} else {                                                                                     //\n//    \t\treturn false                                                                                //\n//    \t}                                                                                            //\n//    }                                                                                             //\n//  })                                                                                              //\nTemplate.chat_page.helpers({                                                                        // 109\n  messages: function () {                                                                           // 110\n    function messages() {                                                                           // 110\n      var chat = Chats.findOne({ _id: Session.get(\"chatId\") });                                     // 111\n      return chat.messages;                                                                         // 112\n    }                                                                                               //\n                                                                                                    //\n    return messages;                                                                                //\n  }(),                                                                                              //\n  other_user: function () {                                                                         // 114\n    function other_user() {                                                                         // 114\n      var chat = Chats.findOne({ _id: Session.get(\"chatId\") });                                     // 115\n      console.log(chat.user1Id);                                                                    // 116\n      if (Meteor.userId() == chat.user1Id) {                                                        // 117\n        var username = Meteor.users.findOne({ _id: chat.user2Id }).profile.username;                // 118\n        return username;                                                                            // 119\n      } else {                                                                                      //\n        var username = Meteor.users.findOne({ _id: chat.user1Id }).profile.username;                // 121\n        return username;                                                                            // 122\n      }                                                                                             //\n    }                                                                                               //\n                                                                                                    //\n    return other_user;                                                                              //\n  }(),                                                                                              //\n  getEmoji: function () {                                                                           // 125\n    function getEmoji(emoji) {                                                                      // 125\n      return Emojis.findOne({ alias: emoji }).emoji;                                                // 126\n    }                                                                                               //\n                                                                                                    //\n    return getEmoji;                                                                                //\n  }()                                                                                               //\n});                                                                                                 //\nTemplate.chat_message.helpers({                                                                     // 129\n  display_pic: function () {                                                                        // 130\n    function display_pic() {                                                                        // 130\n      return this.sender.profile.avatar;                                                            // 131\n    }                                                                                               //\n                                                                                                    //\n    return display_pic;                                                                             //\n  }(),                                                                                              //\n  message_sender: function () {                                                                     // 133\n    function message_sender() {                                                                     // 133\n      if (this.sender._id == Meteor.user()._id) {                                                   // 134\n        return \"floatMeRight\";                                                                      // 135\n      } else {                                                                                      //\n        return;                                                                                     // 137\n      };                                                                                            //\n    }                                                                                               //\n                                                                                                    //\n    return message_sender;                                                                          //\n  }()                                                                                               //\n});                                                                                                 //\n                                                                                                    //\n///                                                                                                 //\n// event helpers                                                                                    //\n///                                                                                                 //\n                                                                                                    //\nTemplate.chat_page.events({                                                                         // 146\n  // this event fires when the user sends a message on the chat page                                //\n  'submit .js-send-chat': function () {                                                             // 148\n    function submitJsSendChat(event) {                                                              // 148\n      // stop the form from triggering a page reload                                                //\n      event.preventDefault();                                                                       // 150\n      // see if we can find a chat object in the database                                           //\n      // to which we'll add the message                                                             //\n      var chat = Chats.findOne({ _id: Session.get(\"chatId\") });                                     // 148\n      if (chat) {                                                                                   // 154\n        // ok - we have a chat to use                                                               //\n        var msgs = chat.messages; // pull the messages property                                     // 155\n        if (!msgs) {                                                                                // 154\n          // no messages yet, create a new array                                                    //\n          msgs = [];                                                                                // 157\n        }                                                                                           //\n        // is a good idea to insert data straight from the form                                     //\n        // (i.e. the user) into the database?? certainly not.                                       //\n        // push adds the message to the end of the array                                            //\n        msgs.push({                                                                                 // 154\n          sender: Meteor.user(),                                                                    // 163\n          text: event.target.chat.value                                                             // 164\n        });                                                                                         //\n        // reset the form                                                                           //\n        // document.querySelector('[contenteditable]').textContent = \"\";                            //\n        event.target.chat.value = \"\";                                                               // 154\n        // put the messages array onto the chat object                                              //\n        chat.messages = msgs;                                                                       // 154\n        // update the chat object in the database.                                                  //\n        // Chats.update(chat._id, chat);                                                            //\n        Meteor.call('updateChat', chat);                                                            // 154\n      }                                                                                             //\n    }                                                                                               //\n                                                                                                    //\n    return submitJsSendChat;                                                                        //\n  }(),                                                                                              //\n  'click .js-insert-emoticon': function () {                                                        // 176\n    function clickJsInsertEmoticon(event) {                                                         // 176\n      console.log($('#message_input').val());                                                       // 177\n      console.log(event.target.textContent);                                                        // 178\n      $('#message_input').val($('#message_input').val() + event.target.textContent);                // 179\n    }                                                                                               //\n                                                                                                    //\n    return clickJsInsertEmoticon;                                                                   //\n  }()                                                                                               //\n});                                                                                                 //\n                                                                                                    //\n///                                                                                                 //\n// onRendered                                                                                       //\n///                                                                                                 //\n                                                                                                    //\nTemplate.online_user.onRendered(function () {                                                       // 188\n  $(\".display_username\").hover(function () {                                                        // 189\n    $(this.firstChild.nextElementSibling.children[1]).css(\"display\", \"unset\");                      // 191\n    $(this.firstChild.nextElementSibling.children[0]).css(\"border-bottom-left-radius\", \"0px\");      // 192\n    $(this.firstChild.nextElementSibling.children[0]).css(\"border-bottom-right-radius\", \"0px\");     // 193\n  }, function () {                                                                                  //\n    $(this.firstChild.nextElementSibling.children[1]).css(\"display\", \"none\");                       // 195\n    $(this.firstChild.nextElementSibling.children[0]).css(\"border-bottom-left-radius\", \"4px\");      // 196\n    $(this.firstChild.nextElementSibling.children[0]).css(\"border-bottom-right-radius\", \"4px\");     // 197\n  });                                                                                               //\n});                                                                                                 //\nTemplate.offline_user.onRendered(function () {                                                      // 201\n  $(\".display_username\").hover(function () {                                                        // 202\n    $(this.firstChild.nextElementSibling.children[1]).css(\"display\", \"unset\");                      // 204\n    $(this.firstChild.nextElementSibling.children[0]).css(\"border-bottom-left-radius\", \"0px\");      // 205\n    $(this.firstChild.nextElementSibling.children[0]).css(\"border-bottom-right-radius\", \"0px\");     // 206\n  }, function () {                                                                                  //\n    $(this.firstChild.nextElementSibling.children[1]).css(\"display\", \"none\");                       // 208\n    $(this.firstChild.nextElementSibling.children[0]).css(\"border-bottom-left-radius\", \"4px\");      // 209\n    $(this.firstChild.nextElementSibling.children[0]).css(\"border-bottom-right-radius\", \"4px\");     // 210\n  });                                                                                               //\n});                                                                                                 //\n                                                                                                    //\nAccounts.ui.config({                                                                                // 215\n  requestPermissions: {},                                                                           // 216\n  extraSignupFields: [{                                                                             // 217\n    fieldName: 'username',                                                                          // 218\n    fieldLabel: 'Username',                                                                         // 219\n    inputType: 'text',                                                                              // 220\n    visible: true,                                                                                  // 221\n    validate: function () {                                                                         // 222\n      function validate(value, errorFunction) {                                                     // 222\n        if (!value) {                                                                               // 223\n          errorFunction(\"Please enter a username\");                                                 // 224\n          return false;                                                                             // 225\n        } else {                                                                                    //\n          return true;                                                                              // 227\n        }                                                                                           //\n      }                                                                                             //\n                                                                                                    //\n      return validate;                                                                              //\n    }()                                                                                             //\n  }, {                                                                                              //\n    fieldName: 'gender',                                                                            // 231\n    showFieldLabel: false, // If true, fieldLabel will be shown before radio group                  // 232\n    fieldLabel: 'Gender',                                                                           // 233\n    inputType: 'radio',                                                                             // 234\n    radioLayout: 'vertical', // It can be 'inline' or 'vertical'                                    // 235\n    data: [{ // Array of radio options, all properties are required                                 // 236\n      id: 1, // id suffix of the radio element                                                      // 237\n      label: 'Male', // label for the radio element                                                 // 238\n      value: 'm' // value of the radio element, this will be saved.                                 // 239\n    }, {                                                                                            // 236\n      id: 2,                                                                                        // 241\n      label: 'Female',                                                                              // 242\n      value: 'f',                                                                                   // 243\n      checked: 'checked'                                                                            // 244\n    }],                                                                                             //\n    visible: true                                                                                   // 246\n  }, {                                                                                              //\n    fieldName: 'avatar',                                                                            // 248\n    showFieldLabel: false, // If true, fieldLabel will be shown before radio group                  // 249\n    fieldLabel: 'Avatar',                                                                           // 250\n    inputType: 'text',                                                                              // 251\n    visible: false                                                                                  // 252\n  }, {                                                                                              //\n    fieldName: 'terms',                                                                             // 254\n    fieldLabel: 'I accept the terms and conditions',                                                // 255\n    inputType: 'checkbox',                                                                          // 256\n    visible: true,                                                                                  // 257\n    saveToProfile: false,                                                                           // 258\n    validate: function () {                                                                         // 259\n      function validate(value, errorFunction) {                                                     // 259\n        if (value) {                                                                                // 260\n          return true;                                                                              // 261\n        } else {                                                                                    //\n          errorFunction('You must accept the terms and conditions.');                               // 263\n          return false;                                                                             // 264\n        }                                                                                           //\n      }                                                                                             //\n                                                                                                    //\n      return validate;                                                                              //\n    }()                                                                                             //\n  }]                                                                                                //\n});                                                                                                 //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lib\":{\"collections.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// lib/collections.js                                                                               //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\nChats = new Mongo.Collection(\"chats\");                                                              // 1\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"shared\":{\"main.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// shared/main.js                                                                                   //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\n///                                                                                                 //\n// Shared Folder                                                                                    //\n///                                                                                                 //\n                                                                                                    //\nMeteor.methods({                                                                                    // 5\n\tinsertChat: function () {                                                                          // 6\n\t\tfunction insertChat(otherUserId) {                                                                // 6\n\t\t\tchatId = Chats.insert({ user1Id: Meteor.userId(), user2Id: otherUserId });                       // 7\n\t\t\treturn chatId;                                                                                   // 8\n\t\t}                                                                                                 //\n                                                                                                    //\n\t\treturn insertChat;                                                                                //\n\t}(),                                                                                               //\n\tupdateChat: function () {                                                                          // 10\n\t\tfunction updateChat(chat) {                                                                       // 10\n\t\t\tChats.update(chat._id, chat);                                                                    // 11\n\t\t}                                                                                                 //\n                                                                                                    //\n\t\treturn updateChat;                                                                                //\n\t}()                                                                                                //\n});                                                                                                 //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\"extensions\":[\".js\",\".json\",\".html\",\".css\"]});\nrequire(\"./client/template.minstant.js\");\nrequire(\"./lib/collections.js\");\nrequire(\"./client/main.js\");\nrequire(\"./shared/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/client/template.minstant.js","/client/main.js","/lib/collections.js","/shared/main.js"],"names":[],"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","file":"/app.js","sourcesContent":["\nTemplate.body.addContent((function() {\n  var view = this;\n  return \"\";\n}));\nMeteor.startup(Template.body.renderToDocument);\n\nTemplate.__checkName(\"ApplicationLayout\");\nTemplate[\"ApplicationLayout\"] = new Template(\"Template.ApplicationLayout\", (function() {\n  var view = this;\n  return [ Blaze._TemplateWith(function() {\n    return \"header\";\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"yield\"));\n  }), \"\\n\t\\n\t\", HTML.DIV({\n    \"class\": \"container\"\n  }, \"\\n\t\", Blaze._TemplateWith(function() {\n    return \"main\";\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"yield\"));\n  }), \"\\n\t\") ];\n}));\n\nTemplate.__checkName(\"navbar\");\nTemplate[\"navbar\"] = new Template(\"Template.navbar\", (function() {\n  var view = this;\n  return HTML.NAV({\n    \"class\": \"navbar navbar-default\"\n  }, \"\\n  \", HTML.DIV({\n    \"class\": \"container-fluid\"\n  }, \"\\n    \", HTML.Raw('<div class=\"navbar-header\">\\n      <a class=\"navbar-brand\" href=\"/\">\\n        Minstant!\\n      </a>\\n    </div>'), \"\\n    \", HTML.DIV({\n    \"class\": \"nav navbar-nav navbar-right\"\n  }, \"\\n    \", Spacebars.include(view.lookupTemplate(\"loginButtons\")), \"\\n\"), \"\\n  \"), \"\\n\");\n}));\n\nTemplate.__checkName(\"lobby_page\");\nTemplate[\"lobby_page\"] = new Template(\"Template.lobby_page\", (function() {\n  var view = this;\n  return Spacebars.include(view.lookupTemplate(\"available_user_list\"));\n}));\n\nTemplate.__checkName(\"available_user_list\");\nTemplate[\"available_user_list\"] = new Template(\"Template.available_user_list\", (function() {\n  var view = this;\n  return [ HTML.Raw('<h2 class=\"text-center\">Choose someone to chat with:</h2>\\n\t'), HTML.DIV({\n    \"class\": \"row\"\n  }, \"\\n\t\t\", HTML.DIV({\n    \"class\": \"col-md-6\"\n  }, \"\\n\t\t\", HTML.Raw('<h2 class=\"text-center\">Online</h2>'), \"\\n\t\t\", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"users\"));\n  }, function() {\n    return [ \"\\n\t\t\t\", Blaze.If(function() {\n      return Spacebars.dataMustache(view.lookup(\"isMyUser\"), view.lookup(\"_id\"));\n    }, function() {\n      return \"\\n\t\t\t\";\n    }, function() {\n      return [ \"\\n\t\t\t\t\", Blaze.If(function() {\n        return Spacebars.dataMustache(view.lookup(\"online\"), view.lookup(\"_id\"));\n      }, function() {\n        return [ \"\\n\t\t\t\t\t\t\", Spacebars.include(view.lookupTemplate(\"online_user\")), \"\\n\t\t\t\t\" ];\n      }), \"\\n\t\t\t\" ];\n    }), \"\\n\t\t\" ];\n  }), \"\\n\t\t\"), \"\\n\t\t\", HTML.DIV({\n    \"class\": \"col-md-6\"\n  }, \"\\n\t\t\", HTML.Raw('<h2 class=\"text-center\">Offline</h2>'), \"\\n\t\t\", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"users\"));\n  }, function() {\n    return [ \"\\n\t\t\t\", Blaze.If(function() {\n      return Spacebars.dataMustache(view.lookup(\"isMyUser\"), view.lookup(\"_id\"));\n    }, function() {\n      return \"\\n\t\t\t\";\n    }, function() {\n      return [ \"\\n\t\t\t\t\", Blaze.If(function() {\n        return Spacebars.dataMustache(view.lookup(\"online\"), view.lookup(\"_id\"));\n      }, function() {\n        return \"\\n\t\t\t\t\";\n      }, function() {\n        return [ \"\\n\t\t\t\t\t\t\", Spacebars.include(view.lookupTemplate(\"offline_user\")), \"\\n\t\t\t\t\" ];\n      }), \"\\n\t\t\t\" ];\n    }), \"\\n\t\t\" ];\n  }), \"\\n\t\t\"), \"\\n\\n\\n\t\t\t\", HTML.Raw(\"<!-- {{> available_user}} -->\"), \"\\n\t\") ];\n}));\n\nTemplate.__checkName(\"online_user\");\nTemplate[\"online_user\"] = new Template(\"Template.online_user\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"row\"\n  }, HTML.Raw('\\n\t<div class=\"col-xs-4\"></div>\\n\t\t'), HTML.DIV({\n    \"class\": \"col-xs-4 display_username online\"\n  }, \"\\n\t\t\t\", HTML.A({\n    href: function() {\n      return [ \"/chat/\", Spacebars.mustache(view.lookup(\"_id\")) ];\n    }\n  }, \"\\n\t\t\t\t\", HTML.DIV({\n    \"class\": \"div_username\"\n  }, \"\\n\t\t\t\t\t\", HTML.DIV(\"\\n\t\t\t\t\t\", HTML.Raw('<div id=\"circle\" class=\"pull-left\"></div>'), HTML.P({\n    \"class\": \"inline username\"\n  }, Blaze.View(\"lookup:getUsername\", function() {\n    return Spacebars.mustache(view.lookup(\"getUsername\"), view.lookup(\"_id\"));\n  })), \"\\n\t\t\t\t\t\"), \"\\n\t\t\t\t\"), \"\\n\t\t\t\t\", HTML.DIV({\n    \"class\": \"display_pic\"\n  }, \"\\n\t\t\t\t\t\", HTML.DIV({\n    \"class\": \"background_avatar_img\"\n  }, \"\\n\t\t\t\t\t\t\", HTML.IMG({\n    src: function() {\n      return [ \"/\", Spacebars.mustache(Spacebars.dot(view.lookup(\"profile\"), \"avatar\")) ];\n    },\n    \"class\": \"avatar_img\"\n  }), \"\\n\t\t\t\t\t\"), \"\\n\t\t\t\t\"), \"\\n\t\t\t\"), \"\\n\t\t\"), HTML.Raw('\\n\t\t<div class=\"col-xs-4\"></div>\\n\t'));\n}));\n\nTemplate.__checkName(\"offline_user\");\nTemplate[\"offline_user\"] = new Template(\"Template.offline_user\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"row\"\n  }, HTML.Raw('\\n\t\t<div class=\"col-xs-4\"></div>\\n\t\t'), HTML.DIV({\n    \"class\": \"col-xs-4 display_username offline\"\n  }, \"\\n\t\t\t\", HTML.A({\n    href: function() {\n      return [ \"/chat/\", Spacebars.mustache(view.lookup(\"_id\")) ];\n    }\n  }, \"\\n\t\t\t\", HTML.DIV({\n    \"class\": \"div_username\"\n  }, \"\\n\t\t\t\t\", HTML.DIV(\"\\n\t\t\t\t\", HTML.Raw('<div id=\"circle\" class=\"pull-left\"></div>'), HTML.P({\n    \"class\": \"username\"\n  }, Blaze.View(\"lookup:getUsername\", function() {\n    return Spacebars.mustache(view.lookup(\"getUsername\"), view.lookup(\"_id\"));\n  })), \"\\n\t\t\t\t\"), \"\\n\t\t\t\t\"), \"\\n\t\t\t\t\", HTML.DIV({\n    \"class\": \"display_pic\"\n  }, \"\\n\t\t\t\t\t\", HTML.DIV({\n    \"class\": \"background_avatar_img\"\n  }, \"\\n\t\t\t\t\t\t\", HTML.IMG({\n    src: function() {\n      return [ \"/\", Spacebars.mustache(Spacebars.dot(view.lookup(\"profile\"), \"avatar\")) ];\n    },\n    \"class\": \"avatar_img\"\n  }), \"\\n\t\t\t\t\t\"), \"\\n\t\t\t\t\"), \"\\n\t\t\t\"), \"\\n\t\t\"), HTML.Raw('\\n\t\t<div class=\"col-xs-4\"></div>\\n\t'));\n}));\n\nTemplate.__checkName(\"chat_page\");\nTemplate[\"chat_page\"] = new Template(\"Template.chat_page\", (function() {\n  var view = this;\n  return [ HTML.DIV({\n    \"class\": \"row\"\n  }, \"\\n\t\t\", HTML.DIV({\n    \"class\": \"col-md-12\"\n  }, \"\\n\t\t\t\", HTML.H2({\n    \"class\": \"text-center\"\n  }, \"Your talking to \", Blaze.View(\"lookup:other_user\", function() {\n    return Spacebars.mustache(view.lookup(\"other_user\"));\n  })), \"\\n\t\t\t\", HTML.DIV(\"\\n\t\t\t\", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"messages\"));\n  }, function() {\n    return [ \"\\n\t\t\t\t\", Spacebars.include(view.lookupTemplate(\"chat_message\")), \"\\n\t\t\t\" ];\n  }), \"\\n\t\t\t\"), \"\t\\n\t\t\"), \"\\n\t\"), \"\\n    \", HTML.DIV({\n    \"class\": \"row\"\n  }, \"\\n\t\t\", HTML.DIV({\n    \"class\": \"col-md-12\"\n  }, \"\\n\t\t\", HTML.DIV({\n    \"class\": \"div-chat-input\"\n  }, \"\\n\t\t  \", HTML.Raw('<h3 class=\"text-center\">Type in the box below to send a message!</h3>'), \"\\n\t\t  \", HTML.FORM({\n    \"class\": \"js-send-chat\"\n  }, \"\\n\t\t\t\", HTML.Raw('<input class=\"input pull-left\" id=\"message_input\" type=\"text\" name=\"chat\" placeholder=\"type a message here...\">'), \"\\n\t\t\t\", HTML.Raw('<!-- <div contenteditable=\"true\" class=\"input pull-left\" id=\"message_input\">\\n \t\t\t</div>\\n -->'), \"\\n\t\t\t\", HTML.Raw(\"<!-- start emoticon dropdown menu -->\"), \"\\n\t\t    \", HTML.DIV({\n    \"class\": \"dropdown pull-left\",\n    id: \"menu-emoticon-container\"\n  }, \"\\n\t\t    \", HTML.DIV(\"\\n\t\t        \", HTML.A({\n    href: \"#\",\n    \"class\": \"dropdown-toggle\",\n    \"data-toggle\": \"dropdown\"\n  }, \" \\n\t\t        \t\", Blaze.View(\"lookup:getEmoji\", function() {\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"smile\");\n  }), \"\\n\t\t        \", HTML.Raw('<b class=\"caret\"></b>')), \"\\n\t\t        \", HTML.UL({\n    \"class\": \"dropdown-menu js-insert-emoticon\"\n  }, \"\\n\t\t            \", HTML.LI(\"\\n\t\t                \", HTML.DIV({\n    \"class\": \"row dropdown-list\",\n    style: \"width: 150px;\"\n  }, \"\\n\t\t                    \", HTML.UL({\n    \"class\": \"list-unstyled col-md-3\"\n  }, \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"smile\");\n  })), \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"blush\");\n  })), \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"relaxed\");\n  })), \"\\n\t\t                    \"), \"\\n\t\t                    \", HTML.UL({\n    \"class\": \"list-unstyled col-md-3\"\n  }, \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"wink\");\n  })), \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"heart_eyes\");\n  })), \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"kissing_heart\");\n  })), \"\\n\t\t                    \"), \"\\n\t\t                    \", HTML.UL({\n    \"class\": \"list-unstyled col-md-3\"\n  }, \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"kissing_closed_eyes\");\n  })), \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"stuck_out_tongue_winking_eye\");\n  })), \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"stuck_out_tongue_closed_eyes\");\n  })), \"\\n\t\t                    \"), \"\\n\t\t                    \", HTML.UL({\n    \"class\": \"list-unstyled col-md-3\"\n  }, \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"grin\");\n  })), \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"pensive\");\n  })), \"\\n\t\t                        \", HTML.LI(Blaze.View(\"lookup:getEmoji\", function() {\n    return Spacebars.mustache(view.lookup(\"getEmoji\"), \"disappointed\");\n  })), \"\\n\t\t                    \"), \"\\n\t\t                \"), \"\\n\t\t            \"), \"\\n\t\t        \"), \"\\n\t\t        \"), \"\\n\t\t    \"), \"\\n\t\t\t\", HTML.Raw(\"<!-- end emoticon dropdown menu -->\"), \"\\n\\n\t\t\t\", HTML.Raw('<button class=\"btn btn-primary\" id=\"btn-chat-send\">send</button>'), \"\\n\t\t  \"), \"\\n\t\t\"), \"\\n\t\t\"), \"\\n\t\") ];\n}));\n\nTemplate.__checkName(\"chat_message\");\nTemplate[\"chat_message\"] = new Template(\"Template.chat_message\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"row\"\n  }, \"\\n\t\", HTML.DIV({\n    \"class\": function() {\n      return [ \"well well-lg \", Spacebars.mustache(view.lookup(\"message_sender\")) ];\n    },\n    id: \"message\"\n  }, \"\\n\t  \", HTML.IMG({\n    src: function() {\n      return [ \"/\", Spacebars.mustache(view.lookup(\"display_pic\")) ];\n    },\n    height: \"20px\",\n    width: \"20px\"\n  }), \"  said: \", Blaze.View(\"lookup:text\", function() {\n    return Spacebars.mustache(view.lookup(\"text\"));\n  }), \"\\n\t  \", HTML.Raw(\"<br>\"), \"\\n\t\"), \"\\n  \");\n}));\n","Meteor.subscribe(\"chats\", function() {\n  \tSession.set('db_data_loaded', true);\n  });\nMeteor.subscribe(\"users\");\n\nMeteor.startup(function () {\n\tSession.set('db_data_loaded', false);\n  Meteor.subscribe('emojis');\n});\n// set up the main template the the router will use to build pages\nRouter.configure({\n  layoutTemplate: 'ApplicationLayout'\n});\n// specify the top level route, the page users see when they arrive at the site\nRouter.route('/', function () {\n  console.log(\"rendering root /\");\n  this.render(\"navbar\", {to:\"header\"});\n  this.render(\"lobby_page\", {to:\"main\"});  \n});\n\n// specify a route that allows the current user to chat to another users\nRouter.route('/chat/:_id', function () {\n  // the user they want to chat to has id equal to \n  // the id sent in after /chat/... \n  var otherUserId = this.params._id;\n  // find a chat that has two users that match current user id\n  // and the requested user id\n  var filter = {$or:[\n              {user1Id:Meteor.userId(), user2Id:otherUserId}, \n              {user2Id:Meteor.userId(), user1Id:otherUserId}\n              ]};\n  var chat = Chats.findOne(filter);\n  if (Session.get('db_data_loaded')) {\n    if (!chat){// no chat matching the filter - need to insert a new one\n      chatId = Meteor.call('insertChat', otherUserId);\n      console.log(\"no chat matching the filter - need to insert a new one\");\n    }\n    else {// there is a chat going already - use that. \n      console.log(\"there is a chat going already - use that.\");\n      chatId = chat._id;\n    }\n    if (chatId){// looking good, save the id to the session\n      Session.set(\"chatId\",chatId);\n    }\n}\n    this.render(\"navbar\", {to:\"header\"});\n    this.render(\"chat_page\", {to:\"main\"}); \n });\n\n///\n// helper functions \n/// \nTemplate.available_user_list.helpers({\n  users:function(){\n    return Meteor.users.find();\n  },\n  isMyUser:function(userId){\n    if (userId == Meteor.userId()){\n      return true;\n    }\n    else {\n      return false;\n    }\n  },\n  online:function(userId) {\n  \tif(Meteor.users.findOne({_id:userId}).services.resume &&\n  \t\tMeteor.users.findOne({_id:userId}).services.resume.loginTokens.length > 0) {\n  \t\treturn true;\n  \t} else {\n  \t\treturn false\n  \t}\n  }\n\n})\nTemplate.online_user.helpers({\n\tgetUsername:function(userId){\n    user = Meteor.users.findOne({_id:userId});\n    return user.profile.username;\n  }, \n})\nTemplate.offline_user.helpers({\n\tgetUsername:function(userId){\n    user = Meteor.users.findOne({_id:userId});\n    return user.profile.username;\n  }, \n})\n// Template.available_user.helpers({\n//    getUsername:function(userId){\n//      user = Meteor.users.findOne({_id:userId});\n//      return user.profile.username;\n//    }, \n//    isMyUser:function(userId){\n//      if (userId == Meteor.userId()){\n//        return true;\n//      }\n//      else {\n//        return false;\n//      }\n//    },\n//    online:function(userId) {\n//    \tif(Meteor.users.findOne({_id:userId}).services.resume &&\n//    \t\tMeteor.users.findOne({_id:userId}).services.resume.loginTokens.length > 0) {\n//    \t\treturn true;\n//    \t} else {\n//    \t\treturn false\n//    \t}\n//    }\n//  })\nTemplate.chat_page.helpers({\n  messages:function(){\n    var chat = Chats.findOne({_id:Session.get(\"chatId\")});\n    return chat.messages;\n  }, \n  other_user:function(){\n  \tvar chat = Chats.findOne({_id:Session.get(\"chatId\")})\n    console.log(chat.user1Id);\n  \tif (Meteor.userId() == chat.user1Id) {\n  \t\tvar username = Meteor.users.findOne({_id:chat.user2Id}).profile.username;\n  \t\treturn username;\n  \t} else {\n  \t\tvar username = Meteor.users.findOne({_id:chat.user1Id}).profile.username;\n  \t\treturn username;\n  \t}\n  }, \n  getEmoji:function(emoji) {\n    return Emojis.findOne({alias: emoji}).emoji;\n  }\n})\nTemplate.chat_message.helpers({\n\tdisplay_pic: function() {\n\t\treturn this.sender.profile.avatar;\n\t},\n\tmessage_sender:function() {\n\t\tif (this.sender._id == Meteor.user()._id) {\n\t\t\treturn \"floatMeRight\";\n\t\t} else {\n\t\t\treturn;\n\t\t};\n\t}\n})\n\n///\n// event helpers\n///\n\nTemplate.chat_page.events({\n// this event fires when the user sends a message on the chat page\n'submit .js-send-chat':function(event){\n  // stop the form from triggering a page reload\n  event.preventDefault();\n  // see if we can find a chat object in the database\n  // to which we'll add the message\n  var chat = Chats.findOne({_id:Session.get(\"chatId\")});\n  if (chat){// ok - we have a chat to use\n    var msgs = chat.messages; // pull the messages property\n    if (!msgs){// no messages yet, create a new array\n      msgs = [];\n    }\n    // is a good idea to insert data straight from the form\n    // (i.e. the user) into the database?? certainly not. \n    // push adds the message to the end of the array\n    msgs.push({\n    \tsender: Meteor.user(),\n    \ttext: event.target.chat.value,\n\t});\n    // reset the form\n    // document.querySelector('[contenteditable]').textContent = \"\";\n    event.target.chat.value = \"\";\n    // put the messages array onto the chat object\n    chat.messages = msgs;\n    // update the chat object in the database.\n    // Chats.update(chat._id, chat);\n    Meteor.call('updateChat', chat)     \n  }\n},\n'click .js-insert-emoticon':function(event) {\n\tconsole.log($('#message_input').val());\n  console.log(event.target.textContent);\n  $('#message_input').val($('#message_input').val() + event.target.textContent);\n\n}\n})\n\n///\n// onRendered\n///\n\nTemplate.online_user.onRendered(function () {\n$( \".display_username\" ).hover(\n  function() {\n    $(this.firstChild.nextElementSibling.children[1]).css(\"display\", \"unset\");\n    $(this.firstChild.nextElementSibling.children[0]).css(\"border-bottom-left-radius\", \"0px\");\n    $(this.firstChild.nextElementSibling.children[0]).css(\"border-bottom-right-radius\", \"0px\");\n  }, function() {\n    $(this.firstChild.nextElementSibling.children[1]).css(\"display\", \"none\");\n    $(this.firstChild.nextElementSibling.children[0]).css(\"border-bottom-left-radius\", \"4px\");\n    $(this.firstChild.nextElementSibling.children[0]).css(\"border-bottom-right-radius\", \"4px\");\n  }\n);\n});\nTemplate.offline_user.onRendered(function () {\n$( \".display_username\" ).hover(\n  function() {\n    $(this.firstChild.nextElementSibling.children[1]).css(\"display\", \"unset\");\n    $(this.firstChild.nextElementSibling.children[0]).css(\"border-bottom-left-radius\", \"0px\");\n    $(this.firstChild.nextElementSibling.children[0]).css(\"border-bottom-right-radius\", \"0px\");\n  }, function() {\n    $(this.firstChild.nextElementSibling.children[1]).css(\"display\", \"none\");\n    $(this.firstChild.nextElementSibling.children[0]).css(\"border-bottom-left-radius\", \"4px\");\n    $(this.firstChild.nextElementSibling.children[0]).css(\"border-bottom-right-radius\", \"4px\");\n  }\n);\n});\n\nAccounts.ui.config({\n  requestPermissions: {},\n  extraSignupFields: [{\n      fieldName: 'username',\n      fieldLabel: 'Username',\n      inputType: 'text',\n      visible: true,\n      validate: function(value, errorFunction) {\n        if (!value) {\n          errorFunction(\"Please enter a username\");\n          return false;\n        } else {\n          return true;\n        }\n      }\n  }, {\n      fieldName: 'gender',\n      showFieldLabel: false,      // If true, fieldLabel will be shown before radio group\n      fieldLabel: 'Gender',\n      inputType: 'radio',\n      radioLayout: 'vertical',    // It can be 'inline' or 'vertical'\n      data: [{                    // Array of radio options, all properties are required\n          id: 1,                  // id suffix of the radio element\n          label: 'Male',          // label for the radio element\n          value: 'm'              // value of the radio element, this will be saved.\n        }, {\n          id: 2,\n          label: 'Female',\n          value: 'f',\n          checked: 'checked'\n      }],\n      visible: true\n  }, {\n      fieldName: 'avatar',\n      showFieldLabel: false,      // If true, fieldLabel will be shown before radio group\n      fieldLabel: 'Avatar',\n      inputType: 'text',\n      visible: false\n  }, {\n      fieldName: 'terms',\n      fieldLabel: 'I accept the terms and conditions',\n      inputType: 'checkbox',\n      visible: true,\n      saveToProfile: false,\n      validate: function(value, errorFunction) {\n          if (value) {\n              return true;\n          } else {\n              errorFunction('You must accept the terms and conditions.');\n              return false;\n          }\n      }\n  }]\n});\n\n\n\n\n\n\n\n","Chats = new Mongo.Collection(\"chats\");","///\n// Shared Folder\n///\n\nMeteor.methods({\n\tinsertChat:function(otherUserId) {\n\t\tchatId = Chats.insert({user1Id:Meteor.userId(), user2Id:otherUserId});\n\t\treturn chatId;\n\t}, \n\tupdateChat:function(chat) {\n\t\tChats.update(chat._id, chat);\n\t}\n});\n\n"]}}]