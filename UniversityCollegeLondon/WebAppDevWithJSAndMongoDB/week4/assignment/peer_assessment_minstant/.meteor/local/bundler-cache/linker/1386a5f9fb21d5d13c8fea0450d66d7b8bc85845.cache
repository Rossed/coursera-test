[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"lib\":{\"collections.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// lib/collections.js                                                                       //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\nChats = new Mongo.Collection(\"chats\");                                                      // 1\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"server\":{\"main.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// server/main.js                                                                           //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\n// start up script that creates some users for testing                                      //\n// users have the username 'user1@test.com' .. 'user8@test.com'                             //\n// and the password test123                                                                 //\n                                                                                            //\nMeteor.startup(function () {                                                                // 5\n  if (!Meteor.users.findOne()) {                                                            // 6\n    for (var i = 1; i < 9; i++) {                                                           // 7\n      var email = \"user\" + i + \"@test.com\";                                                 // 8\n      var username = \"user\" + i;                                                            // 9\n      var avatar = \"ava\" + i + \".png\";                                                      // 10\n      console.log(\"creating a user with password 'test123' and username/ email: \" + email);\n      Meteor.users.insert({ profile: { username: username, avatar: avatar }, emails: [{ address: email }], services: { password: { \"bcrypt\": \"$2a$10$I3erQ084OiyILTv8ybtQ4ON6wusgPbMZ6.P33zzSDei.BbDL.Q4EO\" } } });\n    }                                                                                       //\n  }                                                                                         //\n});                                                                                         //\nAccounts.onCreateUser(function (options, user) {                                            // 16\n  console.log(options.profile);                                                             // 17\n  user.profile = {};                                                                        // 18\n  user.profile = options.profile;                                                           // 19\n                                                                                            //\n  if (user.profile.gender == \"m\") {                                                         // 21\n    user.profile.avatar = \"ava2.png\";                                                       // 22\n  } else {                                                                                  //\n    user.profile.avatar = \"ava1.png\";                                                       // 24\n  }                                                                                         //\n  return user;                                                                              // 26\n});                                                                                         //\nMeteor.publish(\"chats\", function () {                                                       // 28\n  var user_chats = [];                                                                      // 29\n  for (i = 0; i < Chats.find({ user1Id: this.userId }).fetch().length; i++) {               // 30\n    user_chats.push(Chats.find({ user1Id: this.userId }).fetch()[i]);                       // 31\n    console.log(user_chats);                                                                // 32\n  };                                                                                        //\n  for (i = 0; i < Chats.find({ user2Id: this.userId }).fetch().length; i++) {               // 34\n    user_chats.push(Chats.find({ user2Id: this.userId }).fetch()[i]);                       // 35\n    console.log(user_chats);                                                                // 36\n  };                                                                                        //\n  // console.log(this.userId);                                                              //\n  // console.log(\"Chats.find(): \"+Chats.find());                                            //\n  // console.log(\"user1ID: \"+Chats.findOne({user1Id:this.userId}));                         //\n  // console.log(\"user2ID: \"+Chats.findOne({user2Id:this.userId}));                         //\n  // console.log(\"Chats: \"+Chats.find());                                                   //\n  // return Chats.find();                                                                   //\n  return user_chats;                                                                        // 28\n});                                                                                         //\nMeteor.publish(\"users\", function () {                                                       // 46\n  return Meteor.users.find();                                                               // 47\n});                                                                                         //\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"shared\":{\"main.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// shared/main.js                                                                           //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\n///                                                                                         //\n// Shared Folder                                                                            //\n///                                                                                         //\n                                                                                            //\nMeteor.methods({                                                                            // 5\n\tinsertChat: function () {                                                                  // 6\n\t\tfunction insertChat(otherUserId) {                                                        // 6\n\t\t\tchatId = Chats.insert({ user1Id: Meteor.userId(), user2Id: otherUserId });               // 7\n\t\t\treturn chatId;                                                                           // 8\n\t\t}                                                                                         //\n                                                                                            //\n\t\treturn insertChat;                                                                        //\n\t}(),                                                                                       //\n\tupdateChat: function () {                                                                  // 10\n\t\tfunction updateChat(chat) {                                                               // 10\n\t\t\tChats.update(chat._id, chat);                                                            // 11\n\t\t}                                                                                         //\n                                                                                            //\n\t\treturn updateChat;                                                                        //\n\t}()                                                                                        //\n});                                                                                         //\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./lib/collections.js\");\nrequire(\"./server/main.js\");\nrequire(\"./shared/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/lib/collections.js","/server/main.js","/shared/main.js"],"names":[],"mappings":";;;;;;;;AAAA,QAAQ,IAAI,MAAM,UAAN,CAAiB,OAArB,CAAR,2D;;;;;;;;;;;;;;;ACIA,OAAO,OAAP,CAAe,YAAY;AACzB,MAAI,CAAC,OAAO,KAAP,CAAa,OAAb,EAAD,EAAwB;AAC1B,SAAK,IAAI,IAAE,CAAF,EAAI,IAAE,CAAF,EAAI,GAAjB,EAAqB;AACnB,UAAI,QAAQ,SAAO,CAAP,GAAS,WAAT,CADO;AAEnB,UAAI,WAAW,SAAO,CAAP,CAFI;AAGnB,UAAI,SAAS,QAAM,CAAN,GAAQ,MAAR,CAHM;AAInB,cAAQ,GAAR,CAAY,kEAAgE,KAAhE,CAAZ,CAJmB;AAKnB,aAAO,KAAP,CAAa,MAAb,CAAoB,EAAC,SAAQ,EAAC,UAAS,QAAT,EAAmB,QAAO,MAAP,EAA5B,EAA4C,QAAO,CAAC,EAAC,SAAQ,KAAR,EAAF,CAAP,EAAyB,UAAS,EAAE,UAAS,EAAC,UAAW,8DAAX,EAAV,EAAX,EAA1F,EALmB;KAArB;GADF;CADa,CAAf;AAWA,SAAS,YAAT,CAAsB,UAAU,OAAV,EAAmB,IAAnB,EAAyB;AAC7C,UAAQ,GAAR,CAAY,QAAQ,OAAR,CAAZ,CAD6C;AAE7C,OAAK,OAAL,GAAe,EAAf,CAF6C;AAG7C,OAAK,OAAL,GAAe,QAAQ,OAAR,CAH8B;;AAK7C,MAAG,KAAK,OAAL,CAAa,MAAb,IAAuB,GAAvB,EAA4B;AAC7B,SAAK,OAAL,CAAa,MAAb,GAAsB,UAAtB,CAD6B;GAA/B,MAEO;AACL,SAAK,OAAL,CAAa,MAAb,GAAsB,UAAtB,CADK;GAFP;AAKA,SAAO,IAAP,CAV6C;CAAzB,CAAtB;AAYA,OAAO,OAAP,CAAe,OAAf,EAAwB,YAAW;AACjC,MAAI,aAAa,EAAb,CAD6B;AAEjC,OAAK,IAAE,CAAF,EAAK,IAAE,MAAM,IAAN,CAAW,EAAC,SAAQ,KAAK,MAAL,EAApB,EAAkC,KAAlC,GAA0C,MAA1C,EAAkD,GAA9D,EAAkE;AAChE,eAAW,IAAX,CAAgB,MAAM,IAAN,CAAW,EAAC,SAAQ,KAAK,MAAL,EAApB,EAAkC,KAAlC,GAA0C,CAA1C,CAAhB,EADgE;AAEhE,YAAQ,GAAR,CAAY,UAAZ,EAFgE;GAAlE,CAFiC;AAMjC,OAAK,IAAE,CAAF,EAAK,IAAE,MAAM,IAAN,CAAW,EAAC,SAAQ,KAAK,MAAL,EAApB,EAAkC,KAAlC,GAA0C,MAA1C,EAAkD,GAA9D,EAAkE;AAChE,eAAW,IAAX,CAAgB,MAAM,IAAN,CAAW,EAAC,SAAQ,KAAK,MAAL,EAApB,EAAkC,KAAlC,GAA0C,CAA1C,CAAhB,EADgE;AAEhE,YAAQ,GAAR,CAAY,UAAZ,EAFgE;GAAlE;;;;;;;AANiC,SAgB1B,UAAP,CAhBiC;CAAX,CAAxB;AAkBA,OAAO,OAAP,CAAe,OAAf,EAAwB,YAAW;AAClC,SAAO,OAAO,KAAP,CAAa,IAAb,EAAP,CADkC;CAAX,CAAxB,4F;;;;;;;;;;;;;;;ACzCA,OAAO,OAAP,CAAe;AACd;AAAW,sBAAS,WAAT,EAAsB;AAChC,YAAS,MAAM,MAAN,CAAa,EAAC,SAAQ,OAAO,MAAP,EAAR,EAAyB,SAAQ,WAAR,EAAvC,CAAT,CADgC;AAEhC,UAAO,MAAP,CAFgC;GAAtB;;;IAAX;AAIA;AAAW,sBAAS,IAAT,EAAe;AACzB,SAAM,MAAN,CAAa,KAAK,GAAL,EAAU,IAAvB,EADyB;GAAf;;;IAAX;CALD,6F","file":"/app.js","sourcesContent":["Chats = new Mongo.Collection(\"chats\");","// start up script that creates some users for testing\n// users have the username 'user1@test.com' .. 'user8@test.com'\n// and the password test123 \n\nMeteor.startup(function () {\n  if (!Meteor.users.findOne()){\n    for (var i=1;i<9;i++){\n      var email = \"user\"+i+\"@test.com\";\n      var username = \"user\"+i;\n      var avatar = \"ava\"+i+\".png\"\n      console.log(\"creating a user with password 'test123' and username/ email: \"+email);\n      Meteor.users.insert({profile:{username:username, avatar:avatar}, emails:[{address:email}],services:{ password:{\"bcrypt\" : \"$2a$10$I3erQ084OiyILTv8ybtQ4ON6wusgPbMZ6.P33zzSDei.BbDL.Q4EO\"}}});\n    }\n  } \n});\nAccounts.onCreateUser(function (options, user) {\n  console.log(options.profile);\n  user.profile = {};\n  user.profile = options.profile;\n\n  if(user.profile.gender == \"m\") {\n    user.profile.avatar = \"ava2.png\";\n  } else {\n    user.profile.avatar = \"ava1.png\";\n  }\n  return user;\n});\nMeteor.publish(\"chats\", function() {\n  var user_chats = [];\n  for (i=0; i<Chats.find({user1Id:this.userId}).fetch().length; i++){\n    user_chats.push(Chats.find({user1Id:this.userId}).fetch()[i]);\n    console.log(user_chats);\n  };\n  for (i=0; i<Chats.find({user2Id:this.userId}).fetch().length; i++){\n    user_chats.push(Chats.find({user2Id:this.userId}).fetch()[i]);\n    console.log(user_chats);\n  };\n  // console.log(this.userId);\n  // console.log(\"Chats.find(): \"+Chats.find());\n  // console.log(\"user1ID: \"+Chats.findOne({user1Id:this.userId}));\n  // console.log(\"user2ID: \"+Chats.findOne({user2Id:this.userId}));\n  // console.log(\"Chats: \"+Chats.find());\n\t// return Chats.find();\n  return user_chats;\n});\nMeteor.publish(\"users\", function() {\n\treturn Meteor.users.find();\n});","///\n// Shared Folder\n///\n\nMeteor.methods({\n\tinsertChat:function(otherUserId) {\n\t\tchatId = Chats.insert({user1Id:Meteor.userId(), user2Id:otherUserId});\n\t\treturn chatId;\n\t}, \n\tupdateChat:function(chat) {\n\t\tChats.update(chat._id, chat);\n\t}\n});\n\n"]}}]